%!PS-Adobe-3.0
%%Creator: groff version 1.11
%%CreationDate: Sun May  9 05:13:37 1999
%%DocumentNeededResources: font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%DocumentSuppliedResources: procset grops 1.11 0
%%Pages: 46
%%PageOrder: Ascend
%%Orientation: Portrait
%%EndComments
%%BeginProlog
%%BeginResource: procset grops 1.11 0
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}bind def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/FL{
currentgray exch setgray fill setgray
}bind def
/BL/fill load def
/LW/setlinewidth load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
}bind def
/PEND{
clear
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
%%IncludeResource: font Times-Roman
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Roman@0 ENC0/Times-Roman RE/Times-Italic@0 ENC0/Times-Italic RE
/Times-Bold@0 ENC0/Times-Bold RE
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Bold@0 SF(An Adv)134.112 123 Q(anced 4.4BSD Inter)-.12 E
(pr)-.12 E(ocess Communication T)-.216 E(utorial)-1.104 E/F1 10
/Times-Italic@0 SF(Samuel J)254.47 147 Q 2.5(.L)-.25 G(ef)-2.5 E(\215er)
-.18 E(Robert S. F)256.295 165 Q(abry)-.75 E -.55(Wi)258.54 183 S
(lliam N. J).55 E(oy)-.25 E(Phil Lapsle)263.01 201 Q(y)-.3 E/F2 10
/Times-Roman@0 SF(Computer Systems Research Group)216.48 219 Q
(Department of Electrical Engineering and Computer Science)166.36 231 Q
(Uni)219.725 243 Q -.15(ve)-.25 G(rsity of California, Berk).15 E(ele)
-.1 E(y)-.15 E(Berk)232.625 255 Q(ele)-.1 E 1.3 -.65(y, C)-.15 H 2.5
(alifornia 94720).65 F F1(Ste)263.775 303 Q(ve Miller)-.15 E(Chris T)
264.615 321 Q(or)-.92 E(ek)-.37 E F2(Heterogeneous Systems Laboratory)
216.625 339 Q(Department of Computer Science)220.93 351 Q(Uni)212.665
363 Q -.15(ve)-.25 G(rsity of Maryland, Colle).15 E(ge P)-.15 E(ark)-.15
E(Colle)226.49 375 Q(ge P)-.15 E(ark, Maryland 20742)-.15 E F1(ABSTRA)
264.535 411 Q(CT)-.3 E F2 .927(This document pro)133 442.2 R .927
(vides an introduction to the interprocess communication f)-.15 F
(acili-)-.1 E(ties included in the 4.4BSD release of the UNIX* system.)
108 454.2 Q 1.146(It discusses the o)133 469.8 R -.15(ve)-.15 G 1.146
(rall model for interprocess communication and introduces the).15 F .117
(interprocess communication primiti)108 481.8 R -.15(ve)-.25 G 2.617(sw)
.15 G .117(hich ha)-2.617 F .416 -.15(ve b)-.2 H .116
(een added to the system.).15 F .116(The major)5.116 F(-)-.2 E .299
(ity of the document considers the use of these primiti)108 493.8 R -.15
(ve)-.25 G 2.799(si).15 G 2.8(nd)-2.799 G -2.15 -.25(ev e)-2.8 H .3
(loping applications.).25 F(The)5.3 E .987(reader is e)108 505.8 R .987
(xpected to be f)-.15 F .986
(amiliar with the C programming language as all e)-.1 F .986
(xamples are)-.15 F(written in C.)108 517.8 Q .32 LW 144 708.2 72 708.2
DL/F3 8/Times-Roman@0 SF(*)72 720 Q/F4 6/Times-Roman@0 SF(UNIX)2 E F3
(is a trademark of UNIX System Laboratories, Inc.)2 E
(in the US and some other countries.)4 E EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 262.98(PSD:21-2 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E/F1 12/Times-Bold@0 SF(1. INTR)234.18 84 Q
(ODUCTION)-.36 E F0 .219
(One of the most important additions to UNIX in 4.2BSD w)72 120 R .22
(as interprocess communication.)-.1 F .22(These f)5.22 F(acilities)-.1 E
.123(were the result of more than tw)72 132 R 2.622(oy)-.1 G .122
(ears of discussion and research.)-2.622 F .122(The f)5.122 F .122
(acilities pro)-.1 F .122(vided in 4.2BSD incor)-.15 F(-)-.2 E .228
(porated man)72 144 R 2.728(yo)-.15 G 2.728(ft)-2.728 G .229(he ideas f\
rom current research, while trying to maintain the UNIX philosoph)-2.728
F 2.729(yo)-.05 G 2.729(fs)-2.729 G(implic-)-2.729 E 1.552
(ity and conciseness.)72 156 R 1.552(The 4.3BSD release of Berk)6.552 F
(ele)-.1 E 4.051(yU)-.15 G 1.551(NIX impro)-4.051 F -.15(ve)-.15 G 4.051
(du).15 G 1.551(pon some of the IPC f)-4.051 F(acilities)-.1 E .227
(while pro)72 168 R .227(viding an upw)-.15 F .227
(ard-compatible interf)-.1 F 2.728(ace. 4.4BSD)-.1 F .228
(adds support for ISO protocols and IP multicast-)2.728 F 2.5(ing. The)
72 180 R(BSD interprocess communication f)2.5 E(acilities ha)-.1 E .3
-.15(ve b)-.2 H(ecome a def).15 E(acto standard for UNIX.)-.1 E .443
(UNIX has pre)97 195.6 R .443(viously been v)-.25 F .443
(ery weak in the area of interprocess communication.)-.15 F .442
(Prior to the 4BSD)5.442 F -.1(fa)72 207.6 S .438
(cilities, the only standard mechanism which allo).1 F .438(wed tw)-.25
F 2.938(op)-.1 G .438(rocesses to communicate were pipes \(the mpx)
-2.938 F .546(\214les which were part of V)72 219.6 R .546
(ersion 7 were e)-1.11 F 3.046(xperimental\). Unfortunately)-.15 F 3.046
(,p)-.65 G .545(ipes are v)-3.046 F .545(ery restricti)-.15 F .845 -.15
(ve i)-.25 H 3.045(nt).15 G .545(hat the)-3.045 F(tw)72 231.6 Q 2.821
(oc)-.1 G .321
(ommunicating processes must be related through a common ancestor)-2.821
F 5.322(.F)-.55 G(urther)-5.322 E 2.822(,t)-.4 G .322
(he semantics of pipes)-2.822 F(mak)72 243.6 Q
(es them almost impossible to maintain in a distrib)-.1 E(uted en)-.2 E
(vironment.)-.4 E .243(Earlier attempts at e)97 259.2 R .243
(xtending the IPC f)-.15 F .243(acilities of UNIX ha)-.1 F .543 -.15
(ve m)-.2 H .242(et with mix).15 F .242(ed reaction.)-.15 F .242
(The majority)5.242 F .887(of the problems ha)72 271.2 R 1.188 -.15
(ve b)-.2 H .888(een related to the f).15 F .888(act that these f)-.1 F
.888(acilities ha)-.1 F 1.188 -.15(ve b)-.2 H .888
(een tied to the UNIX \214le system,).15 F 2.374
(either through naming or implementation.)72 283.2 R(Consequently)7.373
E 4.873(,t)-.65 G 2.373(he IPC f)-4.873 F 2.373(acilities pro)-.1 F
2.373(vided in 4.2BSD were)-.15 F .294
(designed as a totally independent subsystem.)72 295.2 R .294
(The BSD IPC allo)5.294 F .294(ws processes to rendezv)-.25 F .294
(ous in man)-.2 F 2.794(yw)-.15 G(ays.)-2.894 E .499
(Processes may rendezv)72 307.2 R .498
(ous through a UNIX \214le system-lik)-.2 F 2.998(en)-.1 G .498
(ame space \(a space where all names are path)-2.998 F .42
(names\) as well as through a netw)72 319.2 R .42(ork name space.)-.1 F
.42(In f)5.42 F .42(act, ne)-.1 F 2.92(wn)-.25 G .42
(ame spaces may be added at a future time)-2.92 F 1.706
(with only minor changes visible to users.)72 331.2 R(Further)6.706 E
4.206(,t)-.4 G 1.706(he communication f)-4.206 F 1.705(acilities ha)-.1
F 2.005 -.15(ve b)-.2 H 1.705(een e).15 F 1.705(xtended to)-.15 F 1.091
(include more than the simple byte stream pro)72 343.2 R 1.091
(vided by a pipe.)-.15 F 1.091(These e)6.091 F 1.091(xtensions ha)-.15 F
1.391 -.15(ve r)-.2 H 1.092(esulted in a com-).15 F .154(pletely ne)72
355.2 R 2.654(wp)-.25 G .154
(art of the system which users will need time to f)-2.654 F .154
(amiliarize themselv)-.1 F .153(es with.)-.15 F .153(It is lik)5.153 F
.153(ely that as)-.1 F(more use is made of these f)72 367.2 Q
(acilities the)-.1 E 2.5(yw)-.15 G
(ill be re\214ned; only time will tell.)-2.5 E .775(This document pro)97
382.8 R .775(vides a high-le)-.15 F -.15(ve)-.25 G 3.275(ld).15 G .775
(escription of the IPC f)-3.275 F .775
(acilities in 4.4BSD and their use.)-.1 F .775(It is)5.775 F .406
(designed to complement the manual pages for the IPC primiti)72 394.8 R
-.15(ve)-.25 G 2.906(sb).15 G 2.906(ye)-2.906 G .406
(xamples of their use.)-3.056 F .406(The remainder)5.406 F .906
(of this document is or)72 406.8 R -.05(ga)-.18 G .906
(nized in four sections.).05 F .906
(Section 2 introduces the IPC-related system calls and the)5.906 F .303
(basic model of communication.)72 418.8 R .303(Section 3 describes some\
 of the supporting library routines users may \214nd)5.303 F .448
(useful in constructing distrib)72 430.8 R .448(uted applications.)-.2 F
.449(Section 4 is concerned with the client/serv)5.448 F .449
(er model used in)-.15 F(de)72 442.8 Q -.15(ve)-.25 G 1.293
(loping applications and includes e).15 F 1.293(xamples of the tw)-.15 F
3.793(om)-.1 G 1.293(ajor types of serv)-3.793 F 3.792(ers. Section)-.15
F 3.792(5d)3.792 G(elv)-3.792 E 1.292(es into)-.15 F(adv)72 454.8 Q
(anced topics which sophisticated users are lik)-.25 E
(ely to encounter when using the IPC f)-.1 E(acilities.)-.1 E EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 262.98
(utorial PSD:21-3)-.45 F/F1 12/Times-Bold@0 SF(2. B)260.508 84 Q(ASICS)
-.36 E F0 .083(The basic b)97 123.6 R .083
(uilding block for communication is the)-.2 F/F2 10/Times-Italic@0 SF
(soc)2.583 E -.1(ke)-.2 G(t).1 E F0 5.083(.A)C(sock)-2.5 E .084
(et is an endpoint of communication)-.1 F .027(to which a name may be)72
135.6 R F2(bound)2.527 E F0 5.027(.E)C .027(ach sock)-5.027 F .027
(et in use has a)-.1 F F2(type)2.526 E F0 .026
(and one or more associated processes.)2.526 F(Sock-)5.026 E .503(ets e)
72 147.6 R .503(xist within)-.15 F F2 .503(communication domains)3.003 F
F0 5.503(.A)C .503
(communication domain is an abstraction introduced to b)-2.5 F(undle)-.2
E .274(common properties of processes communicating through sock)72
159.6 R 2.774(ets. One)-.1 F .273(such property is the scheme used to)
2.774 F 1.83(name sock)72 171.6 R 4.33(ets. F)-.1 F 1.83(or e)-.15 F
1.83(xample, in the UNIX communication domain sock)-.15 F 1.83
(ets are named with UNIX path)-.1 F .614(names; e.g. a sock)72 183.6 R
.613(et may be named `)-.1 F(`/de)-.74 E(v/foo')-.25 E 3.113('. Sock)
-.74 F .613(ets normally e)-.1 F .613(xchange data only with sock)-.15 F
.613(ets in the)-.1 F .797
(same domain \(it may be possible to cross domain boundaries, b)72 195.6
R .797(ut only if some translation process is per)-.2 F(-)-.2 E 2.901
(formed\). The)72 207.6 R .401(4.4BSD IPC f)2.901 F .401(acilities supp\
ort four separate communication domains: the UNIX domain, for)-.1 F .585
(on-system communication; the Internet domain, which is used by process\
es which communicate using the)72 219.6 R .884(Internet standard commun\
ication protocols; the NS domain, which is used by processes which comm\
uni-)72 231.6 R .508(cate using the Xerox standard communication protoc\
ols*; and the ISO OSI protocols, which are not docu-)72 243.6 R .346
(mented in this tutorial.)72 255.6 R .346
(The underlying communication f)5.346 F .346(acilities pro)-.1 F .347
(vided by these domains ha)-.15 F .647 -.15(ve a s)-.2 H(igni\214-).15 E
.211(cant in\215uence on the internal system implementation as well as \
the interf)72 267.6 R .21(ace to sock)-.1 F .21(et f)-.1 F .21
(acilities a)-.1 F -.25(va)-.2 G .21(ilable to).25 F 2.721(au)72 279.6 S
(ser)-2.721 E 5.221(.A)-.55 G 2.722(ne)-5.221 G .222
(xample of the latter is that a sock)-2.872 F .222(et `)-.1 F
(`operating')-.74 E 2.722('i)-.74 G 2.722(nt)-2.722 G .222
(he UNIX domain sees a subset of the error)-2.722 F(conditions which ar\
e possible when operating in the Internet \(or NS\) domain.)72 291.6 Q
/F3 10/Times-Bold@0 SF 2.5(2.1. Sock)72 315.6 R(et types)-.1 E F0(Sock)
97 331.2 Q 1.267(ets are typed according to the communication propertie\
s visible to a user)-.1 F 6.266(.P)-.55 G 1.266(rocesses are pre-)-6.266
F .107(sumed to communicate only between sock)72 343.2 R .108
(ets of the same type, although there is nothing that pre)-.1 F -.15(ve)
-.25 G .108(nts com-).15 F .176(munication between sock)72 355.2 R .176
(ets of dif)-.1 F .176(ferent types should the underlying communication\
 protocols support this.)-.25 F -.15(Fo)97 370.8 S .09(ur types of sock)
.15 F .09(ets currently are a)-.1 F -.25(va)-.2 G .091(ilable to a user)
.25 F 5.091(.A)-.55 G F2(str)-2.5 E(eam)-.37 E F0(sock)2.591 E .091
(et pro)-.1 F .091(vides for the bidirectional,)-.15 F .03
(reliable, sequenced, and unduplicated \215o)72 382.8 R 2.53(wo)-.25 G
2.53(fd)-2.53 G .03(ata without record boundaries.)-2.53 F .03
(Aside from the bidirectional-)5.03 F(ity of data \215o)72 394.8 Q 1.3
-.65(w, a p)-.25 H(air of connected stream sock).65 E(ets pro)-.1 E
(vides an interf)-.15 E(ace nearly identical to that of pipes\207.)-.1 E
(A)97 410.4 Q F2(data)3.306 E(gr)-.1 E(am)-.15 E F0(sock)3.306 E .806
(et supports bidirectional \215o)-.1 F 3.306(wo)-.25 G 3.306(fd)-3.306 G
.806(ata which is not promised to be sequenced, reli-)-3.306 F 1.736
(able, or unduplicated.)72 422.4 R 1.736(That is, a process recei)6.736
F 1.736(ving messages on a datagram sock)-.25 F 1.736
(et may \214nd messages)-.1 F .161(duplicated, and, possibly)72 434.4 R
2.661(,i)-.65 G 2.661(na)-2.661 G 2.661(no)-2.661 G .161(rder dif)-2.661
F .161(ferent from the order in which it w)-.25 F .16(as sent.)-.1 F .16
(An important character)5.16 F(-)-.2 E .396(istic of a datagram sock)72
446.4 R .396(et is that record boundaries in data are preserv)-.1 F
2.897(ed. Datagram)-.15 F(sock)2.897 E .397(ets closely model)-.1 F
(the f)72 458.4 Q(acilities found in man)-.1 E 2.5(yc)-.15 G
(ontemporary pack)-2.5 E(et switched netw)-.1 E
(orks such as the Ethernet.)-.1 E(A)97 474 Q F2 -.15(ra)2.76 G(w).15 E
F0(sock)2.76 E .26(et pro)-.1 F .26(vides users access to the underlyin\
g communication protocols which support sock)-.15 F(et)-.1 E 3.46
(abstractions. These)72 486 R(sock)3.46 E .961
(ets are normally datagram oriented, though their e)-.1 F .961
(xact characteristics are depen-)-.15 F .08(dent on the interf)72 498 R
.08(ace pro)-.1 F .08(vided by the protocol.)-.15 F(Ra)5.08 E 2.579(ws)
-.15 G(ock)-2.579 E .079(ets are not intended for the general user; the)
-.1 F 2.579(yh)-.15 G -2.25 -.2(av e)-2.579 H 1.975(been pro)72 510 R
1.975(vided mainly for those interested in de)-.15 F -.15(ve)-.25 G
1.975(loping ne).15 F 4.476(wc)-.25 G 1.976
(ommunication protocols, or for g)-4.476 F(aining)-.05 E .391
(access to some of the more esoteric f)72 522 R .391(acilities of an e)
-.1 F .39(xisting protocol.)-.15 F .39(The use of ra)5.39 F 2.89(ws)-.15
G(ock)-2.89 E .39(ets is considered)-.1 F(in section 5.)72 534 Q(A)97
549.6 Q F2 .015(sequenced pac)2.515 F -.1(ke)-.2 G(t).1 E F0(sock)2.515
E .015(et is similar to a stream sock)-.1 F .015(et, with the e)-.1 F
.015(xception that record boundaries are)-.15 F(preserv)72 561.6 Q 3.608
(ed. This)-.15 F(interf)3.608 E 1.108(ace is pro)-.1 F 1.108
(vided only as part of the NS sock)-.15 F 1.107
(et abstraction, and is v)-.1 F 1.107(ery important in)-.15 F
(most serious NS applications.)72 573.6 Q(Sequenced-pack)5 E(et sock)-.1
E(ets allo)-.1 E 2.5(wt)-.25 G
(he user to manipulate the SPP or IDP head-)-2.5 E .248(ers on a pack)72
585.6 R .248(et or a group of pack)-.1 F .248
(ets either by writing a prototype header along with whate)-.1 F -.15
(ve)-.25 G 2.747(rd).15 G .247(ata is to be)-2.747 F .447
(sent, or by specifying a def)72 597.6 R .447
(ault header to be used with all outgoing data, and allo)-.1 F .447
(ws the user to recei)-.25 F .747 -.15(ve t)-.25 H(he).15 E
(headers on incoming pack)72 609.6 Q 2.5(ets. The)-.1 F
(use of these options is considered in section 5.)2.5 E 2.203
(Another potential sock)97 625.2 R 2.203
(et type which has interesting properties is the)-.1 F F2 -.37(re)4.702
G 2.202(liably deliver).37 F 2.202(ed messa)-.37 F -.1(ge)-.1 G F0(sock)
72 637.2 Q 2.698(et. The)-.1 F .198(reliably deli)2.698 F -.15(ve)-.25 G
.198(red message sock).15 F .199
(et has similar properties to a datagram sock)-.1 F .199(et, b)-.1 F
.199(ut with reliable)-.2 F(deli)72 649.2 Q -.15(ve)-.25 G(ry).15 E
6.125(.T)-.65 G 1.125
(here is currently no support for this type of sock)-6.125 F 1.124
(et, b)-.1 F 1.124(ut a reliably deli)-.2 F -.15(ve)-.25 G 1.124
(red message protocol).15 F .495(similar to Xerox')72 661.2 R 2.995(sP)
-.55 G(ack)-3.145 E .495
(et Exchange Protocol \(PEX\) may be simulated at the user le)-.1 F -.15
(ve)-.25 G 2.996(l. More).15 F(information)2.996 E
(on this topic can be found in section 5.)72 673.2 Q .32 LW 144 681.2 72
681.2 DL/F4 8/Times-Roman@0 SF 2.978(*S)72 693 S(ee)-2.978 E/F5 8
/Times-Italic@0 SF .978(Internet T)2.978 F -.12(ra)-.44 G .978
(nsport Pr).12 F(otocols)-.36 E F4 2.978(,X)C .978(erox System Inte)
-2.978 F .978(gration Standard \(XSIS\)028112 for more information.)-.12
F(This document is almost a necessity for one trying to write NS applic\
ations.)72 703 Q 2.835<8749>72 714.8 S 2.835(nt)-2.835 G .835
(he UNIX domain, in f)-2.835 F .836
(act, the semantics are identical and, as one might e)-.08 F .836
(xpect, pipes ha)-.12 F 1.076 -.12(ve b)-.16 H .836(een imple-).12 F
(mented internally as simply a pair of connected stream sock)72 724.8 Q
(ets.)-.08 E EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 262.98(PSD:21-4 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E/F1 10/Times-Bold@0 SF 2.5(2.2. Sock)72 84 R(et cr)
-.1 E(eation)-.18 E F0 1.6 -.8(To c)97 99.6 T(reate a sock).8 E(et the)
-.1 E/F2 10/Times-Italic@0 SF(soc)2.5 E -.1(ke)-.2 G(t).1 E F0
(system call is used:)2.5 E 2.5(s=s)108 117.6 S(ock)-2.5 E
(et\(domain, type, protocol\);)-.1 E .52
(This call requests that the system create a sock)72 135.6 R .52
(et in the speci\214ed)-.1 F F2(domain)3.02 E F0 .52
(and of the speci\214ed)3.02 F F2(type)3.02 E F0 5.52(.A)C(par)-2.5 E(-)
-.2 E 1.131(ticular protocol may also be requested.)72 147.6 R 1.132
(If the protocol is left unspeci\214ed \(a v)6.131 F 1.132
(alue of 0\), the system will)-.25 F .479(select an appropriate protoco\
l from those protocols which comprise the communication domain and whic\
h)72 159.6 R .623(may be used to support the requested sock)72 171.6 R
.623(et type.)-.1 F .624
(The user is returned a descriptor \(a small inte)5.623 F .624(ger num-)
-.15 F .539
(ber\) which may be used in later system calls which operate on sock)72
183.6 R 3.038(ets. The)-.1 F .538(domain is speci\214ed as one of)3.038
F .08(the manifest constants de\214ned in the \214le <)72 195.6 R F2
(sys/soc)A -.1(ke)-.2 G(t.h).1 E F0 2.581(>. F)B .081
(or the UNIX domain the constant is AF_UNIX*;)-.15 F .878
(for the Internet domain AF_INET)72 207.6 R 3.378(;a)-.55 G .878
(nd for the NS domain, AF_NS.)-3.378 F .878(The sock)5.878 F .879
(et types are also de\214ned in)-.1 F 1.174
(this \214le and one of SOCK_STREAM, SOCK_DGRAM, SOCK_RA)72 219.6 R
3.013 -.92(W, o)-.9 H 3.673(rS).92 G(OCK_SEQP)-3.673 E -.4(AC)-.92 G
1.173(KET must be).4 F 2.5(speci\214ed. T)72 231.6 R 2.5(oc)-.8 G
(reate a stream sock)-2.5 E(et in the Internet domain the follo)-.1 E
(wing call might be used:)-.25 E 2.5(s=s)108 249.6 S(ock)-2.5 E
(et\(AF_INET)-.1 E 2.5(,S)-.74 G(OCK_STREAM, 0\);)-2.5 E 1.33
(This call w)72 267.6 R 1.33(ould result in a stream sock)-.1 F 1.33
(et being created with the TCP protocol pro)-.1 F 1.33
(viding the underlying)-.15 F(communication support.)72 279.6 Q 1.6 -.8
(To c)5 H(reate a datagram sock).8 E
(et for on-machine use the call might be:)-.1 E 2.5(s=s)108 297.6 S(ock)
-2.5 E(et\(AF_UNIX, SOCK_DGRAM, 0\);)-.1 E .69(The def)97 319.2 R .69
(ault protocol \(used when the)-.1 F F2(pr)3.19 E(otocol)-.45 E F0(ar)
3.19 E .689(gument to the)-.18 F F2(soc)3.189 E -.1(ke)-.2 G(t).1 E F0
.689(call is 0\) should be correct for)3.189 F .624(most e)72 331.2 R
-.15(ve)-.25 G .624(ry situation.).15 F(Ho)5.624 E(we)-.25 E -.15(ve)
-.25 G 1.424 -.4(r, i).15 H 3.124(ti).4 G 3.124(sp)-3.124 G .624
(ossible to specify a protocol other than the def)-3.124 F .625
(ault; this will be co)-.1 F(v-)-.15 E(ered in section 5.)72 343.2 Q
.603(There are se)97 358.8 R -.15(ve)-.25 G .603(ral reasons a sock).15
F .602(et call may f)-.1 F 3.102(ail. Aside)-.1 F .602
(from the rare occurrence of lack of memory)3.102 F(\(ENOB)72 370.8 Q .1
(UFS\), a sock)-.1 F .1(et request may f)-.1 F .101
(ail due to a request for an unkno)-.1 F .101(wn protocol \(EPR)-.25 F
-1.88 -.4(OT O)-.4 H(NOSUPPOR).4 E(T\),)-.6 E
(or a request for a type of sock)72 382.8 Q
(et for which there is no supporting protocol \(EPR)-.1 E -1.88 -.4
(OT OT)-.4 H(YPE\).).4 E F1 2.5(2.3. Binding)72 406.8 R(local names)2.5
E F0 2.651(As)97 422.4 S(ock)-2.651 E .151
(et is created without a name.)-.1 F .15
(Until a name is bound to a sock)5.151 F .15(et, processes ha)-.1 F .45
-.15(ve n)-.2 H 2.65(ow).15 G .15(ay to ref-)-2.75 F .056
(erence it and, consequently)72 434.4 R 2.557(,n)-.65 G 2.557(om)-2.557
G .057(essages may be recei)-2.557 F -.15(ve)-.25 G 2.557(do).15 G 2.557
(ni)-2.557 G 2.557(t. Communicating)-2.557 F .057
(processes are bound by an)2.557 F F2(association)72 446.4 Q F0 6.045
(.I)C 3.545(nt)-6.045 G 1.045(he Internet and NS domains, an associatio\
n is composed of local and foreign addresses,)-3.545 F 1.053(and local \
and foreign ports, while in the UNIX domain, an association is composed\
 of local and foreign)72 458.4 R 1.042(path names \(the phrase `)72
470.4 R 1.041(`foreign pathname')-.74 F 3.541('m)-.74 G 1.041
(eans a pathname created by a foreign process, not a path-)-3.541 F .978
(name on a foreign system\).)72 482.4 R .979
(In most domains, associations must be unique.)5.979 F .979
(In the Internet domain there)5.979 F 1.039(may ne)72 494.4 R -.15(ve)
-.25 G 3.539(rb).15 G 3.539(ed)-3.539 G 1.039(uplicate <protocol, local\
 address, local port, foreign address, foreign port> tuples.)-3.539 F
(UNIX)6.038 E .176(domain sock)72 506.4 R .176(ets need not al)-.1 F -.1
(wa)-.1 G .176(ys be bound to a name, b).1 F .176
(ut when bound there may ne)-.2 F -.15(ve)-.25 G 2.676(rb).15 G 2.677
(ed)-2.676 G .177(uplicate <proto-)-2.677 F .939
(col, local pathname, foreign pathname> tuples.)72 518.4 R .939
(The pathnames may not refer to \214les already e)5.939 F .938
(xisting on)-.15 F
(the system in 4.3; the situation may change in future releases.)72
530.4 Q(The)97 546 Q F2(bind)2.577 E F0 .077(system call allo)2.577 F
.078(ws a process to specify half of an association, <local address, lo\
cal port> \(or)-.25 F(<local pathname>\), while the)72 558 Q F2(connect)
2.5 E F0(and)2.5 E F2(accept)2.5 E F0(primiti)2.5 E -.15(ve)-.25 G 2.5
(sa).15 G(re used to complete a sock)-2.5 E(et')-.1 E 2.5(sa)-.55 G
(ssociation.)-2.5 E .234(In the Internet domain, binding names to sock)
97 573.6 R .234(ets can be f)-.1 F .234(airly comple)-.1 F 2.734(x. F)
-.15 F(ortunately)-.15 E 2.733(,i)-.65 G 2.733(ti)-2.733 G 2.733(su)
-2.733 G .233(sually not)-2.733 F .75
(necessary to speci\214cally bind an address and port number to a sock)
72 585.6 R .75(et, because the)-.1 F F2(connect)3.25 E F0(and)3.25 E F2
(send)3.25 E F0(calls)3.25 E 1.187
(will automatically bind an appropriate address if the)72 597.6 R 3.687
(ya)-.15 G 1.187(re used with an unbound sock)-3.687 F 3.687(et. The)-.1
F 1.186(process of)3.686 F(binding names to NS sock)72 609.6 Q
(ets is similar in most w)-.1 E
(ays to that of binding names to Internet sock)-.1 E(ets.)-.1 E(The)97
625.2 Q F2(bind)2.5 E F0(system call is used as follo)2.5 E(ws:)-.25 E
(bind\(s, name, namelen\);)108 643.2 Q 1.463(The bound name is a v)72
661.2 R 1.463(ariable length byte string which is interpreted by the su\
pporting protocol\(s\).)-.25 F(Its)6.464 E .575(interpretation may v)72
673.2 R .575(ary from communication domain to communication domain \(th\
is is one of the proper)-.25 F(-)-.2 E 1.94(ties which comprise the `)72
685.2 R(`domain')-.74 E 4.44('\). As)-.74 F 1.94
(mentioned, in the Internet domain names contain an Internet)4.44 F .023
(address and port number)72 697.2 R 5.023(.N)-.55 G 2.523(Sd)-5.023 G
.023(omain names contain an NS address and port number)-2.523 F 5.023
(.I)-.55 G 2.523(nt)-5.023 G .023(he UNIX domain,)-2.523 F .32 LW 144
705.2 72 705.2 DL/F3 8/Times-Roman@0 SF 2.579(*T)72 717 S .579
(he manifest constants are named AF_whate)-2.579 F -.12(ve)-.2 G 2.579
(ra).12 G 2.579(st)-2.579 G(he)-2.579 E 2.578(yi)-.12 G .578
(ndicate the `)-2.578 F .578(`address format')-.592 F 2.578('t)-.592 G
2.578(ou)-2.578 G .578(se in interpreting)-2.578 F(names.)72 727 Q EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 262.98
(utorial PSD:21-5)-.45 F 1.454(names contain a path name and a f)72 84 R
(amily)-.1 E 3.954(,w)-.65 G 1.454(hich is al)-3.954 F -.1(wa)-.1 G
1.455(ys AF_UNIX.).1 F 1.455(If one w)6.455 F 1.455
(anted to bind the name)-.1 F -.74(``)72 96 S(/tmp/foo').74 E 2.5('t)
-.74 G 2.5(oaU)-2.5 G(NIX domain sock)-2.5 E(et, the follo)-.1 E
(wing code w)-.25 E(ould be used*:)-.1 E(#include <sys/un.h>)108 114 Q
(...)110.5 126 Q(struct sockaddr_un addr;)108 138 Q(...)110.5 150 Q
(strcp)108 162 Q(y\(addr)-.1 E(.sun_path, "/tmp/foo"\);)-.55 E(addr)108
174 Q(.sun_f)-.55 E(amily = AF_UNIX;)-.1 E
(bind\(s, \(struct sockaddr *\) &addr)108 186 Q 2.5(,s)-.4 G
(trlen\(addr)-2.5 E(.sun_path\) +)-.55 E(sizeof \(addr)118 198 Q
(.sun_len\) + sizeof \(addr)-.55 E(.sun_f)-.55 E(amily\)\);)-.1 E .082(\
Note that in determining the size of a UNIX domain address null bytes a\
re not counted, which is wh)72 216 R(y)-.05 E/F1 10/Times-Italic@0 SF
(strlen)2.582 E F0 .529(is used.)72 228 R .529(In the current implement\
ation of UNIX domain IPC, the \214le name referred to in)5.529 F F1
(addr)3.028 E(.sun_path)-1.11 E F0(is)3.028 E .419(created as a sock)72
240 R .419(et in the system \214le space.)-.1 F .42
(The caller must, therefore, ha)5.419 F .72 -.15(ve w)-.2 H .42
(rite permission in the direc-).15 F 1.35(tory where)72 252 R F1(addr)
3.85 E(.sun_path)-1.11 E F0 1.35(is to reside, and this \214le should b\
e deleted by the caller when it is no longer)3.85 F 2.5(needed. Future)
72 264 R -.15(ve)2.5 G(rsions of 4BSD may not create this \214le.).15 E
(In binding an Internet address things become more complicated.)97 279.6
Q(The actual call is similar)5 E(,)-.4 E(#include <sys/types.h>)108
297.6 Q(#include <netinet/in.h>)108 309.6 Q(...)110.5 321.6 Q
(struct sockaddr_in sin;)108 333.6 Q(...)110.5 345.6 Q
(bind\(s, \(struct sockaddr *\) &sin, sizeof \(sin\)\);)108 357.6 Q -.2
(bu)72 375.6 S 3.377(tt).2 G .877
(he selection of what to place in the address)-3.377 F F1(sin)3.377 E F0
.877(requires some discussion.)3.377 F 2.478 -.8(We w)5.878 H .878
(ill come back to the).8 F .971(problem of formulating Internet address\
es in section 3 when the library routines used in name resolution)72
387.6 R(are discussed.)72 399.6 Q .158(Binding an NS address to a sock)
97 415.2 R .158(et is e)-.1 F -.15(ve)-.25 G 2.658(nm).15 G .158
(ore dif)-2.658 F .158
(\214cult, especially since the Internet library routines)-.25 F
(do not w)72 427.2 Q(ork with NS hostnames.)-.1 E(The actual call is ag)
5 E(ain similar:)-.05 E(#include <sys/types.h>)108 445.2 Q
(#include <netns/ns.h>)108 457.2 Q(...)110.5 469.2 Q
(struct sockaddr_ns sns;)108 481.2 Q(...)110.5 493.2 Q
(bind\(s, \(struct sockaddr *\) &sns, sizeof \(sns\)\);)108 505.2 Q(Ag)
72 523.2 Q(ain, discussion of what to place in a `)-.05 E
(`struct sockaddr_ns')-.74 E 2.5('w)-.74 G
(ill be deferred to section 3.)-2.5 E/F2 10/Times-Bold@0 SF 2.5
(2.4. Connection)72 547.2 R(establishment)2.5 E F0 2.793
(Connection establishment is usually asymmetric, with one process a `)97
562.8 R(`client')-.74 E 5.293('a)-.74 G 2.793(nd the other a)-5.293 F
-.74(``)72 574.8 S(serv).74 E(er')-.15 E 2.849('. The)-.74 F(serv)2.849
E(er)-.15 E 2.849(,w)-.4 G .349(hen willing to of)-2.849 F .349
(fer its adv)-.25 F .349(ertised services, binds a sock)-.15 F .35
(et to a well-kno)-.1 F .35(wn address)-.25 F .777
(associated with the service and then passi)72 586.8 R -.15(ve)-.25 G
.777(ly `).15 F(`listens')-.74 E 3.277('o)-.74 G 3.277(ni)-3.277 G .777
(ts sock)-3.277 F 3.277(et. It)-.1 F .777
(is then possible for an unrelated)3.277 F .208(process to rendezv)72
598.8 R .208(ous with the serv)-.2 F(er)-.15 E 5.209(.T)-.55 G .209
(he client requests services from the serv)-5.209 F .209
(er by initiating a `)-.15 F(`connec-)-.74 E(tion')72 610.8 Q 3.085('t)
-.74 G 3.085(ot)-3.085 G .585(he serv)-3.085 F(er')-.15 E 3.085(ss)-.55
G(ock)-3.085 E 3.084(et. On)-.1 F .584(the client side the)3.084 F F1
(connect)3.084 E F0 .584(call is used to initiate a connection.)3.084 F
.584(Using the)5.584 F(UNIX domain, this might appear as,)72 622.8 Q
(struct sockaddr_un serv)108 640.8 Q(er;)-.15 E(...)110.5 652.8 Q
(connect\(s, \(struct sockaddr *\)&serv)108 664.8 Q(er)-.15 E 2.5(,s)-.4
G(trlen\(serv)-2.5 E(er)-.15 E(.sun_path\) +)-.55 E(sizeof \(serv)118
676.8 Q(er)-.15 E(.sun_f)-.55 E(amily\)\);)-.1 E
(while in the Internet domain,)72 694.8 Q .32 LW 144 702.8 72 702.8 DL
/F3 8/Times-Roman@0 SF 2.174(*N)72 714.6 S .174
(ote that, although the tendenc)-2.174 F 2.174(yh)-.12 G .174
(ere is to call the `)-2.174 F(`addr')-.592 E 2.174('s)-.592 G .174
(tructure `)-2.174 F(`sun')-.592 E .174(', doing so w)-.592 F .173
(ould cause problems if)-.08 F(the code were e)72 724.6 Q -.12(ve)-.2 G
2(rp).12 G(orted to a Sun w)-2 E(orkstation.)-.08 E EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 262.98(PSD:21-6 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E(struct sockaddr_in serv)108 84 Q(er;)-.15 E(...)
110.5 96 Q(connect\(s, \(struct sockaddr *\)&serv)108 108 Q(er)-.15 E
2.5(,s)-.4 G(izeof \(serv)-2.5 E(er\)\);)-.15 E(and in the NS domain,)72
126 Q(struct sockaddr_ns serv)108 144 Q(er;)-.15 E(...)110.5 156 Q
(connect\(s, \(struct sockaddr *\)&serv)108 168 Q(er)-.15 E 2.5(,s)-.4 G
(izeof \(serv)-2.5 E(er\)\);)-.15 E(where)72 186 Q/F1 10/Times-Italic@0
SF(server)3.862 E F0 1.362(in the e)3.862 F 1.362(xample abo)-.15 F
1.662 -.15(ve w)-.15 H 1.362
(ould contain either the UNIX pathname, Internet address and port).05 F
(number)72 198 Q 3.37(,o)-.4 G 3.37(rN)-3.37 G 3.37(Sa)-3.37 G .87
(ddress and port number of the serv)-3.37 F .869
(er to which the client process wishes to speak.)-.15 F .869(If the)
5.869 F .616(client process')72 210 R 3.116(ss)-.55 G(ock)-3.116 E .617
(et is unbound at the time of the connect call, the system will automat\
ically select and)-.1 F .1(bind a name to the sock)72 222 R .1
(et if necessary; c.f. section 5.4.)-.1 F .1(This is the usual w)5.1 F
.1(ay that local addresses are bound)-.1 F(to a sock)72 234 Q(et.)-.1 E
.803(An error is returned if the connection w)97 249.6 R .803
(as unsuccessful \(an)-.1 F 3.303(yn)-.15 G .804
(ame automatically bound by the sys-)-3.303 F .959(tem, ho)72 261.6 R
(we)-.25 E -.15(ve)-.25 G 1.759 -.4(r, r).15 H 3.459
(emains\). Otherwise,).4 F .959(the sock)3.459 F .959
(et is associated with the serv)-.1 F .958(er and data transfer may be)
-.15 F(gin.)-.15 E
(Some of the more common errors returned when a connection attempt f)72
273.6 Q(ails are:)-.1 E(ETIMEDOUT)72 289.2 Q .48(After f)97 301.2 R .48
(ailing to establish a connection for a period of time, the system deci\
ded there w)-.1 F .481(as no point in)-.1 F .433
(retrying the connection attempt an)97 313.2 R 2.933(ym)-.15 G 2.933
(ore. This)-2.933 F .433
(usually occurs because the destination host is do)2.933 F(wn,)-.25 E
(or because problems in the netw)97 325.2 Q
(ork resulted in transmissions being lost.)-.1 E(ECONNREFUSED)72 340.8 Q
.155(The host refused service for some reason.)97 352.8 R .155
(This is usually due to a serv)5.155 F .155
(er process not being present at)-.15 F(the requested name.)97 364.8 Q
(ENETDO)72 380.4 Q(WN or EHOSTDO)-.35 E(WN)-.35 E .74
(These operational errors are returned based on status information deli)
97 392.4 R -.15(ve)-.25 G .739(red to the client host by the).15 F
(underlying communication services.)97 404.4 Q(ENETUNREA)72 420 Q
(CH or EHOSTUNREA)-.4 E(CH)-.4 E 1.055
(These operational errors can occur either because the netw)97 432 R
1.056(ork or host is unkno)-.1 F 1.056(wn \(no route to the)-.25 F(netw)
97 444 Q 1.156(ork or host is present\), or because of status informati\
on returned by intermediate g)-.1 F(ate)-.05 E -.1(wa)-.25 G 1.156
(ys or).1 F 1.727(switching nodes.)97 456 R(Man)6.727 E 4.227(yt)-.15 G
1.727(imes the status returned is not suf)-4.227 F 1.727
(\214cient to distinguish a netw)-.25 F 1.728(ork being)-.1 F(do)97 468
Q(wn from a host being do)-.25 E
(wn, in which case the system indicates the entire netw)-.25 E
(ork is unreachable.)-.1 E -.15(Fo)97 483.6 S 2.756(rt).15 G .256
(he serv)-2.756 F .256(er to recei)-.15 F .556 -.15(ve a c)-.25 H
(lient').15 E 2.756(sc)-.55 G .256(onnection it must perform tw)-2.756 F
2.756(os)-.1 G .256(teps after binding its sock)-2.756 F 2.755(et. The)
-.1 F(\214rst is to indicate a willingness to listen for incoming conne\
ction requests:)72 495.6 Q(listen\(s, 5\);)108 513.6 Q .9
(The second parameter to the)72 531.6 R F1(listen)3.401 E F0 .901
(call speci\214es the maximum number of outstanding connections which)
3.401 F 1.665(may be queued a)72 543.6 R -.1(wa)-.15 G 1.665
(iting acceptance by the serv).1 F 1.665
(er process; this number may be limited by the system.)-.15 F .404(Shou\
ld a connection be requested while the queue is full, the connection wi\
ll not be refused, b)72 555.6 R .404(ut rather the)-.2 F(indi)72 567.6 Q
.533(vidual messages which comprise the request will be ignored.)-.25 F
.532(This gi)5.532 F -.15(ve)-.25 G 3.032(sah).15 G .532(arried serv)
-3.032 F .532(er time to mak)-.15 F(e)-.1 E .786(room in its pending co\
nnection queue while the client retries the connection request.)72 579.6
R .786(Had the connection)5.786 F .666
(been returned with the ECONNREFUSED error)72 591.6 R 3.166(,t)-.4 G
.666(he client w)-3.166 F .666(ould be unable to tell if the serv)-.1 F
.666(er w)-.15 F .666(as up or)-.1 F 2.942(not. As)72 603.6 R .442
(it is no)2.942 F 2.942(wi)-.25 G 2.942(ti)-2.942 G 2.942(ss)-2.942 G
.443
(till possible to get the ETIMEDOUT error back, though this is unlik)
-2.942 F(ely)-.1 E 5.443(.T)-.65 G .443(he back-)-5.443 F .588(log \214\
gure supplied with the listen call is currently limited by the system t\
o a maximum of 5 pending con-)72 615.6 R .683(nections on an)72 627.6 R
3.183(yo)-.15 G .683(ne queue.)-3.183 F .684(This a)5.684 F -.2(vo)-.2 G
.684
(ids the problem of processes hogging system resources by setting an).2
F(in\214nite backlog, then ignoring all connection requests.)72 639.6 Q
-.4(Wi)97 655.2 S(th a sock).4 E(et mark)-.1 E(ed as listening, a serv)
-.1 E(er may)-.15 E F1(accept)2.5 E F0 2.5(ac)2.5 G(onnection:)-2.5 E
(struct sockaddr_in from;)108 673.2 Q(...)110.5 685.2 Q
(fromlen = sizeof \(from\);)108 697.2 Q(ne)108 709.2 Q
(wsock = accept\(s, \(struct sockaddr *\)&from, &fromlen\);)-.25 E(\(F)
72 727.2 Q 1.443(or the UNIX domain,)-.15 F F1(fr)3.943 E(om)-.45 E F0
-.1(wo)3.943 G 1.442(uld be declared as a).1 F F1 1.442(struct soc)3.942
F(kaddr_un)-.2 E F0 3.942(,a)C 1.442(nd for the NS domain,)-3.942 F F1
(fr)3.942 E(om)-.45 E EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 262.98
(utorial PSD:21-7)-.45 F -.1(wo)72 84 S .27(uld be declared as a).1 F/F1
10/Times-Italic@0 SF .27(struct soc)2.77 F(kaddr_ns)-.2 E F0 2.77(,b)C
.27(ut nothing dif)-2.97 F .271(ferent w)-.25 F .271
(ould need to be done as f)-.1 F .271(ar as)-.1 F F1(fr)2.771 E(omlen)
-.45 E F0(is)2.771 E 3.503(concerned. In)72 96 R 1.003(the e)3.503 F
1.003(xamples which follo)-.15 F 2.303 -.65(w, o)-.25 H 1.003
(nly Internet routines will be discussed.\)).65 F 3.502(An)6.002 G 1.502
-.25(ew d)-3.502 H 1.002(escriptor is).25 F .073
(returned on receipt of a connection \(along with a ne)72 108 R 2.573
(ws)-.25 G(ock)-2.573 E 2.574(et\). If)-.1 F .074(the serv)2.574 F .074
(er wishes to \214nd out who its client)-.15 F .457
(is, it may supply a b)72 120 R(uf)-.2 E .457(fer for the client sock)
-.25 F(et')-.1 E 2.956(sn)-.55 G 2.956(ame. The)-2.956 F -.25(va)2.956 G
.456(lue-result parameter).25 F F1(fr)2.956 E(omlen)-.45 E F0 .456
(is initialized by)2.956 F .887(the serv)72 132 R .887
(er to indicate ho)-.15 F 3.387(wm)-.25 G .887
(uch space is associated with)-3.387 F F1(fr)3.387 E(om)-.45 E F0 3.387
(,t)C .888(hen modi\214ed on return to re\215ect the true)-3.387 F
(size of the name.)72 144 Q(If the client')5 E 2.5(sn)-.55 G
(ame is not of interest, the second parameter may be a null pointer)-2.5
E(.)-.55 E F1(Accept)97 159.6 Q F0 .59(normally blocks.)3.09 F .59
(That is,)5.59 F F1(accept)3.09 E F0 .59
(will not return until a connection is a)3.09 F -.25(va)-.2 G .59
(ilable or the system).25 F .202
(call is interrupted by a signal to the process.)72 171.6 R(Further)
5.202 E 2.702(,t)-.4 G .202(here is no w)-2.702 F .202
(ay for a process to indicate it will accept)-.1 F .342
(connections from only a speci\214c indi)72 183.6 R .342
(vidual, or indi)-.25 F 2.842(viduals. It)-.25 F .341
(is up to the user process to consider who the)2.842 F .429
(connection is from and close do)72 195.6 R .429
(wn the connection if it does not wish to speak to the process.)-.25 F
.429(If the serv)5.429 F(er)-.15 E .093(process w)72 207.6 R .093
(ants to accept connections on more than one sock)-.1 F .093(et, or w)
-.1 F .093(ants to a)-.1 F -.2(vo)-.2 G .092
(id blocking on the accept call,).2 F(there are alternati)72 219.6 Q
-.15(ve)-.25 G(s; the).15 E 2.5(yw)-.15 G
(ill be considered in section 5.)-2.5 E/F2 10/Times-Bold@0 SF 2.5
(2.5. Data)72 243.6 R(transfer)2.5 E F0 -.4(Wi)97 259.2 S .507
(th a connection established, data may be).4 F .508(gin to \215o)-.15 F
4.308 -.65(w. T)-.25 H 3.008(os)-.15 G .508(end and recei)-3.008 F .808
-.15(ve d)-.25 H .508(ata there are a number).15 F .771
(of possible calls.)72 271.2 R -.4(Wi)5.771 G .771(th the peer entity a\
t each end of a connection anchored, a user can send or recei).4 F 1.071
-.15(ve a)-.25 H .05(message without specifying the peer)72 283.2 R 5.05
(.A)-.55 G 2.55(so)-5.05 G .05(ne might e)-2.55 F .05
(xpect, in this case, then the normal)-.15 F F1 -.37(re)2.55 G(ad).37 E
F0(and)2.55 E F1(write)2.55 E F0(sys-)2.55 E(tem calls are usable,)72
295.2 Q(write\(s, b)108 313.2 Q(uf, sizeof \(b)-.2 E(uf\)\);)-.2 E
(read\(s, b)108 325.2 Q(uf, sizeof \(b)-.2 E(uf\)\);)-.2 E
(In addition to)72 343.2 Q F1 -.37(re)2.5 G(ad).37 E F0(and)2.5 E F1
(write)2.5 E F0 2.5(,t)C(he ne)-2.5 E 2.5(wc)-.25 G(alls)-2.5 E F1(send)
2.5 E F0(and)2.5 E F1 -.37(re)2.5 G(cv).37 E F0(may be used:)2.5 E
(send\(s, b)108 361.2 Q(uf, sizeof \(b)-.2 E(uf\), \215ags\);)-.2 E
(recv\(s, b)108 373.2 Q(uf, sizeof \(b)-.2 E(uf\), \215ags\);)-.2 E
(While)72 391.2 Q F1(send)3.508 E F0(and)3.507 E F1 -.37(re)3.507 G(cv)
.37 E F0 1.007(are virtually identical to)3.507 F F1 -.37(re)3.507 G(ad)
.37 E F0(and)3.507 E F1(write)3.507 E F0 3.507(,t)C 1.007(he e)-3.507 F
(xtra)-.15 E F1<8d61>3.507 E(gs)-.1 E F0(ar)3.507 E 1.007
(gument is important.)-.18 F(The)6.007 E .998(\215ags, de\214ned in)72
403.2 R F1(<sys/soc)3.499 E -.1(ke)-.2 G(t.h>).1 E F0 3.499(,m)C .999
(ay be speci\214ed as a non-zero v)-3.499 F .999
(alue if one or more of the follo)-.25 F .999(wing is)-.25 F(required:)
72 415.2 Q 52.09(MSG_OOB send/recei)108 439.2 R .3 -.15(ve o)-.25 H
(ut of band data).15 E 48.2(MSG_PEEK look)108 451.2 R
(at data without reading)2.5 E(MSG_DONTR)108 463.2 Q 12.5(OUTE send)-.4
F(data without routing pack)2.5 E(ets)-.1 E .829
(Out of band data is a notion speci\214c to stream sock)72 487.2 R .829
(ets, and one which we will not immediately consider)-.1 F(.)-.55 E .631
(The option to ha)72 499.2 R .931 -.15(ve d)-.2 H .632
(ata sent without routing applied to the outgoing pack).15 F .632
(ets is currently used only by the)-.1 F .845
(routing table management process, and is unlik)72 511.2 R .845
(ely to be of interest to the casual user)-.1 F 5.845(.T)-.55 G .845
(he ability to pre-)-5.845 F(vie)72 523.2 Q 4.003(wd)-.25 G 1.503
(ata is, ho)-4.003 F(we)-.25 E -.15(ve)-.25 G 2.303 -.4(r, o).15 H 4.003
(fi).4 G 4.003(nterest. When)-4.003 F 1.504
(MSG_PEEK is speci\214ed with a)4.003 F F1 -.37(re)4.004 G(cv).37 E F0
1.504(call, an)4.004 F 4.004(yd)-.15 G 1.504(ata present is)-4.004 F
.675(returned to the user)72 535.2 R 3.175(,b)-.4 G .675
(ut treated as still `)-3.375 F(`unread')-.74 E 3.175('. That)-.74 F
.674(is, the ne)3.175 F(xt)-.15 E F1 -.37(re)3.174 G(ad).37 E F0(or)
3.174 E F1 -.37(re)3.174 G(cv).37 E F0 .674(call applied to the sock)
3.174 F(et)-.1 E(will return the data pre)72 547.2 Q(viously pre)-.25 E
(vie)-.25 E(wed.)-.25 E F2 2.5(2.6. Discarding)72 571.2 R(sock)2.5 E
(ets)-.1 E F0(Once a sock)97 586.8 Q
(et is no longer of interest, it may be discarded by applying a)-.1 E F1
(close)2.5 E F0(to the descriptor)2.5 E(,)-.4 E(close\(s\);)108 604.8 Q
.032(If data is associated with a sock)72 622.8 R .032
(et which promises reliable deli)-.1 F -.15(ve)-.25 G .032
(ry \(e.g. a stream sock).15 F .033(et\) when a close tak)-.1 F(es)-.1 E
.024(place, the system will continue to attempt to transfer the data.)72
634.8 R(Ho)5.024 E(we)-.25 E -.15(ve)-.25 G .824 -.4(r, a).15 H .024
(fter a f).4 F .023(airly long period of time, if)-.1 F .842
(the data is still undeli)72 646.8 R -.15(ve)-.25 G .842
(red, it will be discarded.).15 F .842(Should a user ha)5.842 F 1.142
-.15(ve n)-.2 H 3.342(ou).15 G .842(se for an)-3.342 F 3.342(yp)-.15 G
.842(ending data, it may)-3.342 F(perform a)72 658.8 Q F1(shutdown)2.5 E
F0(on the sock)2.5 E(et prior to closing it.)-.1 E
(This call is of the form:)5 E(shutdo)108 676.8 Q(wn\(s, ho)-.25 E(w\);)
-.25 E(where)72 694.8 Q F1(how)2.994 E F0 .494(is 0 if the user is no l\
onger interested in reading data, 1 if no more data will be sent, or 2 \
if no)2.994 F(data is to be sent or recei)72 706.8 Q -.15(ve)-.25 G(d.)
.15 E EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 262.98(PSD:21-8 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E/F1 10/Times-Bold@0 SF 2.5(2.7. Connectionless)72
84 R(sock)2.5 E(ets)-.1 E F0 1.652 -.8(To t)97 99.6 T .052
(his point we ha).8 F .352 -.15(ve b)-.2 H .052
(een concerned mostly with sock).15 F .052(ets which follo)-.1 F 2.552
(wac)-.25 G .052(onnection oriented model.)-2.552 F(Ho)72 111.6 Q(we)
-.25 E -.15(ve)-.25 G 2.122 -.4(r, t).15 H 1.321(here is also support f\
or connectionless interactions typical of the datagram f).4 F 1.321
(acilities found in)-.1 F 2.766(contemporary pack)72 123.6 R 2.766
(et switched netw)-.1 F 5.266(orks. A)-.1 F 2.767(datagram sock)5.267 F
2.767(et pro)-.1 F 2.767(vides a symmetric interf)-.15 F 2.767
(ace to data)-.1 F -.15(ex)72 135.6 S 3.497(change. While).15 F .997
(processes are still lik)3.497 F .997(ely to be client and serv)-.1 F
(er)-.15 E 3.497(,t)-.4 G .997(here is no requirement for connection)
-3.497 F 2.5(establishment. Instead,)72 147.6 R
(each message includes the destination address.)2.5 E 1.111
(Datagram sock)97 163.2 R 1.111(ets are created as before.)-.1 F 1.111
(If a particular local address is needed, the)6.111 F/F2 10
/Times-Italic@0 SF(bind)3.612 E F0(operation)3.612 E .389
(must precede the \214rst data transmission.)72 175.2 R .389
(Otherwise, the system will set the local address and/or port when)5.389
F(data is \214rst sent.)72 187.2 Q 1.6 -.8(To s)5 H(end data, the).8 E
F2(sendto)2.5 E F0(primiti)2.5 E .3 -.15(ve i)-.25 H 2.5(su).15 G(sed,)
-2.5 E(sendto\(s, b)108 205.2 Q(uf, b)-.2 E
(u\215en, \215ags, \(struct sockaddr *\)&to, tolen\);)-.2 E(The)72 223.2
Q F2(s)2.823 E F0(,)A F2 -.2(bu)2.823 G(f).2 E F0(,)A F2 -.2(bu)2.823 G
(\215en).2 E F0 2.823(,a)C(nd)-2.823 E F2<8d61>2.823 E(gs)-.1 E F0 .323
(parameters are used as before.)2.823 F(The)5.323 E F2(to)2.823 E F0
(and)2.823 E F2(tolen)2.823 E F0 -.25(va)2.823 G .323
(lues are used to indicate the).25 F 2.22
(address of the intended recipient of the message.)72 235.2 R 2.22
(When using an unreliable datagram interf)7.22 F 2.22(ace, it is)-.1 F
(unlik)72 247.2 Q .61(ely that an)-.1 F 3.11(ye)-.15 G .61
(rrors will be reported to the sender)-3.11 F 5.611(.W)-.55 G .611
(hen information is present locally to recognize a)-5.611 F .372
(message that can not be deli)72 259.2 R -.15(ve)-.25 G .372
(red \(for instance when a netw).15 F .371
(ork is unreachable\), the call will return \2551 and)-.1 F
(the global v)72 271.2 Q(alue)-.25 E F2(errno)2.5 E F0
(will contain an error number)2.5 E(.)-.55 E 1.6 -.8(To r)97 286.8 T
(ecei).8 E .3 -.15(ve m)-.25 H(essages on an unconnected datagram sock)
.15 E(et, the)-.1 E F2 -.37(re)2.5 G(cvfr).37 E(om)-.45 E F0(primiti)2.5
E .3 -.15(ve i)-.25 H 2.5(sp).15 G(ro)-2.5 E(vided:)-.15 E
(recvfrom\(s, b)108 304.8 Q(uf, b)-.2 E
(u\215en, \215ags, \(struct sockaddr *\)&from, &fromlen\);)-.2 E .807
(Once ag)72 322.8 R .807(ain, the)-.05 F F2(fr)3.307 E(omlen)-.45 E F0
.807(parameter is handled in a v)3.307 F .808(alue-result f)-.25 F .808
(ashion, initially containing the size of the)-.1 F F2(fr)72 334.8 Q(om)
-.45 E F0 -.2(bu)2.957 G -.25(ff).2 G(er).25 E 2.957(,a)-.4 G .456(nd m\
odi\214ed on return to indicate the actual size of the address from whi\
ch the datagram w)-2.957 F(as)-.1 E(recei)72 346.8 Q -.15(ve)-.25 G(d.)
.15 E .15(In addition to the tw)97 362.4 R 2.65(oc)-.1 G .15
(alls mentioned abo)-2.65 F -.15(ve)-.15 G 2.651(,d).15 G .151
(atagram sock)-2.651 F .151(ets may also use the)-.1 F F2(connect)2.651
E F0 .151(call to asso-)2.651 F .86(ciate a sock)72 374.4 R .86
(et with a speci\214c destination address.)-.1 F .859(In this case, an)
5.86 F 3.359(yd)-.15 G .859(ata sent on the sock)-3.359 F .859
(et will automati-)-.1 F .101(cally be addressed to the connected peer)
72 386.4 R 2.601(,a)-.4 G .101(nd only data recei)-2.601 F -.15(ve)-.25
G 2.601(df).15 G .101(rom that peer will be deli)-2.601 F -.15(ve)-.25 G
.101(red to the user).15 F(.)-.55 E .184
(Only one connected address is permitted for each sock)72 398.4 R .184
(et at one time; a second connect will change the des-)-.1 F .57
(tination address, and a connect to a null address \(f)72 410.4 R .57
(amily AF_UNSPEC\) will disconnect.)-.1 F .57(Connect requests)5.57 F
.928(on datagram sock)72 422.4 R .928(ets return immediately)-.1 F 3.428
(,a)-.65 G 3.427(st)-3.428 G .927
(his simply results in the system recording the peer')-3.427 F 3.427(sa)
-.55 G(ddress)-3.427 E .587(\(as compared to a stream sock)72 434.4 R
.587(et, where a connect request initiates establishment of an end to e\
nd connec-)-.1 F(tion\).)72 446.4 Q F2(Accept)5 E F0(and)2.5 E F2
(listen)2.5 E F0(are not used with datagram sock)2.5 E(ets.)-.1 E 1.154
(While a datagram sock)97 462 R 1.154(et sock)-.1 F 1.154
(et is connected, errors from recent)-.1 F F2(send)3.654 E F0 1.154
(calls may be returned asyn-)3.654 F(chronously)72 474 Q 6.751(.T)-.65 G
1.751(hese errors may be reported on subsequent operations on the sock)
-6.751 F 1.752(et, or a special sock)-.1 F(et)-.1 E .321
(option used with)72 486 R F2 -.1(ge)2.821 G(tsoc).1 E -.1(ko)-.2 G(pt)
.1 E F0 2.821(,S)C(O_ERR)-2.821 E .321(OR, may be used to interrog)-.4 F
.32(ate the error status.)-.05 F(A)5.32 E F2(select)2.82 E F0 .32
(for reading)2.82 F .825
(or writing will return true when an error indication has been recei)72
498 R -.15(ve)-.25 G 3.325(d. The).15 F(ne)3.326 E .826
(xt operation will return the)-.15 F(error)72 510 Q 3.079(,a)-.4 G .579
(nd the error status is cleared.)-3.079 F .578
(Other of the less important details of datagram sock)5.578 F .578
(ets are described)-.1 F(in section 5.)72 522 Q F1 2.5
(2.8. Input/Output)72 546 R(multiplexing)2.5 E F0 .714(One last f)97
561.6 R .714(acility often used in de)-.1 F -.15(ve)-.25 G .715
(loping applications is the ability to multiple).15 F 3.215(xi)-.15 G
.715(/o requests among)-3.215 F(multiple sock)72 573.6 Q
(ets and/or \214les.)-.1 E(This is done using the)5 E F2(select)2.5 E F0
(call:)2.5 E(#include <sys/time.h>)108 591.6 Q(#include <sys/types.h>)
108 603.6 Q(...)110.5 615.6 Q(fd_set readmask, writemask, e)108 639.6 Q
(xceptmask;)-.15 E(struct time)108 651.6 Q -.25(va)-.25 G 2.5(lt).25 G
(imeout;)-2.5 E(...)110.5 663.6 Q
(select\(nfds, &readmask, &writemask, &e)108 675.6 Q
(xceptmask, &timeout\);)-.15 E F2(Select)72 693.6 Q F0(tak)2.537 E .037
(es as ar)-.1 F .037(guments pointers to three sets, one for the set of\
 \214le descriptors for which the caller wishes)-.18 F .127(to be able \
to read data on, one for those descriptors to which data is to be writt\
en, and one for which e)72 705.6 R(xcep-)-.15 E .404
(tional conditions are pending; out-of-band data is the only e)72 717.6
R .404(xceptional condition currently implemented by)-.15 F 3.374
(the sock)72 729.6 R 3.374(et If the user is not interested in certain \
conditions \(i.e., read, write, or e)-.1 F 3.375(xceptions\), the)-.15 F
EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 262.98
(utorial PSD:21-9)-.45 F(corresponding ar)72 84 Q(gument to the)-.18 E
/F1 10/Times-Italic@0 SF(select)2.5 E F0(should be a null pointer)2.5 E
(.)-.55 E .571
(Each set is actually a structure containing an array of long inte)97
99.6 R .57(ger bit masks; the size of the array is)-.15 F .483
(set by the de\214nition FD_SETSIZE.)72 111.6 R .483
(The array is be long enough to hold one bit for each of FD_SETSIZE)
5.483 F(\214le descriptors.)72 123.6 Q 2.39(The macros FD_SET\()97 139.2
R F1 2.389(fd, &mask)B F0 4.889(\)a)C 2.389(nd FD_CLR\()-4.889 F F1
2.389(fd, &mask)B F0 4.889(\)h)C -2.25 -.2(av e)-4.889 H 2.389(been pro)
5.089 F 2.389(vided for adding and)-.15 F(remo)72 151.2 Q 3.039
(ving \214le descriptor)-.15 F F1(fd)5.539 E F0 3.039(in the set)5.539 F
F1(mask)5.539 E F0 8.039(.T)C 3.04
(he set should be zeroed before use, and the macro)-8.039 F(FD_ZER)72
163.2 Q(O\()-.4 E F1(&mask)A F0 2.874(\)h)C .374(as been pro)-2.874 F
.373(vided to clear the set)-.15 F F1(mask)2.873 E F0 5.373(.T)C .373
(he parameter)-5.373 F F1(nfds)2.873 E F0 .373(in the)2.873 F F1(select)
2.873 E F0 .373(call speci\214es)2.873 F
(the range of \214le descriptors)72 175.2 Q(\(i.e. one plus the v)5 E
(alue of the lar)-.25 E(gest descriptor\) to be e)-.18 E
(xamined in a set.)-.15 E 3.152(At)97 190.8 S .652(imeout v)-3.152 F
.653(alue may be speci\214ed if the selection is not to last more than \
a predetermined period of)-.25 F 3.196(time. If)72 202.8 R .696
(the \214elds in)3.196 F F1(timeout)3.196 E F0 .696
(are set to 0, the selection tak)3.196 F .695(es the form of a)-.1 F F1
(poll)3.195 E F0 3.195(,r)C .695(eturning immediately)-3.195 F 5.695(.I)
-.65 G(f)-5.695 E .413(the last parameter is a null pointer)72 214.8 R
2.913(,t)-.4 G .413(he selection will block inde\214nitely*.)-2.913 F F1
(Select)5.413 E F0 .413(normally returns the num-)2.913 F 1.328
(ber of \214le descriptors selected; if the)72 226.8 R F1(select)3.828 E
F0 1.328(call returns due to the timeout e)3.828 F 1.329
(xpiring, then the v)-.15 F 1.329(alue 0 is)-.25 F 2.69(returned. If)72
238.8 R(the)2.69 E F1(select)2.69 E F0 .19(terminates because of an err\
or or interruption, a \2551 is returned with the error number)2.69 F(in)
72 250.8 Q F1(errno)2.5 E F0 2.5(,a)C
(nd with the \214le descriptor masks unchanged.)-2.5 E .634(Assuming a \
successful return, the three sets will indicate which \214le descriptor\
s are ready to be read)97 266.4 R 1.017(from, written to, or ha)72 278.4
R 1.317 -.15(ve ex)-.2 H 1.017(ceptional conditions pending.).15 F 1.016
(The status of a \214le descriptor in a select mask)6.017 F .623
(may be tested with the)72 290.4 R F1 .623(FD_ISSET\(fd, &mask\))3.123 F
F0 .623(macro, which returns a non-zero v)3.123 F .624(alue if)-.25 F F1
(fd)3.124 E F0 .624(is a member of)3.124 F(the set)72 302.4 Q F1(mask)
2.5 E F0 2.5(,a)C(nd 0 if it is not.)-2.5 E 1.676 -.8(To d)97 318 T .076
(etermine if there are connections w).8 F .075(aiting on a sock)-.1 F
.075(et to be used with an)-.1 F F1(accept)2.575 E F0(call,)2.575 E F1
(select)2.575 E F0 .075(can be)2.575 F .361(used, follo)72 330 R .361
(wed by a)-.25 F F1 .362(FD_ISSET\(fd, &mask\))2.862 F F0 .362
(macro to check for read readiness on the appropriate sock)2.862 F 2.862
(et. If)-.1 F F1(FD_ISSET)72 342 Q F0 1.432(returns a non-zero v)3.932 F
1.432(alue, indicating permission to read, then a connection is pending\
 on the)-.25 F(sock)72 354 Q(et.)-.1 E .441(As an e)97 369.6 R .441
(xample, to read data from tw)-.15 F 2.941(os)-.1 G(ock)-2.941 E(ets,)
-.1 E F1(s1)2.941 E F0(and)2.941 E F1(s2)2.941 E F0 .442(as it is a)
2.941 F -.25(va)-.2 G .442(ilable from each and with a one-).25 F
(second timeout, the follo)72 381.6 Q(wing code might be used:)-.25 E
.32 LW 144 698.2 72 698.2 DL/F2 8/Times-Roman@0 SF 2.318(*T)72 710 S
2.318(ob)-2.958 G 2.318(em)-2.318 G .318(ore speci\214c, a return tak)
-2.318 F .318(es place only when a descriptor is selectable, or when a \
signal is recei)-.08 F -.12(ve)-.2 G 2.319(db).12 G(y)-2.319 E
(the caller)72 720 Q 2(,i)-.32 G(nterrupting the system call.)-2 E EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-10 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E(#include <sys/time.h>)108 84 Q
(#include <sys/types.h>)108 96 Q(...)110.5 108 Q(fd_set read_template;)
108 120 Q(struct time)108 132 Q -.25(va)-.25 G 2.5(lw).25 G(ait;)-2.6 E
(...)110.5 144 Q(for \(;;\) {)108 156 Q -.1(wa)133 168 S(it.tv_sec = 1;)
.1 E(/* one second */)36.41 E -.1(wa)133 180 S(it.tv_usec = 0;).1 E
(FD_ZER)133 204 Q(O\(&read_template\);)-.4 E
(FD_SET\(s1, &read_template\);)133 228 Q(FD_SET\(s2, &read_template\);)
133 240 Q(nb = select\(FD_SETSIZE, &read_template, \(fd_set *\) 0, \(fd\
_set *\) 0, &w)133 264 Q(ait\);)-.1 E(if \(nb <= 0\) {)133 276 Q/F1 10
/Times-Italic@0 SF(An err)158 288 Q(or occurr)-.45 E(ed during the)-.37
E F0(select)2.5 E F1 2.5(,o)C(r)-2.5 E(the)158 300 Q F0(select)2.5 E F1
(timed out.)2.5 E F0(})133 312 Q
(if \(FD_ISSET\(s1, &read_template\)\) {)133 336 Q F1(Soc)158 348 Q -.1
(ke)-.2 G 2.5(t#).1 G 2.5(1i)-2.5 G 2.5(sr)-2.5 G(eady to be r)-2.87 E
(ead fr)-.37 E(om.)-.45 E F0(})133 360 Q
(if \(FD_ISSET\(s2, &read_template\)\) {)133 384 Q F1(Soc)158 396 Q -.1
(ke)-.2 G 2.5(t#).1 G 2.5(2i)-2.5 G 2.5(sr)-2.5 G(eady to be r)-2.87 E
(ead fr)-.37 E(om.)-.45 E F0(})133 408 Q(})108 420 Q .777
(In 4.2, the ar)97 441.6 R .777(guments to)-.18 F F1(select)3.277 E F0
.777(were pointers to inte)3.277 F .777(gers instead of pointers to)-.15
F F1(fd_set)3.277 E F0 3.277(s. This)B .777(type of)3.277 F .447
(call will still w)72 453.6 R .447
(ork as long as the number of \214le descriptors being e)-.1 F .448
(xamined is less than the number of bits)-.15 F(in an inte)72 465.6 Q
(ger; ho)-.15 E(we)-.25 E -.15(ve)-.25 G .8 -.4(r, t).15 H
(he methods illustrated abo).4 E .3 -.15(ve s)-.15 H
(hould be used in all current programs.).15 E F1(Select)97 481.2 Q F0
(pro)3.789 E 1.289(vides a synchronous multiple)-.15 F 1.289
(xing scheme.)-.15 F 1.289
(Asynchronous noti\214cation of output comple-)6.289 F .644
(tion, input a)72 493.2 R -.25(va)-.2 G(ilability).25 E 3.144(,a)-.65 G
.644(nd e)-3.144 F .644(xceptional conditions is possible through use o\
f the SIGIO and SIGURG sig-)-.15 F(nals described in section 5.)72 505.2
Q EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-11)-.45 F/F1 12/Times-Bold@0 SF(3. NETW)188.442 84 Q
(ORK LIBRAR)-.12 E 3(YR)-.42 G(OUTINES)-3.36 E F0 1.384(The discussion \
in section 2 indicated the possible need to locate and construct netw)97
123.6 R 1.384(ork addresses)-.1 F 1.254
(when using the interprocess communication f)72 135.6 R 1.254
(acilities in a distrib)-.1 F 1.254(uted en)-.2 F 3.754(vironment. T)-.4
F 3.754(oa)-.8 G 1.254(id in this task a)-3.754 F .233
(number of routines ha)72 147.6 R .533 -.15(ve b)-.2 H .232
(een added to the standard C run-time library).15 F 5.232(.I)-.65 G
2.732(nt)-5.232 G .232(his section we will consider the)-2.732 F(ne)72
159.6 Q 3.446(wr)-.25 G .946(outines pro)-3.446 F .946
(vided to manipulate netw)-.15 F .947(ork addresses.)-.1 F .947
(While the 4.4BSD netw)5.947 F .947(orking f)-.1 F .947
(acilities support)-.1 F 1.231(the Internet protocols and the Xerox NS \
protocols, most of the routines presented in this section do not)72
171.6 R .674(apply to the NS domain.)72 183.6 R .675(Unless otherwise s\
tated, it should be assumed that the routines presented in this)5.674 F
(section do not apply to the NS domain.)72 195.6 Q .973
(Locating a service on a remote host requires man)97 211.2 R 3.473(yl)
-.15 G -2.15 -.25(ev e)-3.473 H .973
(ls of mapping before client and serv).25 F .973(er may)-.15 F 3.896
(communicate. A)72 223.2 R 1.397(service is assigned a name which is in\
tended for human consumption; e.g. `)3.896 F(`the)-.74 E/F2 10
/Times-Italic@0 SF(lo)3.897 E(gin)-.1 E(server)72 235.2 Q F0 1.057
(on host monet')3.557 F 3.556('. This)-.74 F 1.056
(name, and the name of the peer host, must then be translated into netw)
3.556 F(ork)-.1 E F2(addr)72 247.2 Q(esses)-.37 E F0 .715
(which are not necessarily suitable for human consumption.)3.215 F
(Finally)5.715 E 3.215(,t)-.65 G .715(he address must then used)-3.215 F
.426(in locating a ph)72 259.2 R(ysical)-.05 E F2(location)2.926 E F0
(and)2.926 E F2 -.45(ro)2.926 G(ute).45 E F0 .426(to the service.)2.926
F .425(The speci\214cs of these three mappings are lik)5.426 F .425
(ely to)-.1 F -.25(va)72 271.2 S 1.007(ry between netw).25 F 1.007
(ork architectures.)-.1 F -.15(Fo)6.007 G 3.507(ri).15 G 1.008
(nstance, it is desirable for a netw)-3.507 F 1.008
(ork to not require hosts to be)-.1 F .602(named in such a w)72 283.2 R
.602(ay that their ph)-.1 F .602(ysical location is kno)-.05 F .602
(wn by the client host.)-.25 F .601(Instead, underlying services)5.601 F
.187(in the netw)72 295.2 R .187(ork may disco)-.1 F -.15(ve)-.15 G
2.687(rt).15 G .187(he actual location of the host at the time a client\
 host wishes to communicate.)-2.687 F 1.496(This ability to ha)72 307.2
R 1.796 -.15(ve h)-.2 H 1.495
(osts named in a location independent manner may induce o).15 F -.15(ve)
-.15 G 1.495(rhead in connection).15 F 1.086(establishment, as a disco)
72 319.2 R -.15(ve)-.15 G 1.086(ry process must tak).15 F 3.586(ep)-.1 G
1.086(lace, b)-3.586 F 1.086(ut allo)-.2 F 1.086(ws a host to be ph)-.25
F 1.087(ysically mobile without)-.05 F
(requiring it to notify its clientele of its current location.)72 331.2
Q .153(Standard routines are pro)97 346.8 R .153
(vided for: mapping host names to netw)-.15 F .153(ork addresses, netw)
-.1 F .152(ork names to net-)-.1 F -.1(wo)72 358.8 S .089(rk numbers, p\
rotocol names to protocol numbers, and service names to port numbers an\
d the appropriate).1 F .169
(protocol to use in communicating with the serv)72 370.8 R .169
(er process.)-.15 F .169(The \214le <)5.169 F F2(netdb)A(.h)-.4 E F0
2.669(>m)C .168(ust be included when using)-2.669 F(an)72 382.8 Q 2.5
(yo)-.15 G 2.5(ft)-2.5 G(hese routines.)-2.5 E/F3 10/Times-Bold@0 SF 2.5
(3.1. Host)72 406.8 R(names)2.5 E F0
(An Internet host name to address mapping is represented by the)97 422.4
Q F2(hostent)2.5 E F0(structure:)2.5 E 18.48(struct hostent)108 440.4 R
({)2.5 E 16.29(char *h_name;)151.2 452.4 R(/* of)68.56 E
(\214cial name of host */)-.25 E 16.29(char **h_aliases;)151.2 464.4 R
(/* alias list */)58.56 E 22.94(int h_addrtype;)151.2 476.4 R
(/* host address type \(e.g., AF_INET\) */)60.23 E 22.94(int h_length;)
151.2 488.4 R(/* length of address */)70.22 E 16.29(char **h_addr_list;)
151.2 500.4 R(/* list of addresses, null terminated */)50.22 E(};)108
512.4 Q 11.26(#de\214ne h_addr)108 536.4 R 48.84(h_addr_list[0] /*)8.23
F(\214rst address, netw)2.5 E(ork byte order */)-.1 E .56(The routine)72
554.4 R F2 -.1(ge)3.06 G(thostbyname).1 E F0 .56(\(3N\) tak)B .56
(es an Internet host name and returns a)-.1 F F2(hostent)3.06 E F0 .56
(structure, while the rou-)3.06 F(tine)72 566.4 Q F2 -.1(ge)2.5 G
(thostbyaddr).1 E F0(\(3N\) maps Internet host addresses into a)A F2
(hostent)2.5 E F0(structure.)2.5 E 1.378(The of)97 582 R 1.378(\214cial\
 name of the host and its public aliases are returned by these routines\
, along with the)-.25 F .191(address type \(f)72 594 R .191
(amily\) and a null terminated list of v)-.1 F .191
(ariable length address.)-.25 F .192(This list of addresses is required)
5.191 F .508(because it is possible for a host to ha)72 606 R .808 -.15
(ve m)-.2 H(an).15 E 3.008(ya)-.15 G .508(ddresses, all ha)-3.008 F .508
(ving the same name.)-.2 F(The)5.507 E F2(h_addr)3.007 E F0
(de\214nition)3.007 E .652(is pro)72 618 R .652(vided for backw)-.15 F
.652(ard compatibility)-.1 F 3.152(,a)-.65 G .652(nd is de\214ned to be\
 the \214rst address in the list of addresses in the)-3.152 F F2
(hostent)72 630 Q F0(structure.)2.5 E .633
(The database for these calls is pro)97 645.6 R .633
(vided either by the \214le)-.15 F F2(/etc/hosts)3.133 E F0(\()3.133 E
F2(hosts)A F0 .633(\(5\)\), or by use of a name-)1.666 F(serv)72 657.6 Q
(er)-.15 E(,)-.4 E F2(named)2.748 E F0 2.748(\(8\). Because)1.666 F .248
(of the dif)2.748 F .248(ferences in these databases and their access p\
rotocols, the information)-.25 F 2.43(returned may dif)72 669.6 R(fer)
-.25 E 7.43(.W)-.55 G 2.43(hen using the host table v)-7.43 F 2.43
(ersion of)-.15 F F2 -.1(ge)4.93 G(thostbyname).1 E F0 4.93(,o)C 2.43
(nly one address will be)-4.93 F .241(returned, b)72 681.6 R .241
(ut all listed aliases will be included.)-.2 F .241(The nameserv)5.241 F
.241(er v)-.15 F .242(ersion may return alternate addresses, b)-.15 F
(ut)-.2 E(will not pro)72 693.6 Q(vide an)-.15 E 2.5(ya)-.15 G
(liases other than one gi)-2.5 E -.15(ve)-.25 G 2.5(na).15 G 2.5(sa)-2.5
G -.18(rg)-2.5 G(ument.).18 E(Unlik)97 709.2 Q 2.673(eI)-.1 G .173
(nternet names, NS names are al)-2.673 F -.1(wa)-.1 G .172
(ys mapped into host addresses by the use of a standard NS).1 F F2 2.167
(Clearinghouse service)72 721.2 R F0 4.667(,ad)C(istrib)-4.667 E 2.167
(uted name and authentication serv)-.2 F(er)-.15 E 7.168(.T)-.55 G 2.168
(he algorithms for mapping NS)-7.168 F EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-12 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E .156(names to addresses via a Clearinghouse are r\
ather complicated, and the routines are not part of the standard)72 84 R
3.156(libraries. The)72 96 R(user)3.156 E(-contrib)-.2 E .656(uted Cour\
ier \(Xerox remote procedure call protocol\) compiler contains routines)
-.2 F .089(to accomplish this mapping; see the documentation and e)72
108 R .088(xamples pro)-.15 F .088(vided therein for more information.)
-.15 F(It)5.088 E .491(is e)72 120 R .491(xpected that almost all softw)
-.15 F .492(are that has to communicate using NS will need to use the f)
-.1 F .492(acilities of the)-.1 F(Courier compiler)72 132 Q(.)-.55 E
(An NS host address is represented by the follo)97 147.6 Q(wing:)-.25 E
(union ns_host {)108 165.6 Q 20.29(u_char c_host[6];)133 177.6 R 17.5
(u_short s_host[3];)133 189.6 R(};)108 201.6 Q(union ns_net {)108 225.6
Q 20.29(u_char c_net[4];)133 237.6 R 17.5(u_short s_net[2];)133 249.6 R
(};)108 261.6 Q(struct ns_addr {)108 285.6 Q(union ns_net)133 297.6 Q
(x_net;)23.61 E(union ns_host)133 309.6 Q(x_host;)19.16 E 17.5
(u_short x_port;)133 321.6 R(};)108 333.6 Q(The follo)72 351.6 Q
(wing code fragment inserts a kno)-.25 E(wn NS address into a)-.25 E/F1
10/Times-Italic@0 SF(ns_addr)2.5 E F0(:)A EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-13)-.45 F(#include <sys/types.h>)108 84 Q
(#include <sys/sock)108 96 Q(et.h>)-.1 E(#include <netns/ns.h>)108 108 Q
(...)110.5 120 Q(u_long netnum;)108 132 Q(struct sockaddr_ns dst;)108
144 Q(...)110.5 156 Q(bzero\(\(char *\)&dst, sizeof\(dst\)\);)108 168 Q
(/*)108 192 Q 2.5(*T)110.5 204 S(here is no con)-2.5 E -.15(ve)-.4 G
(nient w).15 E(ay to assign a long)-.1 E 2.5(*i)110.5 216 S(nte)-2.5 E
(ger to a `)-.15 E(`union ns_net')-.74 E 2.5('a)-.74 G 2.5(tp)-2.5 G
(resent; in)-2.5 E 2.5(*t)110.5 228 S
(he future, something will hopefully be pro)-2.5 E(vided,)-.15 E 2.5(*b)
110.5 240 S(ut this is the portable w)-2.7 E(ay to go for no)-.1 E -.65
(w.)-.25 G 2.5(*T)110.5 252 S(he netw)-2.5 E(ork number belo)-.1 E 2.5
(wi)-.25 G 2.5(st)-2.5 G(he one for the NS net)-2.5 E 2.5(*t)110.5 264 S
(hat the desired host \(gyre\) is on.)-2.5 E(*/)110.5 276 Q
(netnum = htonl\(2266\);)108 288 Q(dst.sns_addr)108 300 Q
(.x_net = *\(union ns_net *\) &netnum;)-.55 E(dst.sns_f)108 312 Q
(amily = AF_NS;)-.1 E(/*)108 336 Q 2.5(*h)110.5 348 S
(ost 2.7.1.0.2a.18 == "gyre:Computer Science:UofMaryland")-2.5 E(*/)
110.5 360 Q(dst.sns_addr)108 372 Q(.x_host.c_host[0] = 0x02;)-.55 E
(dst.sns_addr)108 384 Q(.x_host.c_host[1] = 0x07;)-.55 E(dst.sns_addr)
108 396 Q(.x_host.c_host[2] = 0x01;)-.55 E(dst.sns_addr)108 408 Q
(.x_host.c_host[3] = 0x00;)-.55 E(dst.sns_addr)108 420 Q
(.x_host.c_host[4] = 0x2a;)-.55 E(dst.sns_addr)108 432 Q
(.x_host.c_host[5] = 0x18;)-.55 E(dst.sns_addr)108 444 Q
(.x_port = htons\(75\);)-.55 E/F1 10/Times-Bold@0 SF 2.5(3.2. Netw)72
474 R(ork names)-.1 E F0 .526
(As for host names, routines for mapping netw)97 489.6 R .525
(ork names to numbers, and back, are pro)-.1 F 3.025(vided. These)-.15 F
(routines return a)72 501.6 Q/F2 10/Times-Italic@0 SF(netent)2.5 E F0
(structure:)2.5 E(/*)108 519.6 Q 2.5(*A)110.5 531.6 S
(ssumption here is that a netw)-2.5 E(ork number)-.1 E 2.5<2a8c>110.5
543.6 S(ts in 32 bits -- probably a poor one.)-2.5 E(*/)110.5 555.6 Q
11.28(struct netent)108 567.6 R({)2.5 E 34.29(char *n_name;)144 579.6 R
(/* of)50.56 E(\214cial name of net */)-.25 E 34.29(char **n_aliases;)
144 591.6 R(/* alias list */)40.56 E 40.94(int n_addrtype;)144 603.6 R
(/* net address type */)42.23 E 40.94(int n_net;)144 615.6 R(/* netw)65
E(ork number)-.1 E 2.5(,h)-.4 G(ost byte order */)-2.5 E(};)108 627.6 Q
1.251(The routines)72 645.6 R F2 -.1(ge)3.751 G(tnetbyname).1 E F0
(\(3N\),)A F2 -.1(ge)3.751 G(tnetbynumber).1 E F0 1.251(\(3N\), and)B F2
-.1(ge)3.751 G(tnetent).1 E F0 1.251(\(3N\) are the netw)B 1.251
(ork counterparts to)-.1 F(the host routines described abo)72 657.6 Q
-.15(ve)-.15 G 5(.T).15 G(he routines e)-5 E
(xtract their information from)-.15 E F2(/etc/networks)2.5 E F0(.)A .539
(NS netw)97 673.2 R .539
(ork numbers are determined either by asking your local Xerox Netw)-.1 F
.538(ork Administrator \(and)-.1 F .406(hardcoding the information into\
 your code\), or by querying the Clearinghouse for addresses.)72 685.2 R
.407(The internet-)5.407 F -.1(wo)72 697.2 S .721
(rk router is the only process that needs to manipulate netw).1 F .721
(ork numbers on a re)-.1 F .721(gular basis; if a process)-.15 F .433(w\
ishes to communicate with a machine, it should ask the Clearinghouse fo\
r that machine')72 709.2 R 2.934(sa)-.55 G .434(ddress \(which)-2.934 F
(will include the net number\).)72 721.2 Q EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-14 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E/F1 10/Times-Bold@0 SF 2.5(3.3. Pr)72 84 R
(otocol names)-.18 E F0 -.15(Fo)97 99.6 S 3.592(rp).15 G 1.092
(rotocols, which are de\214ned in)-3.592 F/F2 10/Times-Italic@0 SF
(/etc/pr)3.592 E(otocols)-.45 E F0 3.592(,t)C(he)-3.592 E F2(pr)3.592 E
(otoent)-.45 E F0 1.091(structure de\214nes the protocol-name)3.591 F
(mapping used with the routines)72 111.6 Q F2 -.1(ge)2.5 G(tpr).1 E
(otobyname)-.45 E F0(\(3N\),)A F2 -.1(ge)2.5 G(tpr).1 E(otobynumber)-.45
E F0(\(3N\), and)A F2 -.1(ge)2.5 G(tpr).1 E(otoent)-.45 E F0(\(3N\):)A
11.28(struct protoent)108 129.6 R({)2.5 E 34.29(char *p_name;)144 141.6
R(/* of)50.56 E(\214cial protocol name */)-.25 E 34.29
(char **p_aliases;)144 153.6 R(/* alias list */)40.56 E 40.94
(int p_proto;)144 165.6 R(/* protocol number */)56.11 E(};)108 177.6 Q
1.144(In the NS domain, protocols are indicated by the "client type" \
\214eld of a IDP header)97 199.2 R 6.145(.N)-.55 G 3.645(op)-6.145 G
(rotocol)-3.645 E(database e)72 211.2 Q
(xists; see section 5 for more information.)-.15 E F1 2.5(3.4. Ser)72
235.2 R(vice names)-.1 E F0 .084(Information re)97 250.8 R -.05(ga)-.15
G .083(rding services is a bit more complicated.).05 F 2.583(As)5.083 G
.083(ervice is e)-2.583 F .083(xpected to reside at a speci\214c)-.15 F
-.74(``)72 262.8 S(port').74 E 2.797('a)-.74 G .297(nd emplo)-2.797 F
2.797(yap)-.1 G .297(articular communication protocol.)-2.797 F .297
(This vie)5.297 F 2.797(wi)-.25 G 2.797(sc)-2.797 G .297
(onsistent with the Internet domain,)-2.797 F -.2(bu)72 274.8 S 3.314
(ti).2 G .814(nconsistent with other netw)-3.314 F .814
(ork architectures.)-.1 F(Further)5.813 E 3.313(,as)-.4 G .813
(ervice may reside on multiple ports.)-3.313 F .813(If this)5.813 F .684
(occurs, the higher le)72 286.8 R -.15(ve)-.25 G 3.184(ll).15 G .684
(ibrary routines will ha)-3.184 F .984 -.15(ve t)-.2 H 3.184(ob).15 G
3.184(eb)-3.184 G .685(ypassed or e)-3.184 F 3.185(xtended. Services)
-.15 F -.2(av)3.185 G .685(ailable are con-)-.05 F(tained in the \214le)
72 298.8 Q F2(/etc/services)2.5 E F0 5(.A)C
(service mapping is described by the)-2.5 E F2(servent)2.5 E F0
(structure,)2.5 E 11.28(struct serv)108 316.8 R(ent {)-.15 E 34.29
(char *s_name;)144 328.8 R(/* of)51.67 E(\214cial service name */)-.25 E
34.29(char **s_aliases;)144 340.8 R(/* alias list */)41.67 E 40.94
(int s_port;)144 352.8 R(/* port number)62.22 E 2.5(,n)-.4 G(etw)-2.5 E
(ork byte order */)-.1 E 34.29(char *s_proto;)144 364.8 R
(/* protocol to use */)52.22 E(};)108 376.8 Q 1.24(The routine)72 394.8
R F2 -.1(ge)3.74 G(tservbyname).1 E F0 1.24
(\(3N\) maps service names to a serv)B 1.24
(ent structure by specifying a service name)-.15 F(and, optionally)72
406.8 Q 2.5(,aq)-.65 G(ualifying protocol.)-2.5 E(Thus the call)5 E
(sp = getservbyname\("telnet", \(char *\) 0\);)108 424.8 Q
(returns the service speci\214cation for a telnet serv)72 442.8 Q
(er using an)-.15 E 2.5(yp)-.15 G(rotocol, while the call)-2.5 E
(sp = getservbyname\("telnet", "tcp"\);)108 460.8 Q 1.139
(returns only that telnet serv)72 478.8 R 1.139
(er which uses the TCP protocol.)-.15 F 1.14(The routines)6.139 F F2 -.1
(ge)3.64 G(tservbyport).1 E F0 1.14(\(3N\) and)B F2 -.1(ge)3.64 G(tser)
.1 E(-)-.2 E(vent)72 490.8 Q F0 1.494(\(3N\) are also pro)B 3.994
(vided. The)-.15 F F2 -.1(ge)3.994 G(tservbyport).1 E F0 1.494
(routine has an interf)3.994 F 1.494(ace similar to that pro)-.1 F 1.494
(vided by)-.15 F F2 -.1(ge)3.994 G(t-).1 E(servbyname)72 502.8 Q F0 2.5
(;a)C 2.5(no)-2.5 G
(ptional protocol name may be speci\214ed to qualify lookups.)-2.5 E
.099(In the NS domain, services are handled by a central dispatcher pro)
97 518.4 R .1(vided as part of the Courier remote)-.15 F 1.224
(procedure call f)72 530.4 R 3.724(acilities. Ag)-.1 F 1.224(ain, the r\
eader is referred to the Courier compiler documentation and to the)-.05
F(Xerox standard* for further details.)72 542.4 Q F1 2.5
(3.5. Miscellaneous)72 566.4 R F0 -.4(Wi)97 582 S .124
(th the support routines described abo).4 F -.15(ve)-.15 G 2.624(,a).15
G 2.624(nI)-2.624 G .124(nternet application program should rarely ha)
-2.624 F .425 -.15(ve t)-.2 H 2.625(od).15 G(eal)-2.625 E .072
(directly with addresses.)72 594 R .072(This allo)5.072 F .072
(ws services to be de)-.25 F -.15(ve)-.25 G .072
(loped as much as possible in a netw).15 F .071(ork independent)-.1 F
-.1(fa)72 606 S 2.892(shion. It).1 F .392(is clear)2.892 F 2.892(,h)-.4
G -.25(ow)-2.892 G -2.15 -.25(ev e).25 H 1.193 -.4(r, t).25 H .393
(hat pur).4 F .393(ging all netw)-.18 F .393(ork dependencies is v)-.1 F
.393(ery dif)-.15 F 2.893(\214cult. So)-.25 F .393(long as the user is)
2.893 F .978(required to supply netw)72 618 R .978
(ork addresses when naming services and sock)-.1 F .978
(ets there will al)-.1 F -.1(wa)-.1 G .977(ys some netw).1 F(ork)-.1 E
(dependenc)72 630 Q 3.283(yi)-.15 G 3.283(nap)-3.283 G 3.283(rogram. F)
-3.283 F .783(or e)-.15 F .783(xample, the normal code included in clie\
nt programs, such as the remote)-.15 F .07
(login program, is of the form sho)72 642 R .07(wn in Figure 1.)-.25 F
.07(\(This e)5.07 F .07
(xample will be considered in more detail in section)-.15 F(4.\))72 654
Q .244(If we w)97 669.6 R .244(anted to mak)-.1 F 2.744(et)-.1 G .245(h\
e remote login program independent of the Internet protocols and addres\
sing)-2.744 F .681(scheme we w)72 681.6 R .681
(ould be forced to add a layer of routines which mask)-.1 F .68
(ed the netw)-.1 F .68(ork dependent aspects from)-.1 F 1.453
(the mainstream login code.)72 693.6 R -.15(Fo)6.453 G 3.953(rt).15 G
1.453(he current f)-3.953 F 1.453(acilities a)-.1 F -.25(va)-.2 G 1.453
(ilable in the system this does not appear to be).25 F -.1(wo)72 705.6 S
(rthwhile.).1 E .32 LW 144 713.6 72 713.6 DL/F3 8/Times-Roman@0 SF(*)72
725.4 Q/F4 8/Times-Italic@0 SF(Courier: The Remote Pr)2 E(ocedur)-.36 E
2(eC)-.296 G(all Pr)-2 E(otocol)-.36 E F3 2(,X)C(SIS 038112.)-2 E EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-15)-.45 F 1.342
(Aside from the address-related data base routines, there are se)97 84 R
-.15(ve)-.25 G 1.342(ral other routines a).15 F -.25(va)-.2 G 1.342
(ilable in the).25 F 1.71
(run-time library which are of interest to users.)72 96 R 1.711
(These are intended mostly to simplify manipulation of)6.711 F 1.056
(names and addresses.)72 108 R -.8(Ta)6.056 G 1.056
(ble 1 summarizes the routines for manipulating v).8 F 1.055
(ariable length byte strings and)-.25 F(handling byte sw)72 120 Q
(apping of netw)-.1 E(ork addresses and v)-.1 E(alues.)-.25 E .4 LW
442.885 136.5 133.115 136.5 DL 59.61(Call Synopsis)138.115 146 R 442.885
150.5 133.115 150.5 DL(bcmp\(s1, s2, n\))138.115 160 Q
(compare byte-strings; 0 if same, not 0 otherwise)17.12 E(bcop)138.115
172 Q(y\(s1, s2, n\))-.1 E(cop)15 E 2.5(ynb)-.1 G(ytes from s1 to s2)
-2.5 E(bzero\(base, n\))138.115 184 Q
(zero-\214ll n bytes starting at base)22.14 E(htonl\(v)138.115 196 Q
37.09(al\) con)-.25 F -.15(ve)-.4 G
(rt 32-bit quantity from host to netw).15 E(ork byte order)-.1 E
(htons\(v)138.115 208 Q 35.98(al\) con)-.25 F -.15(ve)-.4 G
(rt 16-bit quantity from host to netw).15 E(ork byte order)-.1 E
(ntohl\(v)138.115 220 Q 37.09(al\) con)-.25 F -.15(ve)-.4 G
(rt 32-bit quantity from netw).15 E(ork to host byte order)-.1 E
(ntohs\(v)138.115 232 Q 35.98(al\) con)-.25 F -.15(ve)-.4 G
(rt 16-bit quantity from netw).15 E(ork to host byte order)-.1 E 442.885
236.5 133.115 236.5 DL 209.395 136.5 209.395 236.5 DL 442.885 136.5
442.885 236.5 DL 133.115 136.5 133.115 236.5 DL -.8(Ta)229.1 256 S
(ble 1.).8 E 2.5(Cr)5 G(un-time routines.)-2.5 E .653(The byte sw)97
271.6 R .653(apping routines are pro)-.1 F .654
(vided because the operating system e)-.15 F .654
(xpects addresses to be sup-)-.15 F .985(plied in netw)72 283.6 R .985
(ork order \(aka `)-.1 F(`big-endian')-.74 E 3.485('o)-.74 G 3.485
(rder\). On)-3.485 F -.74(``)3.485 G(little-endian').74 E 3.485('a)-.74
G .985(rchitectures, such as Intel x86 and)-3.485 F -1.35(VA)72 295.6 S
.959(X, host byte ordering is dif)1.35 F .959(ferent than netw)-.25 F
.959(ork byte ordering.)-.1 F(Consequently)5.959 E 3.46(,p)-.65 G .96
(rograms are sometimes)-3.46 F .292(required to byte sw)72 307.6 R .292
(ap quantities.)-.1 F .291(The library routines which return netw)5.292
F .291(ork addresses pro)-.1 F .291(vide them in net-)-.15 F -.1(wo)72
319.6 S .073(rk order so that the).1 F 2.573(ym)-.15 G .073
(ay simply be copied into the structures pro)-2.573 F .074
(vided to the system.)-.15 F .074(This implies users)5.074 F .11
(should encounter the byte sw)72 331.6 R .11(apping problem only when)
-.1 F/F1 10/Times-Italic@0 SF(interpr)2.61 E(eting)-.37 E F0(netw)2.61 E
.11(ork addresses.)-.1 F -.15(Fo)5.11 G 2.61(re).15 G .11(xample, if an)
-2.76 F(Internet port is to be printed out the follo)72 343.6 Q
(wing code w)-.25 E(ould be required:)-.1 E
(printf\("port number %d\\n", ntohs\(sp->s_port\)\);)108 361.6 Q(On mac\
hines where unneeded these routines are de\214ned as null macros.)72
379.6 Q EP
%%Page: 16 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-16 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E(#include <sys/types.h>)108 84 Q
(#include <sys/sock)108 96 Q(et.h>)-.1 E(#include <netinet/in.h>)108 108
Q(#include <stdio.h>)108 120 Q(#include <netdb)108 132 Q(.h>)-.4 E(...)
110.5 144 Q(main\(ar)108 156 Q(gc, ar)-.18 E(gv\))-.18 E(int ar)144 168
Q(gc;)-.18 E(char *ar)144 180 Q(gv[];)-.18 E({)108 192 Q
(struct sockaddr_in serv)144 204 Q(er;)-.15 E(struct serv)144 216 Q
(ent *sp;)-.15 E(struct hostent *hp;)144 228 Q(int s;)144 240 Q(...)144
252 Q(sp = getservbyname\("login", "tcp"\);)144 264 Q
(if \(sp == NULL\) {)144 276 Q(fprintf\(stderr)180 288 Q 2.5(,")-.4 G
(rlogin: tcp/login: unkno)-2.5 E(wn service\\n"\);)-.25 E -.15(ex)180
300 S(it\(1\);).15 E(})144 312 Q(hp = gethostbyname\(ar)144 324 Q
(gv[1]\);)-.18 E(if \(hp == NULL\) {)144 336 Q(fprintf\(stderr)180 348 Q
2.5(,")-.4 G(rlogin: %s: unkno)-2.5 E(wn host\\n", ar)-.25 E(gv[1]\);)
-.18 E -.15(ex)180 360 S(it\(2\);).15 E(})144 372 Q
(bzero\(\(char *\)&serv)144 384 Q(er)-.15 E 2.5(,s)-.4 G(izeof \(serv)
-2.5 E(er\)\);)-.15 E(bcop)144 396 Q(y\(hp->h_addr)-.1 E 2.5(,\()-.4 G
(char *\)&serv)-2.5 E(er)-.15 E(.sin_addr)-.55 E 2.5(,h)-.4 G
(p->h_length\);)-2.5 E(serv)144 408 Q(er)-.15 E(.sin_f)-.55 E
(amily = hp->h_addrtype;)-.1 E(serv)144 420 Q(er)-.15 E
(.sin_port = sp->s_port;)-.55 E 2.5(s=s)144 432 S(ock)-2.5 E
(et\(AF_INET)-.1 E 2.5(,S)-.74 G(OCK_STREAM, 0\);)-2.5 E(if \(s < 0\) {)
144 444 Q(perror\("rlogin: sock)180 456 Q(et"\);)-.1 E -.15(ex)180 468 S
(it\(3\);).15 E(})144 480 Q(...)144 492 Q
(/* Connect does the bind\(\) for us */)144 504 Q
(if \(connect\(s, \(char *\)&serv)144 528 Q(er)-.15 E 2.5(,s)-.4 G
(izeof \(serv)-2.5 E(er\)\) < 0\) {)-.15 E(perror\("rlogin: connect"\);)
180 540 Q -.15(ex)180 552 S(it\(5\);).15 E(})144 564 Q(...)144 576 Q(})
108 588 Q(Figure 1.)216.06 606 Q(Remote login client code.)5 E EP
%%Page: 17 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-17)-.45 F/F1 12/Times-Bold@0 SF(4. CLIENT/SER)209.154 84
Q(VER MODEL)-.66 E F0 2.665
(The most commonly used paradigm in constructing distrib)97 123.6 R
2.666(uted applications is the client/serv)-.2 F(er)-.15 E 2.741
(model. In)72 135.6 R .241
(this scheme client applications request services from a serv)2.741 F
.24(er process.)-.15 F .24(This implies an asymme-)5.24 F .425
(try in establishing communication between the client and serv)72 147.6
R .426(er which has been e)-.15 F .426(xamined in section 2.)-.15 F(In)
5.426 E .742(this section we will look more closely at the interactions\
 between client and serv)72 159.6 R(er)-.15 E 3.242(,a)-.4 G .742
(nd consider some of)-3.242 F(the problems in de)72 171.6 Q -.15(ve)-.25
G(loping client and serv).15 E(er applications.)-.15 E .816
(The client and serv)97 187.2 R .817(er require a well kno)-.15 F .817
(wn set of con)-.25 F -.15(ve)-.4 G .817
(ntions before service may be rendered \(and).15 F 2.703
(accepted\). This)72 199.2 R .203(set of con)2.703 F -.15(ve)-.4 G .203
(ntions comprises a protocol which must be implemented at both ends of \
a con-).15 F 2.71(nection. Depending)72 211.2 R .211
(on the situation, the protocol may be symmetric or asymmetric.)2.71 F
.211(In a symmetric proto-)5.211 F .042
(col, either side may play the master or sla)72 223.2 R .342 -.15(ve r)
-.2 H 2.542(oles. In).15 F .041
(an asymmetric protocol, one side is immutably recog-)2.542 F .097
(nized as the master)72 235.2 R 2.598(,w)-.4 G .098
(ith the other as the sla)-2.598 F -.15(ve)-.2 G 5.098(.A).15 G 2.598
(ne)-5.098 G .098(xample of a symmetric protocol is the TELNET proto-)
-2.748 F .323(col used in the Internet for remote terminal emulation.)72
247.2 R .322(An e)5.322 F .322
(xample of an asymmetric protocol is the Inter)-.15 F(-)-.2 E .447
(net \214le transfer protocol, FTP)72 259.2 R 5.447(.N)-1.11 G 2.947(om)
-5.447 G .448(atter whether the speci\214c protocol used in obtaining a\
 service is sym-)-2.947 F 1.125
(metric or asymmetric, when accessing a service there is a `)72 271.2 R
1.125(`client process')-.74 F 3.625('a)-.74 G 1.125(nd a `)-3.625 F
(`serv)-.74 E 1.125(er process')-.15 F 3.625('. W)-.74 F(e)-.8 E
(will \214rst consider the properties of serv)72 283.2 Q
(er processes, then client processes.)-.15 E 3.515(As)97 298.8 S(erv)
-3.515 E 1.015(er process normally listens at a well kno)-.15 F 1.016
(wn address for service requests.)-.25 F 1.016(That is, the serv)6.016 F
(er)-.15 E .139
(process remains dormant until a connection is requested by a client')72
310.8 R 2.639(sc)-.55 G .138(onnection to the serv)-2.639 F(er')-.15 E
2.638(sa)-.55 G 2.638(ddress. At)-2.638 F .142(such a time the serv)72
322.8 R .142(er process `)-.15 F(`w)-.74 E(ak)-.1 E .142(es up')-.1 F
2.642('a)-.74 G .142(nd services the client, performing whate)-2.642 F
-.15(ve)-.25 G 2.642(ra).15 G .142(ppropriate actions)-2.642 F
(the client requests of it.)72 334.8 Q(Alternati)97 350.4 Q .823 -.15
(ve s)-.25 H .523(chemes which use a service serv).15 F .522
(er may be used to eliminate a \215ock of serv)-.15 F .522(er processes)
-.15 F 2.062
(clogging the system while remaining dormant most of the time.)72 362.4
R -.15(Fo)7.062 G 4.562(rI).15 G 2.062(nternet serv)-4.562 F 2.062
(ers in 4.4BSD, this)-.15 F .565(scheme has been implemented via)72
374.4 R/F2 10/Times-Italic@0 SF(inetd)3.065 E F0 3.065(,t)C .565
(he so called `)-3.065 F .565(`internet super)-.74 F(-serv)-.2 E(er)-.15
E -.7(.')-.55 G(')-.04 E F2(Inetd)5.565 E F0 .565(listens at a v)3.065 F
.565(ariety of)-.25 F .775
(ports, determined at start-up by reading a con\214guration \214le.)72
386.4 R .776(When a connection is requested to a port on)5.775 F(which)
72 398.4 Q F2(inetd)4.398 E F0 1.898(is listening,)4.398 F F2(inetd)
4.398 E F0 -.15(exe)4.398 G 1.897(cutes the appropriate serv).15 F 1.897
(er program to handle the client.)-.15 F -.4(Wi)6.897 G 1.897(th this).4
F .211(method, clients are una)72 410.4 R -.1(wa)-.15 G .212
(re that an intermediary such as).1 F F2(inetd)2.712 E F0 .212
(has played an)2.712 F 2.712(yp)-.15 G .212(art in the connection.)
-2.712 F F2(Inetd)5.212 E F0
(will be described in more detail in section 5.)72 422.4 Q 3.369(As)97
438 S .869(imilar alternati)-3.369 F 1.169 -.15(ve s)-.25 H .869
(cheme is used by most Xerox services.).15 F .868
(In general, the Courier dispatch pro-)5.869 F .862(cess \(if used\) ac\
cepts connections from processes requesting services of some sort or an\
other)72 450 R 5.862(.T)-.55 G .862(he client)-5.862 F 1.483
(processes request a particular <program number)72 462 R 3.982(,v)-.4 G
1.482(ersion number)-4.132 F 3.982(,p)-.4 G 1.482
(rocedure number> triple.)-3.982 F 1.482(If the dis-)6.482 F .216
(patcher kno)72 474 R .217(ws of such a program, it is started to handl\
e the request; if not, an error is reported to the client.)-.25 F 1.094
(In this w)72 486 R(ay)-.1 E 3.594(,o)-.65 G 1.093
(nly one port is required to service a lar)-3.594 F 1.093(ge v)-.18 F
1.093(ariety of dif)-.25 F 1.093(ferent requests.)-.25 F(Ag)6.093 E
1.093(ain, the Courier)-.05 F -.1(fa)72 498 S .97(cilities are not a).1
F -.25(va)-.2 G .97
(ilable without the use and installation of the Courier compiler).25 F
5.97(.T)-.55 G .97(he information pre-)-5.97 F(sented in this section a\
pplies only to NS clients and services that do not use Courier)72 510 Q
(.)-.55 E/F3 10/Times-Bold@0 SF 2.5(4.1. Ser)72 534 R -.1(ve)-.1 G(rs).1
E F0 .398(In 4.4BSD most serv)97 549.6 R .398
(ers are accessed at well kno)-.15 F .398
(wn Internet addresses or UNIX domain names.)-.25 F -.15(Fo)5.398 G(r)
.15 E -.15(ex)72 561.6 S(ample, the remote login serv).15 E(er')-.15 E
2.5(sm)-.55 G(ain loop is of the form sho)-2.5 E(wn in Figure 2.)-.25 E
(The \214rst step tak)97 577.2 Q(en by the serv)-.1 E
(er is look up its service de\214nition:)-.15 E
(sp = getservbyname\("login", "tcp"\);)122 601.2 Q(if \(sp == NULL\) {)
122 613.2 Q(fprintf\(stderr)158 625.2 Q 2.5(,")-.4 G
(rlogind: tcp/login: unkno)-2.5 E(wn service\\n"\);)-.25 E -.15(ex)158
637.2 S(it\(1\);).15 E(})122 649.2 Q .164(The result of the)72 673.2 R
F2 -.1(ge)2.664 G(tservbyname).1 E F0 .165(call is used in later portio\
ns of the code to de\214ne the Internet port at which)2.664 F
(it listens for service requests \(indicated by a connection\).)72 685.2
Q EP
%%Page: 18 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-18 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E(main\(ar)108 126 Q(gc, ar)-.18 E(gv\))-.18 E
(int ar)133 138 Q(gc;)-.18 E(char *ar)133 150 Q(gv[];)-.18 E({)108 162 Q
(int f;)133 174 Q(struct sockaddr_in from;)133 186 Q(struct serv)133 198
Q(ent *sp;)-.15 E(sp = getservbyname\("login", "tcp"\);)133 222 Q
(if \(sp == NULL\) {)133 234 Q(fprintf\(stderr)158 246 Q 2.5(,")-.4 G
(rlogind: tcp/login: unkno)-2.5 E(wn service\\n"\);)-.25 E -.15(ex)158
258 S(it\(1\);).15 E(})133 270 Q(...)133 282 Q(#ifndef DEB)108 294 Q(UG)
-.1 E(/* Disassociate serv)133 306 Q(er from controlling terminal */)
-.15 E(...)133 318 Q(#endif)108 330 Q(sin.sin_port = sp->s_port;)133 354
Q(/* Restricted port -- see section 5 */)21.77 E(...)133 366 Q 2.5(f=s)
133 378 S(ock)-2.5 E(et\(AF_INET)-.1 E 2.5(,S)-.74 G(OCK_STREAM, 0\);)
-2.5 E(...)133 390 Q
(if \(bind\(f, \(struct sockaddr *\) &sin, sizeof \(sin\)\) < 0\) {)133
402 Q(...)158 414 Q(})133 426 Q(...)133 438 Q(listen\(f, 5\);)133 450 Q
(for \(;;\) {)133 462 Q(int g, len = sizeof \(from\);)158 474 Q 2.5(g=a)
158 498 S(ccept\(f, \(struct sockaddr *\) &from, &len\);)-2.5 E
(if \(g < 0\) {)158 510 Q(if \(errno != EINTR\))183 522 Q
(syslog\(LOG_ERR, "rlogind: accept: %m"\);)208 534 Q(continue;)183 546 Q
(})158 558 Q(if \(fork\(\) == 0\) {)158 570 Q(close\(f\);)183 582 Q
(doit\(g, &from\);)183 594 Q(})158 606 Q(close\(g\);)158 618 Q(})133 630
Q(})108 642 Q(Figure 2.)225.995 660 Q(Remote login serv)5 E(er)-.15 E(.)
-.55 E EP
%%Page: 19 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-19)-.45 F(Step tw)97 84 Q 2.5(oi)-.1 G 2.5(st)-2.5 G 2.5
(od)-2.5 G(isassociate the serv)-2.5 E
(er from the controlling terminal of its in)-.15 E -.2(vo)-.4 G -.1(ke)
.2 G(r:).1 E(for \(i = 0; i < 3; ++i\))133 102 Q(close\(i\);)158 114 Q
(open\("/", O_RDONL)133 138 Q(Y\);)-1 E(dup2\(0, 1\);)133 150 Q
(dup2\(0, 2\);)133 162 Q 2.5(i=o)133 186 S(pen\("/de)-2.5 E
(v/tty", O_RD)-.25 E(WR\);)-.3 E(if \(i >= 0\) {)133 198 Q
(ioctl\(i, TIOCNO)158 210 Q(TTY)-.4 E 2.5(,0)-1.29 G(\);)-2.5 E
(close\(i\);)158 222 Q(})133 234 Q .388
(This step is important as the serv)72 252 R .388(er will lik)-.15 F
.388(ely not w)-.1 F .388(ant to recei)-.1 F .688 -.15(ve s)-.25 H .388
(ignals deli).15 F -.15(ve)-.25 G .388(red to the process group of).15 F
1.107(the controlling terminal.)72 264 R 1.107(Note, ho)6.107 F(we)-.25
E -.15(ve)-.25 G 1.907 -.4(r, t).15 H 1.107(hat once a serv).4 F 1.108
(er has disassociated itself it can no longer send)-.15 F
(reports of errors to a terminal, and must log errors via)72 276 Q/F1 10
/Times-Italic@0 SF(syslo)2.5 E(g)-.1 E F0(.)A .305(Once a serv)97 291.6
R .305(er has established a pristine en)-.15 F .305
(vironment, it creates a sock)-.4 F .304(et and be)-.1 F .304
(gins accepting service)-.15 F 3.248(requests. The)72 303.6 R F1(bind)
3.248 E F0 .748(call is required to insure the serv)3.248 F .748
(er listens at its e)-.15 F .749(xpected location.)-.15 F .749
(It should be noted)5.749 F .559(that the remote login serv)72 315.6 R
.559(er listens at a restricted port number)-.15 F 3.058(,a)-.4 G .558
(nd must therefore be run with a user)-3.058 F .558(-id of)-.2 F 2.5
(root. This)72 327.6 R(concept of a `)2.5 E(`restricted port number')
-.74 E 2.5('i)-.74 G 2.5(s4)-2.5 G(BSD speci\214c, and is co)-2.5 E -.15
(ve)-.15 G(red in section 5.).15 E(The main body of the loop is f)97
343.2 Q(airly simple:)-.1 E(for \(;;\) {)108 361.2 Q
(int g, len = sizeof \(from\);)144 373.2 Q 2.5(g=a)144 397.2 S
(ccept\(f, \(struct sockaddr *\)&from, &len\);)-2.5 E(if \(g < 0\) {)144
409.2 Q(if \(errno != EINTR\))180 421.2 Q
(syslog\(LOG_ERR, "rlogind: accept: %m"\);)216 433.2 Q(continue;)180
445.2 Q(})144 457.2 Q(if \(fork\(\) == 0\) {)144 469.2 Q(/* Child */)
4.83 E(close\(f\);)180 481.2 Q(doit\(g, &from\);)180 493.2 Q(})144 505.2
Q 34.51(close\(g\); /*)144 517.2 R -.15(Pa)2.5 G(rent */).15 E(})108
529.2 Q(An)72 547.2 Q F1(accept)2.93 E F0 .43(call blocks the serv)2.93
F .43(er until a client requests service.)-.15 F .43
(This call could return a f)5.43 F .43(ailure status if the)-.1 F .33(c\
all is interrupted by a signal such as SIGCHLD \(to be discussed in sec\
tion 5\).)72 559.2 R .33(Therefore, the return v)5.33 F(alue)-.25 E
(from)72 571.2 Q F1(accept)3.217 E F0 .717(is check)3.217 F .718(ed to \
insure a connection has actually been established, and an error report \
is logged)-.1 F(via)72 583.2 Q F1(syslo)2.5 E(g)-.1 E F0
(if an error has occurred.)2.5 E -.4(Wi)97 598.8 S 1.003
(th a connection in hand, the serv).4 F 1.002
(er then forks a child process and in)-.15 F -.2(vo)-.4 G -.1(ke).2 G
3.502(st).1 G 1.002(he main body of the)-3.502 F .328
(remote login protocol processing.)72 610.8 R .328(Note ho)5.328 F 2.828
(wt)-.25 G .328(he sock)-2.828 F .328
(et used by the parent for queuing connection requests)-.1 F .316
(is closed in the child, while the sock)72 622.8 R .316
(et created as a result of the)-.1 F F1(accept)2.816 E F0 .315
(is closed in the parent.)2.816 F .315(The address)5.315 F
(of the client is also handed the)72 634.8 Q F1(doit)2.5 E F0
(routine because it requires it in authenticating clients.)2.5 E/F2 10
/Times-Bold@0 SF 2.5(4.2. Clients)72 658.8 R F0 .521
(The client side of the remote login service w)97 674.4 R .522(as sho)
-.1 F .522(wn earlier in Figure 1.)-.25 F .522
(One can see the separate,)5.522 F .978
(asymmetric roles of the client and serv)72 686.4 R .978
(er clearly in the code.)-.15 F .978(The serv)5.978 F .978
(er is a passi)-.15 F 1.277 -.15(ve e)-.25 H(ntity).15 E 3.477(,l)-.65 G
.977(istening for)-3.477 F
(client connections, while the client process is an acti)72 698.4 Q .3
-.15(ve e)-.25 H(ntity).15 E 2.5(,i)-.65 G
(nitiating a connection when in)-2.5 E -.2(vo)-.4 G -.1(ke).2 G(d.).1 E
.19(Let us consider more closely the steps tak)97 714 R .191
(en by the client remote login process.)-.1 F .191(As in the serv)5.191
F .191(er pro-)-.15 F(cess, the \214rst step is to locate the service d\
e\214nition for a remote login:)72 726 Q EP
%%Page: 20 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-20 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E(sp = getservbyname\("login", "tcp"\);)108 84 Q
(if \(sp == NULL\) {)108 96 Q(fprintf\(stderr)133 108 Q 2.5(,")-.4 G
(rlogin: tcp/login: unkno)-2.5 E(wn service\\n"\);)-.25 E -.15(ex)133
120 S(it\(1\);).15 E(})108 132 Q(Ne)72 150 Q
(xt the destination host is look)-.15 E(ed up with a)-.1 E/F1 10
/Times-Italic@0 SF -.1(ge)2.5 G(thostbyname).1 E F0(call:)2.5 E
(hp = gethostbyname\(ar)108 168 Q(gv[1]\);)-.18 E(if \(hp == NULL\) {)
108 180 Q(fprintf\(stderr)133 192 Q 2.5(,")-.4 G(rlogin: %s: unkno)-2.5
E(wn host\\n", ar)-.25 E(gv[1]\);)-.18 E -.15(ex)133 204 S(it\(2\);).15
E(})108 216 Q -.4(Wi)72 234 S .777(th this accomplished, all that is re\
quired is to establish a connection to the serv).4 F .777
(er at the requested host)-.15 F .125
(and start up the remote login protocol.)72 246 R .125(The address b)
5.125 F(uf)-.2 E .125
(fer is cleared, then \214lled in with the Internet address)-.25 F(of t\
he foreign host and the port number at which the login process resides \
on the foreign host:)72 258 Q(bzero\(\(char *\)&serv)108 276 Q(er)-.15 E
2.5(,s)-.4 G(izeof \(serv)-2.5 E(er\)\);)-.15 E(bcop)108 288 Q
(y\(hp->h_addr)-.1 E 2.5(,\()-.4 G(char *\) &serv)-2.5 E(er)-.15 E
(.sin_addr)-.55 E 2.5(,h)-.4 G(p->h_length\);)-2.5 E(serv)108 300 Q(er)
-.15 E(.sin_f)-.55 E(amily = hp->h_addrtype;)-.1 E(serv)108 312 Q(er)
-.15 E(.sin_port = sp->s_port;)-.55 E 2.775(As)72 330 S(ock)-2.775 E
.275(et is created, and a connection initiated.)-.1 F .274(Note that)
5.275 F F1(connect)2.774 E F0 .274(implicitly performs a)2.774 F F1
(bind)2.774 E F0 .274(call, since)2.774 F F1(s)2.774 E F0(is)2.774 E
(unbound.)72 342 Q 2.5(s=s)108 360 S(ock)-2.5 E
(et\(hp->h_addrtype, SOCK_STREAM, 0\);)-.1 E(if \(s < 0\) {)108 372 Q
(perror\("rlogin: sock)133 384 Q(et"\);)-.1 E -.15(ex)133 396 S
(it\(3\);).15 E(})108 408 Q(...)110.5 420 Q
(if \(connect\(s, \(struct sockaddr *\) &serv)108 432 Q(er)-.15 E 2.5
(,s)-.4 G(izeof \(serv)-2.5 E(er\)\) < 0\) {)-.15 E
(perror\("rlogin: connect"\);)133 444 Q -.15(ex)133 456 S(it\(4\);).15 E
(})108 468 Q
(The details of the remote login protocol will not be considered here.)
72 486 Q/F2 10/Times-Bold@0 SF 2.5(4.3. Connectionless)72 510 R(ser)2.5
E -.1(ve)-.1 G(rs).1 E F0 .252(While connection-based services are the \
norm, some services are based on the use of datagram sock-)97 525.6 R
3.243(ets. One,)72 537.6 R .743(in particular)3.243 F 3.243(,i)-.4 G
3.243(st)-3.243 G .743(he `)-3.243 F(`rwho')-.74 E 3.243('s)-.74 G .743
(ervice which pro)-3.243 F .742
(vides users with status information for hosts con-)-.15 F .284
(nected to a local area netw)72 549.6 R 2.785(ork. This)-.1 F .285
(service, while predicated on the ability to)2.785 F F1(br)2.785 E
(oadcast)-.45 E F0 .285(information to all)2.785 F
(hosts connected to a particular netw)72 561.6 Q
(ork, is of interest as an e)-.1 E(xample usage of datagram sock)-.15 E
(ets.)-.1 E 2.698(Au)97 577.2 S .198(ser on an)-2.698 F 2.698(ym)-.15 G
.198(achine running the rwho serv)-2.698 F .198
(er may \214nd out the current status of a machine with the)-.15 F F1
(ruptime)72 589.2 Q F0(\(1\) program.)A
(The output generated is illustrated in Figure 3.)5 E .219(Status infor\
mation for each host is periodically broadcast by rwho serv)97 604.8 R
.22(er processes on each machine.)-.15 F .042(The same serv)72 616.8 R
.041(er process also recei)-.15 F -.15(ve)-.25 G 2.541(st).15 G .041
(he status information and uses it to update a database.)-2.541 F .041
(This database)5.041 F .344
(is then interpreted to generate the status information for each host.)
72 628.8 R(Serv)5.345 E .345(ers operate autonomously)-.15 F 2.845(,c)
-.65 G(oupled)-2.845 E(only by the local netw)72 640.8 Q
(ork and its broadcast capabilities.)-.1 E .274
(Note that the use of broadcast for such a task is f)97 656.4 R .274
(airly inef)-.1 F .273(\214cient, as all hosts must process each mes-)
-.25 F .43(sage, whether or not using an rwho serv)72 668.4 R(er)-.15 E
5.431(.U)-.55 G .431(nless such a service is suf)-5.431 F .431
(\214ciently uni)-.25 F -.15(ve)-.25 G .431(rsal and is frequently).15 F
(used, the e)72 680.4 Q
(xpense of periodic broadcasts outweighs the simplicity)-.15 E(.)-.65 E
1.156(Multicasting is an alternati)97 696 R 1.456 -.15(ve t)-.25 H 3.656
(ob).15 G 3.655(roadcasting. Setting)-3.656 F 1.155(up multicast sock)
3.655 F 1.155(ets is described in Section)-.1 F(5.10.)72 708 Q EP
%%Page: 21 21
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-21)-.45 F 37.26(arpa up)142.67 96 R 33.14(9:45, 5)15 F
(users, load)2.5 E 12.5(1.15, 1.39, 1.31)15 F 40.59(cad up)142.67 108 R
17.5(2+12:04, 8)15 F(users, load)2.5 E 12.5(4.67, 5.13, 4.59)15 F 30.04
(calder up)142.67 120 R 28.14(10:10, 0)15 F(users, load)2.5 E 12.5
(0.27, 0.15, 0.14)15 F 39.47(dali up)142.67 132 R 17.5(2+06:28, 9)15 F
(users, load)2.5 E 12.5(1.04, 1.20, 1.65)15 F(de)142.67 144 Q -.05(ga)
-.15 G 34.4(su).05 G 15(p2)-34.4 G 12.5(5+09:48, 0)-15 F(users, load)2.5
E 12.5(1.49, 1.43, 1.41)15 F 42.26(ear up)142.67 156 R 17.5(5+00:05, 0)
15 F(users, load)2.5 E 12.5(1.51, 1.54, 1.56)15 F 22.51(ernie do)142.67
168 R 12.5(wn 0:24)-.25 F(esv)142.67 180 Q 19.98(ax do)-.25 F 12.5
(wn 17:04)-.25 F 18.06(ingres do)142.67 192 R 12.5(wn 0:26)-.25 F 38.91
(kim up)142.67 204 R 17.5(3+09:16, 8)15 F(users, load)2.5 E 12.5
(2.03, 2.46, 3.11)15 F 24.47(matisse up)142.67 216 R 17.5(3+06:18, 0)15
F(users, load)2.5 E 12.5(0.03, 0.03, 0.05)15 F 28.37(medea up)142.67 228
R 17.5(3+09:39, 2)15 F(users, load)2.5 E 12.5(0.35, 0.37, 0.50)15 F
16.39(merlin do)142.67 240 R 12.5(wn 19+15:37)-.25 F 35.58(miro up)
142.67 252 R 17.5(1+07:20, 7)15 F(users, load)2.5 E 12.5
(4.59, 3.28, 2.12)15 F 29.47(monet up)142.67 264 R 17.5(1+00:43, 2)15 F
(users, load)2.5 E 12.5(0.22, 0.09, 0.07)15 F 33.06(oz do)142.67 276 R
12.5(wn 16:09)-.25 F(statv)142.67 288 Q 26.39(ax up)-.25 F 17.5
(2+15:57, 3)15 F(users, load)2.5 E 12.5(1.52, 1.81, 1.86)15 F(ucb)142.67
300 Q -.25(va)-.15 G 28.49(xu).25 G 15(p9)-28.49 G 33.14(:34, 2)-15 F
(users, load)2.5 E 12.5(6.08, 5.16, 3.28)15 F(Figure 3. ruptime output.)
237.86 324 Q 1.495(The rwho serv)97 348 R(er)-.15 E 3.996(,i)-.4 G 3.996
(nas)-3.996 G 1.496(impli\214ed form, is pictured in Figure 4.)-3.996 F
1.496(There are tw)6.496 F 3.996(os)-.1 G 1.496(eparate tasks per)-3.996
F(-)-.2 E .326(formed by the serv)72 360 R(er)-.15 E 5.326(.T)-.55 G
.326(he \214rst task is to act as a recei)-5.326 F -.15(ve)-.25 G 2.825
(ro).15 G 2.825(fs)-2.825 G .325
(tatus information broadcast by other hosts on)-2.825 F .252(the netw)72
372 R 2.752(ork. This)-.1 F .252
(job is carried out in the main loop of the program.)2.752 F -.15(Pa)
5.253 G(ck).15 E .253(ets recei)-.1 F -.15(ve)-.25 G 2.753(da).15 G
2.753(tt)-2.753 G .253(he rwho port are)-2.753 F(interrog)72 384 Q .836
(ated to insure the)-.05 F(y')-.15 E 1.136 -.15(ve b)-.5 H .836
(een sent by another rwho serv).15 F .835
(er process, then are time stamped with their)-.15 F(arri)72 396 Q -.25
(va)-.25 G 2.635(lt).25 G .135
(ime and used to update a \214le indicating the status of the host.)
-2.635 F .136(When a host has not been heard from)5.135 F .936(for an e)
72 408 R .936(xtended period of time, the database interpretation routi\
nes assume the host is do)-.15 F .935(wn and indicate)-.25 F .13
(such on the status reports.)72 420 R .13
(This algorithm is prone to error as a serv)5.13 F .131(er may be do)
-.15 F .131(wn while a host is actually)-.25 F(up, b)72 432 Q(ut serv)
-.2 E(es our current needs.)-.15 E 1.313
(The second task performed by the serv)97 447.6 R 1.313
(er is to supply information re)-.15 F -.05(ga)-.15 G 1.313
(rding the status of its host.).05 F .1(This in)72 459.6 R -.2(vo)-.4 G
(lv).2 E .101(es periodically acquiring system status information, pack\
aging it up in a message and broadcast-)-.15 F .533
(ing it on the local netw)72 471.6 R .533(ork for other rwho serv)-.1 F
.533(ers to hear)-.15 F 5.532(.T)-.55 G .532
(he supply function is triggered by a timer and)-5.532 F .625(runs of)72
483.6 R 3.125(fas)-.25 G 3.125(ignal. Locating)-3.125 F .626
(the system status information is some)3.126 F .626(what in)-.25 F -.2
(vo)-.4 G(lv).2 E .626(ed, b)-.15 F .626(ut uninteresting.)-.2 F(Decid-)
5.626 E(ing where to transmit the resultant pack)72 495.6 Q(et is some)
-.1 E(what problematical, ho)-.25 E(we)-.25 E -.15(ve)-.25 G -.55(r.).15
G .77(Status information must be broadcast on the local netw)97 511.2 R
3.27(ork. F)-.1 F .77(or netw)-.15 F .77(orks which do not support the)
-.1 F .302(notion of broadcast another scheme must be used to simulate \
or replace broadcasting.)72 523.2 R .302(One possibility is to)5.302 F
1.219(enumerate the kno)72 535.2 R 1.219
(wn neighbors \(based on the status messages recei)-.25 F -.15(ve)-.25 G
3.718(df).15 G 1.218(rom other rwho serv)-3.718 F 3.718(ers\). This,)
-.15 F(unfortunately)72 547.2 Q 2.548(,r)-.65 G .048
(equires some bootstrapping information, for a serv)-2.548 F .049
(er will ha)-.15 F .349 -.15(ve n)-.2 H 2.549(oi).15 G .049
(dea what machines are its)-2.549 F 1.805(neighbors until it recei)72
559.2 R -.15(ve)-.25 G 4.305(ss).15 G 1.805(tatus messages from them.)
-4.305 F 1.804(Therefore, if all machines on a net are freshly)6.804 F
.235(booted, no machine will ha)72 571.2 R .535 -.15(ve a)-.2 H .535
-.15(ny k).15 H(no).15 E .236(wn neighbors and thus ne)-.25 F -.15(ve)
-.25 G 2.736(rr).15 G(ecei)-2.736 E -.15(ve)-.25 G 2.736(,o).15 G 2.736
(rs)-2.736 G .236(end, an)-2.736 F 2.736(ys)-.15 G .236
(tatus information.)-2.736 F .647(This is the identical problem f)72
583.2 R .647(aced by the routing table management process in propag)-.1
F .646(ating routing status)-.05 F 2.83(information. The)72 595.2 R .33
(standard solution, unsatisf)2.83 F .33
(actory as it may be, is to inform one or more serv)-.1 F .33
(ers of kno)-.15 F(wn)-.25 E .649(neighbors and request that the)72
607.2 R 3.148(ya)-.15 G -.1(lwa)-3.148 G .648
(ys communicate with these neighbors.).1 F .648(If each serv)5.648 F
.648(er has at least one)-.15 F .877
(neighbor supplied to it, status information may then propag)72 619.2 R
.877(ate through a neighbor to hosts which are not)-.05 F .592
(\(possibly\) directly neighbors.)72 631.2 R .592(If the serv)5.592 F
.591(er is able to support netw)-.15 F .591(orks which pro)-.1 F .591
(vide a broadcast capabil-)-.15 F(ity)72 643.2 Q 2.5(,a)-.65 G 2.5(sw)
-2.5 G(ell as those which do not, then netw)-2.5 E
(orks with an arbitrary topology may share status information*.)-.1 E
.128(It is important that softw)97 658.8 R .128
(are operating in a distrib)-.1 F .128(uted en)-.2 F .128
(vironment not ha)-.4 F .428 -.15(ve a)-.2 H .427 -.15(ny s).15 H .127
(ite-dependent infor).15 F(-)-.2 E .819(mation compiled into it.)72
670.8 R .819(This w)5.819 F .819(ould require a separate cop)-.1 F 3.319
(yo)-.1 G 3.32(ft)-3.319 G .82(he serv)-3.32 F .82
(er at each host and mak)-.15 F 3.32(em)-.1 G(ainte-)-3.32 E .96
(nance a se)72 682.8 R -.15(ve)-.25 G .96(re headache.).15 F .959(4.4BS\
D attempts to isolate host-speci\214c information from applications by \
pro-)5.959 F .32 LW 144 698.2 72 698.2 DL/F1 8/Times-Roman@0 SF 2.358
(*O)72 710 S .358(ne must, ho)-2.358 F(we)-.2 E -.12(ve)-.2 G .998 -.32
(r, b).12 H 2.358(ec).32 G .359(oncerned about `)-2.358 F(`loops')-.592
E 2.359('. That)-.592 F .359
(is, if a host is connected to multiple netw)2.359 F .359(orks, it will)
-.08 F(recei)72 720 Q .24 -.12(ve s)-.2 H
(tatus information from itself.).12 E(This can lead to an endless, w)4 E
(asteful, e)-.08 E(xchange of information.)-.12 E EP
%%Page: 22 22
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-22 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E(main\(\))108 90 Q({)108 102 Q(...)144 114 Q
(sp = getservbyname\("who", "udp"\);)144 126 Q
(net = getnetbyname\("localnet"\);)144 138 Q(sin.sin_addr = inet_mak)144
150 Q(eaddr\(IN)-.1 E(ADDR_ANY)-.35 E 2.5(,n)-1.29 G(et\);)-2.5 E
(sin.sin_port = sp->s_port;)144 162 Q(...)144 174 Q 2.5(s=s)144 186 S
(ock)-2.5 E(et\(AF_INET)-.1 E 2.5(,S)-.74 G(OCK_DGRAM, 0\);)-2.5 E(...)
144 198 Q(on = 1;)144 210 Q(if \(setsock)144 222 Q(opt\(s, SOL_SOCKET)
-.1 E 2.5(,S)-.74 G(O_BR)-2.5 E -.35(OA)-.4 G(DCAST).35 E 2.5(,&)-.74 G
(on, sizeof\(on\)\) < 0\) {)-2.5 E(syslog\(LOG_ERR, "setsock)180 234 Q
(opt SO_BR)-.1 E -.35(OA)-.4 G(DCAST).35 E 2.5(:%)-.5 G(m"\);)-2.5 E
-.15(ex)180 246 S(it\(1\);).15 E(})144 258 Q
(bind\(s, \(struct sockaddr *\) &sin, sizeof \(sin\)\);)144 270 Q(...)
144 282 Q(signal\(SIGALRM, onalrm\);)144 294 Q(onalrm\(\);)144 306 Q
(for \(;;\) {)144 318 Q(struct whod wd;)180 330 Q
(int cc, whod, len = sizeof \(from\);)180 342 Q
(cc = recvfrom\(s, \(char *\)&wd, sizeof \(struct whod\), 0,)180 366 Q
(\(struct sockaddr *\)&from, &len\);)190 378 Q(if \(cc <= 0\) {)180 390
Q(if \(cc < 0 && errno != EINTR\))216 402 Q
(syslog\(LOG_ERR, "rwhod: recv: %m"\);)252 414 Q(continue;)216 426 Q(})
180 438 Q(if \(from.sin_port != sp->s_port\) {)180 450 Q
(syslog\(LOG_ERR, "rwhod: %d: bad from port",)216 462 Q
(ntohs\(from.sin_port\)\);)252 474 Q(continue;)216 486 Q(})180 498 Q
(...)180 510 Q(if \(!v)180 522 Q(erify\(wd.wd_hostname\)\) {)-.15 E
(syslog\(LOG_ERR, "rwhod: malformed host name from %x",)216 534 Q
(ntohl\(from.sin_addr)252 546 Q(.s_addr\)\);)-.55 E(continue;)216 558 Q
(})180 570 Q(\(v)180 582 Q(oid\) sprintf\(path, "%s/whod.%s", R)-.2 E
(WHODIR, wd.wd_hostname\);)-.55 E(whod = open\(path, O_WR)180 594 Q(ONL)
-.4 E 2.5(Y|O)-1 G(_CREA)-2.5 E 2.5(T|O)-1.11 G(_TR)-2.5 E(UNC, 0666\);)
-.4 E(...)180 606 Q(\(v)180 618 Q(oid\) time\(&wd.wd_recvtime\);)-.2 E
(\(v)180 630 Q(oid\) write\(whod, \(char *\)&wd, cc\);)-.2 E(\(v)180 642
Q(oid\) close\(whod\);)-.2 E(})144 654 Q(})108 666 Q(Figure 4.)242.805
684 Q(rwho serv)5 E(er)-.15 E(.)-.55 E .675
(viding system calls which return the necessary information*.)72 708 R
3.176(Am)5.676 G .676(echanism e)-3.176 F .676(xists, in the form of an)
-.15 F/F1 10/Times-Italic@0 SF(ioctl)3.176 E .32 LW 144 716 72 716 DL/F2
8/Times-Roman@0 SF 2(*A)72 727.8 S 2(ne)-2 G
(xample of such a system call is the)-2.12 E/F3 8/Times-Italic@0 SF -.08
(ge)2 G(thostname).08 E F2(\(2\) call which returns the host')A 2(s`)
-.44 G(`of)-2.592 E(\214cial')-.2 E 2('n)-.592 G(ame.)-2 E EP
%%Page: 23 23
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-23)-.45 F .696
(call, for \214nding the collection of netw)72 84 R .696
(orks to which a host is directly connected.)-.1 F(Further)5.696 E 3.196
(,a)-.4 G .695(local netw)-.001 F(ork)-.1 E .327
(broadcasting mechanism has been implemented at the sock)72 96 R .327
(et le)-.1 F -.15(ve)-.25 G 2.827(l. Combining).15 F .327(these tw)2.827
F 2.827(of)-.1 G .328(eatures allo)-2.827 F .328(ws a)-.25 F .042
(process to broadcast on an)72 108 R 2.541(yd)-.15 G .041
(irectly connected local netw)-2.541 F .041
(ork which supports the notion of broadcasting in a)-.1 F 1.182
(site independent manner)72 120 R 6.182(.T)-.55 G 1.182(his allo)-6.182
F 1.182(ws 4.4BSD to solv)-.25 F 3.682(et)-.15 G 1.182
(he problem of deciding ho)-3.682 F 3.682(wt)-.25 G 3.682(op)-3.682 G
(ropag)-3.682 E 1.182(ate status)-.05 F .354(information in the case of)
72 132 R/F1 10/Times-Italic@0 SF(rwho)2.854 E F0 2.854(,o)C 2.854(rm)
-2.854 G .354
(ore generally in broadcasting: Such status information is broadcast to)
-2.854 F .248(connected netw)72 144 R .248(orks at the sock)-.1 F .248
(et le)-.1 F -.15(ve)-.25 G .248(l, where the connected netw).15 F .248
(orks ha)-.1 F .548 -.15(ve b)-.2 H .248(een obtained via the appropri-)
.15 F(ate)72 156 Q F1(ioctl)2.5 E F0 2.5(calls. The)2.5 F
(speci\214cs of such broadcastings are comple)2.5 E(x, ho)-.15 E(we)-.25
E -.15(ve)-.25 G .8 -.4(r, a).15 H(nd will be co).4 E -.15(ve)-.15 G
(red in section 5.).15 E EP
%%Page: 24 24
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-24 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E/F1 12/Times-Bold@0 SF(5. AD)224.994 84 Q -1.62(VA)
-.48 G(NCED T)1.62 E(OPICS)-.216 E F0 3.196(An)97 123.6 S .696
(umber of f)-3.196 F .696(acilities ha)-.1 F .996 -.15(ve y)-.2 H .695
(et to be discussed.).15 F -.15(Fo)5.695 G 3.195(rm).15 G .695
(ost users of the IPC the mechanisms already)-3.195 F .431
(described will suf)72 135.6 R .431(\214ce in constructing distrib)-.25
F .431(uted applications.)-.2 F(Ho)5.431 E(we)-.25 E -.15(ve)-.25 G
1.231 -.4(r, o).15 H .432(thers will \214nd the need to utilize).4 F
(some of the features which we consider in this section.)72 147.6 Q/F2
10/Times-Bold@0 SF 2.5(5.1. Out)72 171.6 R(of band data)2.5 E F0 .419
(The stream sock)97 187.2 R .419
(et abstraction includes the notion of `)-.1 F .419(`out of band')-.74 F
2.919('d)-.74 G 2.919(ata. Out)-2.919 F .419(of band data is a logi-)
2.919 F .116(cally independent transmission channel associated with eac\
h pair of connected stream sock)72 199.2 R 2.617(ets. Out)-.1 F .117
(of band)2.617 F .169(data is deli)72 211.2 R -.15(ve)-.25 G .169
(red to the user independently of normal data.).15 F .168
(The abstraction de\214nes that the out of band data)5.168 F -.1(fa)72
223.2 S .003(cilities must support the reliable deli).1 F -.15(ve)-.25 G
.003(ry of at least one out of band message at a time.).15 F .004
(This message may)5.004 F .628(contain at least one byte of data, and a\
t least one message may be pending deli)72 235.2 R -.15(ve)-.25 G .628
(ry to the user at an).15 F 3.128(yo)-.15 G(ne)-3.128 E 2.816(time. F)72
247.2 R .316(or communications protocols which support only in-band sig\
naling \(i.e. the ur)-.15 F .317(gent data is deli)-.18 F -.15(ve)-.25 G
(red).15 E .621
(in sequence with the normal data\), the system normally e)72 259.2 R
.621(xtracts the data from the normal data stream and)-.15 F .33
(stores it separately)72 271.2 R 5.33(.T)-.65 G .33(his allo)-5.33 F .33
(ws users to choose between recei)-.25 F .33(ving the ur)-.25 F .33
(gent data in order and recei)-.18 F .33(ving it)-.25 F 3.501
(out of sequence without ha)72 283.2 R 3.501(ving to b)-.2 F(uf)-.2 E
3.501(fer all the interv)-.25 F 3.501(ening data.)-.15 F 3.5
(It is possible to `)8.5 F(`peek')-.74 E 6('\()-.74 G(via)-6 E .661
(MSG_PEEK\) at out of band data.)72 295.2 R .661(If the sock)5.661 F
.661(et has a process group, a SIGURG signal is generated when)-.1 F
.083(the protocol is noti\214ed of its e)72 307.2 R 2.583(xistence. A)
-.15 F .083
(process can set the process group or process id to be informed by)2.583
F .828(the SIGURG signal via the appropriate)72 319.2 R/F3 10
/Times-Italic@0 SF(fcntl)3.328 E F0 .828(call, as described belo)3.328 F
3.328(wf)-.25 G .828(or SIGIO.)-3.328 F .828(If multiple sock)5.828 F
.829(ets may)-.1 F(ha)72 331.2 Q .986 -.15(ve o)-.2 H .686
(ut of band data a).15 F -.1(wa)-.15 G .686(iting deli).1 F -.15(ve)-.25
G(ry).15 E 3.186(,a)-.65 G F3(select)A F0 .686(call for e)3.186 F .686
(xceptional conditions may be used to determine)-.15 F .117(those sock)
72 343.2 R .117(ets with such data pending.)-.1 F .118
(Neither the signal nor the select indicate the actual arri)5.118 F -.25
(va)-.25 G 2.618(lo).25 G 2.618(ft)-2.618 G .118(he out-)-2.618 F
(of-band data, b)72 355.2 Q(ut only noti\214cation that it is pending.)
-.2 E .222(In addition to the information passed, a logical mark is pla\
ced in the data stream to indicate the point)97 370.8 R .513
(at which the out of band data w)72 382.8 R .513(as sent.)-.1 F .513
(The remote login and remote shell applications use this f)5.513 F .514
(acility to)-.1 F(propag)72 394.8 Q .699
(ate signals between client and serv)-.05 F .699(er processes.)-.15 F
.699(When a signal \215ushs an)5.699 F 3.198(yp)-.15 G .698
(ending output from the)-3.198 F(remote process\(es\), all data up to t\
he mark in the data stream is discarded.)72 406.8 Q 2.421 -.8(To s)97
422.4 T .821
(end an out of band message the MSG_OOB \215ag is supplied to a).8 F F3
(send)3.322 E F0(or)3.322 E F3(sendto)3.322 E F0 .822(calls, while to)
3.322 F(recei)72 434.4 Q .678 -.15(ve o)-.25 H .378
(ut of band data MSG_OOB should be indicated when performing a).15 F F3
-.37(re)2.877 G(cvfr).37 E(om)-.45 E F0(or)2.877 E F3 -.37(re)2.877 G
(cv).37 E F0 2.877(call. T)2.877 F 2.877<6f8c>-.8 G(nd)-2.877 E .4(out \
if the read pointer is currently pointing at the mark in the data strea\
m, the SIOCA)72 446.4 R .4(TMARK ioctl is pro-)-1.11 F(vided:)72 458.4 Q
(ioctl\(s, SIOCA)108 476.4 Q(TMARK, &yes\);)-1.11 E(If)72 494.4 Q F3
(yes)2.951 E F0 .451(is a 1 on return, the ne)2.951 F .451
(xt read will return data after the mark.)-.15 F .451
(Otherwise \(assuming out of band data)5.451 F .568(has arri)72 506.4 R
-.15(ve)-.25 G .568(d\), the ne).15 F .568(xt read will pro)-.15 F .569
(vide data sent by the client prior to transmission of the out of band \
sig-)-.15 F 2.88(nal. The)72 518.4 R .379(routine used in the remote lo\
gin process to \215ush output on receipt of an interrupt or quit signal\
 is)2.88 F(sho)72 530.4 Q(wn in Figure 5.)-.25 E(It reads the normal da\
ta up to the mark \(to discard it\), then reads the out-of-band byte.)5
E 2.769(Ap)97 546 S .269(rocess may also read or peek at the out-of-ban\
d data without \214rst reading up to the mark.)-2.769 F .27(This is)5.27
F .233(more dif)72 558 R .233
(\214cult when the underlying protocol deli)-.25 F -.15(ve)-.25 G .233
(rs the ur).15 F .232(gent data in-band with the normal data, and only)
-.18 F .937(sends noti\214cation of its presence ahead of time \(e.g., \
the TCP protocol used to implement streams in the)72 570 R .474
(Internet domain\).)72 582 R -.4(Wi)5.474 G .474
(th such protocols, the out-of-band byte may not yet ha).4 F .773 -.15
(ve a)-.2 H(rri).15 E -.15(ve)-.25 G 2.973(dw).15 G .473(hen a)-2.973 F
F3 -.37(re)2.973 G(cv).37 E F0 .473(is done)2.973 F 1.123
(with the MSG_OOB \215ag.)72 594 R 1.124
(In that case, the call will return an error of EW)6.123 F 3.624
(OULDBLOCK. W)-.1 F 1.124(orse, there)-.8 F .238
(may be enough in-band data in the input b)72 606 R(uf)-.2 E .238
(fer that normal \215o)-.25 F 2.738(wc)-.25 G .238(ontrol pre)-2.738 F
-.15(ve)-.25 G .237(nts the peer from sending the).15 F(ur)72 618 Q 1.54
(gent data until the b)-.18 F(uf)-.2 E 1.54(fer is cleared.)-.25 F 1.54
(The process must then read enough of the queued data that the)6.54 F
(ur)72 630 Q(gent data may be deli)-.18 E -.15(ve)-.25 G(red.).15 E .123
(Certain programs that use multiple bytes of ur)97 645.6 R .123
(gent data and must handle multiple ur)-.18 F .122(gent signals \(e.g.,)
-.18 F F3(telnet)72 657.6 Q F0 1.155
(\(1C\)\) need to retain the position of ur)1.666 F 1.155
(gent data within the stream.)-.18 F 1.155(This treatment is a)6.155 F
-.25(va)-.2 G 1.155(ilable as a).25 F(sock)72 669.6 Q(et-le)-.1 E -.15
(ve)-.25 G 2.615(lo).15 G .115(ption, SO_OOBINLINE; see)-2.615 F F3
(setsoc)2.614 E -.1(ko)-.2 G(pt).1 E F0 .114(\(2\) for usage.)1.666 F
-.4(Wi)5.114 G .114(th this option, the position of ur).4 F(gent)-.18 E
1.285(data \(the `)72 681.6 R(`mark')-.74 E 1.285('\) is retained, b)
-.74 F 1.285(ut the ur)-.2 F 1.286(gent data immediately follo)-.18 F
1.286(ws the mark within the normal data)-.25 F .595
(stream returned without the MSG_OOB \215ag.)72 693.6 R .595
(Reception of multiple ur)5.595 F .595
(gent indications causes the mark to)-.18 F(mo)72 705.6 Q -.15(ve)-.15 G
2.5(,b).15 G(ut no out-of-band data are lost.)-2.7 E EP
%%Page: 25 25
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-25)-.45 F(#include <sys/ioctl.h>)108 90 Q
(#include <sys/\214le.h>)108 102 Q(...)110.5 114 Q(oob\(\))108 126 Q({)
108 138 Q(int out = FWRITE, mark;)133 150 Q(char w)133 162 Q(aste[B)-.1
E(UFSIZ];)-.1 E(/* \215ush local terminal output */)133 186 Q
(ioctl\(1, TIOCFLUSH, \(char *\)&out\);)133 198 Q(for \(;;\) {)133 210 Q
(if \(ioctl\(rem, SIOCA)158 222 Q(TMARK, &mark\) < 0\) {)-1.11 E
(perror\("ioctl"\);)183 234 Q(break;)183 246 Q(})158 258 Q(if \(mark\))
158 270 Q(break;)183 282 Q(\(v)158 294 Q(oid\) read\(rem, w)-.2 E
(aste, sizeof \(w)-.1 E(aste\)\);)-.1 E(})133 306 Q
(if \(recv\(rem, &mark, 1, MSG_OOB\) < 0\) {)133 318 Q
(perror\("recv"\);)158 330 Q(...)158 342 Q(})133 354 Q(...)133 366 Q(})
108 378 Q(Figure 5.)162.735 396 Q
(Flushing terminal I/O on receipt of out of band data.)5 E/F1 10
/Times-Bold@0 SF 2.5(5.2. Non-Blocking)72 420 R(Sock)2.5 E(ets)-.1 E F0
.654(It is occasionally con)97 435.6 R -.15(ve)-.4 G .654(nient to mak)
.15 F 3.155(eu)-.1 G .655(se of sock)-3.155 F .655
(ets which do not block; that is, I/O requests which)-.1 F .636
(cannot complete immediately and w)72 447.6 R .635
(ould therefore cause the process to be suspended a)-.1 F -.1(wa)-.15 G
.635(iting completion).1 F .558(are not e)72 459.6 R -.15(xe)-.15 G .558
(cuted, and an error code is returned.).15 F .558(Once a sock)5.558 F
.559(et has been created via the)-.1 F/F2 10/Times-Italic@0 SF(soc)3.059
E -.1(ke)-.2 G(t).1 E F0 .559(call, it may)3.059 F(be mark)72 471.6 Q
(ed as non-blocking by)-.1 E F2(fcntl)2.5 E F0(as follo)2.5 E(ws:)-.25 E
(#include <fcntl.h>)108 489.6 Q(...)110.5 501.6 Q 11.94(int s;)108 513.6
R(...)110.5 525.6 Q 2.5(s=s)108 537.6 S(ock)-2.5 E(et\(AF_INET)-.1 E 2.5
(,S)-.74 G(OCK_STREAM, 0\);)-2.5 E(...)110.5 549.6 Q
(if \(fcntl\(s, F_SETFL, FNDELA)108 561.6 Q(Y\) < 0\))-1.05 E
(perror\("fcntl F_SETFL, FNDELA)133 573.6 Q(Y"\);)-1.05 E -.15(ex)133
585.6 S(it\(1\);).15 E(})108 597.6 Q(...)110.5 609.6 Q .006
(When performing non-blocking I/O on sock)97 631.2 R .005
(ets, one must be careful to check for the error EW)-.1 F(OULD-)-.1 E
.674(BLOCK \(stored in the global v)72 643.2 R(ariable)-.25 E F2(errno)
3.174 E F0 .674(\), which occurs when an operation w)B .674
(ould normally block, b)-.1 F(ut)-.2 E .43(the sock)72 655.2 R .43
(et it w)-.1 F .43(as performed on is mark)-.1 F .429
(ed as non-blocking.)-.1 F .429(In particular)5.429 F(,)-.4 E F2(accept)
2.929 E F0(,)A F2(connect)2.929 E F0(,)A F2(send)2.929 E F0(,)A F2 -.37
(re)2.929 G(cv).37 E F0(,)A F2 -.37(re)2.929 G(ad).37 E F0(,)A(and)72
667.2 Q F2(write)4.09 E F0 1.59(can all return EW)4.09 F 1.59
(OULDBLOCK, and processes should be prepared to deal with such return)
-.1 F 3.883(codes. If)72 679.2 R 1.383(an operation such as a)3.883 F F2
(send)3.883 E F0 1.383(cannot be done in its entirety)3.883 F 3.882(,b)
-.65 G 1.382(ut partial writes are sensible \(for)-4.082 F -.15(ex)72
691.2 S 1.215(ample, when using a stream sock).15 F 1.215
(et\), the data that can be sent immediately will be processed, and the)
-.1 F(return v)72 703.2 Q(alue will indicate the amount actually sent.)
-.25 E EP
%%Page: 26 26
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-26 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E/F1 10/Times-Bold@0 SF 2.5(5.3. Interrupt)72 84 R
(dri)2.5 E -.1(ve)-.1 G 2.5(ns).1 G(ock)-2.5 E(et I/O)-.1 E F0 .25
(The SIGIO signal allo)97 99.6 R .25
(ws a process to be noti\214ed via a signal when a sock)-.25 F .249
(et \(or more generally)-.1 F 2.749(,a\214)-.65 G(le)-2.749 E .902
(descriptor\) has data w)72 111.6 R .902(aiting to be read.)-.1 F .902
(Use of the SIGIO f)5.902 F .903(acility requires three steps:)-.1 F
.903(First, the process)5.903 F .005
(must set up a SIGIO signal handler by use of the)72 123.6 R/F2 10
/Times-Italic@0 SF(signal)2.505 E F0(or)2.505 E F2(sigvec)2.504 E F0
2.504(calls. Second,)2.504 F .004(it must set the process id or)2.504 F
.054(process group id which is to recei)72 135.6 R .354 -.15(ve n)-.25 H
.054(oti\214cation of pending input to its o).15 F .055
(wn process id, or the process group)-.25 F .193
(id of its process group \(note that the def)72 147.6 R .193
(ault process group of a sock)-.1 F .192(et is group zero\).)-.1 F .192
(This is accomplished)5.192 F .022(by use of an)72 159.6 R F2(fcntl)
2.522 E F0 2.522(call. Third,)2.522 F .023(it must enable asynchronous \
noti\214cation of pending I/O requests with another)2.522 F F2(fcntl)72
171.6 Q F0 3.689(call. Sample)3.689 F 1.189(code to allo)3.689 F 3.689
(wag)-.25 G -2.15 -.25(iv e)-3.689 H 3.689(np).25 G 1.189
(rocess to recei)-3.689 F 1.489 -.15(ve i)-.25 H 1.189
(nformation on pending I/O requests as the).15 F(y)-.15 E .248
(occur for a sock)72 183.6 R(et)-.1 E F2(s)2.748 E F0 .248(is gi)2.748 F
-.15(ve)-.25 G 2.748(ni).15 G 2.748(nF)-2.748 G .249(igure 6.)-2.748 F
-.4(Wi)5.249 G .249
(th the addition of a handler for SIGURG, this code can also be).4 F
(used to prepare for receipt of SIGURG signals.)72 195.6 Q
(#include <fcntl.h>)108 213.6 Q(...)110.5 225.6 Q 11.94
(int io_handler\(\);)108 237.6 R(...)110.5 249.6 Q
(signal\(SIGIO, io_handler\);)108 261.6 Q(/* Set the process recei)108
285.6 Q(ving SIGIO/SIGURG signals to us */)-.25 E(if \(fcntl\(s, F_SET)
108 309.6 Q -.35(OW)-.18 G(N, getpid\(\)\) < 0\) {).35 E
(perror\("fcntl F_SET)133 321.6 Q -.35(OW)-.18 G(N"\);).35 E -.15(ex)133
333.6 S(it\(1\);).15 E(})108 345.6 Q(/* Allo)108 369.6 Q 2.5(wr)-.25 G
(eceipt of asynchronous I/O signals */)-2.5 E(if \(fcntl\(s, F_SETFL, F)
108 393.6 Q(ASYNC\) < 0\) {)-.74 E(perror\("fcntl F_SETFL, F)133 405.6 Q
(ASYNC"\);)-.74 E -.15(ex)133 417.6 S(it\(1\);).15 E(})108 429.6 Q
(Figure 6.)169.265 447.6 Q
(Use of asynchronous noti\214cation of I/O requests.)5 E F1 2.5
(5.4. Signals)72 483.6 R(and pr)2.5 E(ocess gr)-.18 E(oups)-.18 E F0
.494(Due to the e)97 499.2 R .493
(xistence of the SIGURG and SIGIO signals each sock)-.15 F .493
(et has an associated process num-)-.1 F(ber)72 511.2 Q 2.836(,j)-.4 G
.336(ust as is done for terminals.)-2.836 F .337(This v)5.336 F .337
(alue is initialized to zero, b)-.25 F .337
(ut may be rede\214ned at a later time with)-.2 F .015(the F_SET)72
523.2 R -.35(OW)-.18 G(N).35 E F2(fcntl)2.515 E F0 2.515(,s)C .015
(uch as w)-2.515 F .015(as done in the code abo)-.1 F .314 -.15(ve f)
-.15 H .014(or SIGIO.).15 F 1.614 -.8(To s)5.014 H .014(et the sock).8 F
(et')-.1 E 2.514(sp)-.55 G .014(rocess id for sig-)-2.514 F .102
(nals, positi)72 535.2 R .402 -.15(ve a)-.25 H -.18(rg).15 G .102
(uments should be gi).18 F -.15(ve)-.25 G 2.603(nt).15 G 2.603(ot)-2.603
G(he)-2.603 E F2(fcntl)2.603 E F0 2.603(call. T)2.603 F 2.603(os)-.8 G
.103(et the sock)-2.603 F(et')-.1 E 2.603(sp)-.55 G .103
(rocess group for signals, ne)-2.603 F(g-)-.15 E(ati)72 547.2 Q .466
-.15(ve a)-.25 H -.18(rg).15 G .166(uments should be passed to).18 F F2
(fcntl)2.666 E F0 5.166(.N)C .165
(ote that the process number indicates either the associated pro-)-5.166
F .75(cess id or the associated process group; it is impossible to spec\
ify both at the same time.)72 559.2 R 3.25(As)5.75 G(imilar)-3.25 E F2
(fcntl)3.25 E F0(,)A(F_GET)72 571.2 Q -.35(OW)-.18 G(N, is a).35 E -.25
(va)-.2 G(ilable for determining the current process number of a sock)
.25 E(et.)-.1 E 1.943
(Another signal which is useful when constructing serv)97 586.8 R 1.942
(er processes is SIGCHLD.)-.15 F 1.942(This signal is)6.942 F(deli)72
598.8 Q -.15(ve)-.25 G 1.238(red to a process when an).15 F 3.738(yc)
-.15 G 1.238(hild processes ha)-3.738 F 1.538 -.15(ve c)-.2 H 1.238
(hanged state.).15 F 1.238(Normally serv)6.238 F 1.238
(ers use the signal to)-.15 F -.74(``)72 610.8 S(reap').74 E 2.778('c)
-.74 G .278(hild processes that ha)-2.778 F .578 -.15(ve ex)-.2 H .278
(ited without e).15 F .278(xplicitly a)-.15 F -.1(wa)-.15 G .278
(iting their termination or periodic polling for).1 F -.15(ex)72 622.8 S
.807(it status.).15 F -.15(Fo)5.807 G 3.307(re).15 G .807
(xample, the remote login serv)-3.457 F .807(er loop sho)-.15 F .807
(wn in Figure 2 may be augmented as sho)-.25 F .808(wn in)-.25 F
(Figure 7.)72 634.8 Q .597(If the parent serv)97 650.4 R .597
(er process f)-.15 F .597(ails to reap its children, a lar)-.1 F .596
(ge number of `)-.18 F(`zombie')-.74 E 3.096('p)-.74 G .596
(rocesses may be)-3.096 F(created.)72 662.4 Q F1 2.5(5.5. Pseudo)72
686.4 R(terminals)2.5 E F0(Man)97 702 Q 3.489(yp)-.15 G .989(rograms wi\
ll not function properly without a terminal for standard input and outp\
ut.)-3.489 F(Since)5.99 E(sock)72 714 Q .948(ets do not pro)-.1 F .948
(vide the semantics of terminals, it is often necessary to ha)-.15 F
1.247 -.15(ve a p)-.2 H .947(rocess communicating).15 F -.15(ove)72 726
S 2.758(rt).15 G .258(he netw)-2.758 F .258(ork do so through a)-.1 F F2
(pseudo-terminal)2.758 E F0 5.258(.A)C .258
(pseudo- terminal is actually a pair of de)-2.5 F .259(vices, master)
-.25 F EP
%%Page: 27 27
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-27)-.45 F(int reaper\(\);)108 90 Q(...)110.5 102 Q
(signal\(SIGCHLD, reaper\);)108 114 Q(listen\(f, 5\);)108 126 Q
(for \(;;\) {)108 138 Q(int g, len = sizeof \(from\);)133 150 Q 2.5(g=a)
133 174 S(ccept\(f, \(struct sockaddr *\)&from, &len,\);)-2.5 E
(if \(g < 0\) {)133 186 Q(if \(errno != EINTR\))158 198 Q
(syslog\(LOG_ERR, "rlogind: accept: %m"\);)183 210 Q(continue;)158 222 Q
(})133 234 Q(...)133 246 Q(})108 258 Q(...)110.5 270 Q(#include <w)108
282 Q(ait.h>)-.1 E(reaper\(\))108 294 Q({)108 306 Q(union w)133 318 Q
(ait status;)-.1 E(while \(w)133 342 Q
(ait3\(&status, WNOHANG, 0\) > 0\))-.1 E(;)158 354 Q(})108 366 Q
(Figure 7.)209.535 396 Q(Use of the SIGCHLD signal.)5 E .045(and sla)72
420 R -.15(ve)-.2 G 2.545(,w).15 G .044(hich allo)-2.545 F 2.544(wap)
-.25 G .044(rocess to serv)-2.544 F 2.544(ea)-.15 G 2.544(sa)-2.544 G
2.544(na)-2.544 G(cti)-2.544 E .344 -.15(ve a)-.25 H .044
(gent in communication between processes and users.).15 F .054
(Data written on the sla)72 432 R .354 -.15(ve s)-.2 H .054(ide of a ps\
eudo-terminal is supplied as input to a process reading from the master)
.15 F .913(side, while data written on the master side are processed as\
 terminal input for the sla)72 444 R -.15(ve)-.2 G 5.912(.I).15 G 3.412
(nt)-5.912 G .912(his w)-3.412 F(ay)-.1 E 3.412(,t)-.65 G(he)-3.412 E
.102(process manipulating the master side of the pseudo-terminal has co\
ntrol o)72 456 R -.15(ve)-.15 G 2.603(rt).15 G .103
(he information read and writ-)-2.603 F .218(ten on the sla)72 468 R
.518 -.15(ve s)-.2 H .218(ide as if it were manipulating the k).15 F
-.15(ey)-.1 G .218(board and reading the screen on a real terminal.).15
F(The)5.218 E .48(purpose of this abstraction is to preserv)72 480 R
2.981(et)-.15 G .481(erminal semantics o)-2.981 F -.15(ve)-.15 G 2.981
(ran).15 G(etw)-2.981 E .481(ork connection\212 that is, the sla)-.1 F
-.15(ve)-.2 G(side appears as a normal terminal to an)72 492 Q 2.5(yp)
-.15 G(rocess reading from or writing to it.)-2.5 E -.15(Fo)97 507.6 S
3.453(re).15 G .953(xample, the remote login serv)-3.603 F .953
(er uses pseudo-terminals for remote login sessions.)-.15 F 3.452(Au)
5.953 G .952(ser log-)-3.452 F .41(ging in to a machine across the netw)
72 519.6 R .41(ork is pro)-.1 F .41(vided a shell with a sla)-.15 F .71
-.15(ve p)-.2 H .41(seudo-terminal as standard input,).15 F .983
(output, and error)72 531.6 R 5.983(.T)-.55 G .983(he serv)-5.983 F .983
(er process then handles the communication between the programs in)-.15
F -.2(vo)-.4 G -.1(ke).2 G 3.482(db).1 G(y)-3.482 E .53
(the remote shell and the user')72 543.6 R 3.03(sl)-.55 G .53
(ocal client process.)-3.03 F .53
(When a user sends a character that generates an inter)5.53 F(-)-.2 E
.802(rupt on the remote machine that \215ushes terminal output, the pse\
udo-terminal generates a control message)72 555.6 R .397(for the serv)72
567.6 R .397(er process.)-.15 F .397(The serv)5.397 F .397(er then send\
s an out of band message to the client process to signal a \215ush)-.15
F(of data at the real terminal and on the interv)72 579.6 Q
(ening data b)-.15 E(uf)-.2 E(fered in the netw)-.25 E(ork.)-.1 E .224
(Under 4.4BSD, the name of the sla)97 595.2 R .524 -.15(ve s)-.2 H .224
(ide of a pseudo-terminal is of the form).15 F/F1 10/Times-Italic@0 SF
(/de)2.723 E(v/ttyxy)-.15 E F0 2.723(,w)C(here)-2.723 E F1(x)2.723 E F0
.223(is a)2.723 F 1.286
(single letter starting at `p' and continuing to `t'.)72 607.2 R F1(y)
6.286 E F0 1.286(is a he)3.786 F 1.287
(xadecimal digit \(i.e., a single character in the)-.15 F .968
(range 0 through 9 or `a' through `f)72 619.2 R 3.467('\). The).55 F
.967(master side of a pseudo-terminal is)3.467 F F1(/de)3.467 E(v/ptyxy)
-.15 E F0 3.467(,w)C(here)-3.467 E F1(x)3.467 E F0(and)3.467 E F1(y)
3.467 E F0(correspond to the sla)72 631.2 Q .3 -.15(ve s)-.2 H
(ide of the pseudo-terminal.).15 E .665
(In general, the method of obtaining a pair of master and sla)97 646.8 R
.965 -.15(ve p)-.2 H .665(seudo-terminals is to \214nd a pseudo-).15 F
.529(terminal which is not currently in use.)72 658.8 R .528
(The master half of a pseudo-terminal is a single-open de)5.528 F .528
(vice; thus,)-.25 F .752
(each master may be opened in turn until an open succeeds.)72 670.8 R
.752(The sla)5.752 F 1.052 -.15(ve s)-.2 H .753
(ide of the pseudo-terminal is then).15 F .784
(opened, and is set to the proper terminal modes if necessary)72 682.8 R
5.784(.T)-.65 G .784(he process then)-5.784 F F1(fork)3.284 E F0 .784
(s; the child closes the)B .878(master side of the pseudo-terminal, and)
72 694.8 R F1 -.2(ex)3.378 G(ec).2 E F0 3.379(st)C .879
(he appropriate program.)-3.379 F .879(Meanwhile, the parent closes the)
5.879 F(sla)72 706.8 Q .774 -.15(ve s)-.2 H .473
(ide of the pseudo-terminal and be).15 F .473
(gins reading and writing from the master side.)-.15 F .473
(Sample code mak-)5.473 F .638(ing use of pseudo-terminals is gi)72
718.8 R -.15(ve)-.25 G 3.138(ni).15 G 3.138(nF)-3.138 G .639
(igure 8; this code assumes that a connection on a sock)-3.138 F(et)-.1
E F1(s)3.139 E F0 -.15(ex)3.139 G(ists,).15 E .007
(connected to a peer who w)72 730.8 R .006(ants a service of some kind,\
 and that the process has disassociated itself from an)-.1 F(y)-.15 E EP
%%Page: 28 28
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-28 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E(pre)72 84 Q(vious controlling terminal.)-.25 E
(gotpty = 0;)108 102 Q(for \(c = 'p'; !gotpty && c <= ')108 114 Q
(s'; c++\) {)-.55 E(line = "/de)133 126 Q(v/ptyXX";)-.25 E
(line[sizeof\("/de)133 138 Q(v/pty"\)-1] = c;)-.25 E(line[sizeof\("/de)
133 150 Q(v/ptyp"\)-1] = '0';)-.25 E(if \(stat\(line, &statb)133 162 Q
(uf\) < 0\))-.2 E(break;)158 174 Q(for \(i = 0; i < 16; i++\) {)133 186
Q(line[sizeof\("/de)158 198 Q(v/ptyp"\)-1] = "0123456789abcdef"[i];)-.25
E(master = open\(line, O_RD)158 210 Q(WR\);)-.3 E(if \(master > 0\) {)
158 222 Q(gotpty = 1;)183 234 Q(break;)183 246 Q(})158 258 Q(})133 270 Q
(})108 282 Q(if \(!gotpty\) {)108 294 Q(syslog\(LOG_ERR, "All netw)133
306 Q(ork ports in use"\);)-.1 E -.15(ex)133 318 S(it\(1\);).15 E(})108
330 Q(line[sizeof\("/de)108 354 Q(v/"\)-1] = ')-.25 E(t';)-.18 E(sla)108
366 Q .3 -.15(ve = o)-.2 H(pen\(line, O_RD).15 E .86(WR\); /*)-.3 F/F1
10/Times-Italic@0 SF(slave)2.5 E F0(is no)2.5 E 2.5(ws)-.25 G(la)-2.5 E
.3 -.15(ve s)-.2 H(ide */).15 E(if \(sla)108 378 Q .3 -.15(ve < 0)-.2 H
2.5(\){).15 G(syslog\(LOG_ERR, "Cannot open sla)133 390 Q .3 -.15(ve p)
-.2 H(ty %s", line\);).15 E -.15(ex)133 402 S(it\(1\);).15 E(})108 414 Q
(ioctl\(sla)108 438 Q -.15(ve)-.2 G 2.5(,T).15 G(IOCGETP)-2.5 E 2.5(,&)
-1.11 G 5.08(b\); /*)-2.5 F(Set sla)2.5 E .3 -.15(ve t)-.2 H
(ty modes */).15 E -.4(b.)108 450 S(sg_\215ags = CRMOD|XT).4 E
(ABS|ANYP;)-.93 E(ioctl\(sla)108 462 Q -.15(ve)-.2 G 2.5(,T).15 G
(IOCSETP)-2.5 E 2.5(,&)-1.11 G(b\);)-2.5 E 2.5(i=f)108 486 S(ork\(\);)
-2.5 E(if \(i < 0\) {)108 498 Q(syslog\(LOG_ERR, "fork: %m"\);)133 510 Q
-.15(ex)133 522 S(it\(1\);).15 E 2.5(}e)108 534 S(lse if \(i\) {)-2.5 E
(/* P)49.3 E(arent */)-.15 E(close\(sla)133 546 Q -.15(ve)-.2 G(\);).15
E(...)133 558 Q 2.5(}e)108 570 S(lse {)-2.5 E(/* Child */)47.35 E(\(v)
133 582 Q(oid\) close\(s\);)-.2 E(\(v)133 594 Q(oid\) close\(master\);)
-.2 E(dup2\(sla)133 606 Q -.15(ve)-.2 G 2.5(,0).15 G(\);)-2.5 E
(dup2\(sla)133 618 Q -.15(ve)-.2 G 2.5(,1).15 G(\);)-2.5 E(dup2\(sla)133
630 Q -.15(ve)-.2 G 2.5(,2).15 G(\);)-2.5 E(if \(sla)133 642 Q .3 -.15
(ve > 2)-.2 H(\)).15 E(\(v)158 654 Q(oid\) close\(sla)-.2 E -.15(ve)-.2
G(\);).15 E(...)133 666 Q(})108 678 Q(Figure 8.)191.625 696 Q
(Creation and use of a pseudo terminal)5 E EP
%%Page: 29 29
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-29)-.45 F/F1 10/Times-Bold@0 SF 2.5(5.6. Selecting)72 84
R(speci\214c pr)2.5 E(otocols)-.18 E F0 1.645(If the third ar)97 99.6 R
1.645(gument to the)-.18 F/F2 10/Times-Italic@0 SF(soc)4.146 E -.1(ke)
-.2 G(t).1 E F0 1.646(call is 0,)4.146 F F2(soc)4.146 E -.1(ke)-.2 G(t)
.1 E F0 1.646(will select a def)4.146 F 1.646
(ault protocol to use with the)-.1 F .37(returned sock)72 111.6 R .37
(et of the type requested.)-.1 F .37(The def)5.37 F .37
(ault protocol is usually correct, and alternate choices are not)-.1 F
.259(usually a)72 123.6 R -.25(va)-.2 G 2.759(ilable. Ho).25 F(we)-.25 E
-.15(ve)-.25 G 1.059 -.4(r, w).15 H .259(hen using `).4 F(`ra)-.74 E(w')
-.15 E 2.759('s)-.74 G(ock)-2.759 E .259
(ets to communicate directly with lo)-.1 F(wer)-.25 E(-le)-.2 E -.15(ve)
-.25 G 2.76(lp).15 G(rotocols)-2.76 E .664(or hardw)72 135.6 R .664
(are interf)-.1 F .664(aces, the protocol ar)-.1 F .663
(gument may be important for setting up demultiple)-.18 F 3.163(xing. F)
-.15 F .663(or e)-.15 F(xam-)-.15 E .673(ple, ra)72 147.6 R 3.173(ws)
-.15 G(ock)-3.173 E .673(ets in the Internet f)-.1 F .673
(amily may be used to implement a ne)-.1 F 3.173(wp)-.25 G .673
(rotocol abo)-3.173 F .973 -.15(ve I)-.15 H 2.894 -1.11(P, a).15 H .674
(nd the sock)1.11 F(et)-.1 E .247(will recei)72 159.6 R .547 -.15(ve p)
-.25 H(ack).15 E .246(ets only for the protocol speci\214ed.)-.1 F 1.846
-.8(To o)5.246 H .246
(btain a particular protocol one determines the pro-).8 F .866
(tocol number as de\214ned within the communication domain.)72 171.6 R
-.15(Fo)5.866 G 3.366(rt).15 G .867
(he Internet domain one may use one of)-3.366 F
(the library routines discussed in section 3, such as)72 183.6 Q F2 -.1
(ge)2.5 G(tpr).1 E(otobyname)-.45 E F0(:)A(#include <sys/types.h>)108
201.6 Q(#include <sys/sock)108 213.6 Q(et.h>)-.1 E
(#include <netinet/in.h>)108 225.6 Q(#include <netdb)108 237.6 Q(.h>)-.4
E(...)110.5 249.6 Q(pp = getprotobyname\("ne)108 261.6 Q(wtcp"\);)-.25 E
2.5(s=s)108 273.6 S(ock)-2.5 E(et\(AF_INET)-.1 E 2.5(,S)-.74 G
(OCK_STREAM, pp->p_proto\);)-2.5 E .033(This w)72 291.6 R .033
(ould result in a sock)-.1 F(et)-.1 E F2(s)2.532 E F0 .032
(using a stream based connection, b)2.532 F .032
(ut with protocol type of `)-.2 F(`ne)-.74 E(wtcp')-.25 E 2.532('i)-.74
G(nstead)-2.532 E(of the def)72 303.6 Q(ault `)-.1 E(`tcp.)-.74 E -.74
('')-.7 G .358(In the NS domain, the a)97 319.2 R -.25(va)-.2 G .358
(ilable sock).25 F .358(et protocols are de\214ned in <)-.1 F F2
(netns/ns.h)A F0 2.858(>. T)B 2.858(oc)-.8 G .358(reate a ra)-2.858 F
2.859(ws)-.15 G(ock)-2.859 E(et)-.1 E
(for Xerox Error Protocol messages, one might use:)72 331.2 Q
(#include <sys/types.h>)108 349.2 Q(#include <sys/sock)108 361.2 Q
(et.h>)-.1 E(#include <netns/ns.h>)108 373.2 Q(...)110.5 385.2 Q 2.5
(s=s)108 397.2 S(ock)-2.5 E(et\(AF_NS, SOCK_RA)-.1 E 1.84 -.92(W, N)-.9
H(SPR).92 E -1.88 -.4(OT O)-.4 H(_ERR).4 E(OR\);)-.4 E F1 2.5(5.7. Addr)
72 427.2 R(ess binding)-.18 E F0 .623(As w)97 442.8 R .623
(as mentioned in section 2, binding addresses to sock)-.1 F .622
(ets in the Internet and NS domains can be)-.1 F -.1(fa)72 454.8 S .868
(irly comple).1 F 3.368(x. As)-.15 F 3.368(ab)3.368 G .868
(rief reminder)-3.368 F 3.369(,t)-.4 G .869
(hese associations are composed of local and foreign addresses, and)
-3.369 F .257(local and foreign ports.)72 466.8 R .256(Port numbers are\
 allocated out of separate spaces, one for each system and one for)5.256
F .791(each domain on that system.)72 478.8 R .791(Through the)5.791 F
F2(bind)3.291 E F0 .791
(system call, a process may specify half of an association,)3.291 F .159
(the <local address, local port> part, while the)72 490.8 R F2(connect)
2.658 E F0(and)2.658 E F2(accept)2.658 E F0(primiti)2.658 E -.15(ve)-.25
G 2.658(sa).15 G .158(re used to complete a sock)-2.658 F(et')-.1 E(s)
-.55 E .726
(association by specifying the <foreign address, foreign port> part.)72
502.8 R .726(Since the association is created in tw)5.726 F(o)-.1 E
1.169(steps the association uniqueness requirement indicated pre)72
514.8 R 1.168(viously could be violated unless care is tak)-.25 F(en.)
-.1 E(Further)72 526.8 Q 3.07(,i)-.4 G 3.07(ti)-3.07 G 3.07(su)-3.07 G
.57(nrealistic to e)-3.07 F .57(xpect user programs to al)-.15 F -.1(wa)
-.1 G .571(ys kno).1 F 3.071(wp)-.25 G .571(roper v)-3.071 F .571
(alues to use for the local address)-.25 F 1.034
(and local port since a host may reside on multiple netw)72 538.8 R
1.034(orks and the set of allocated port numbers is not)-.1 F
(directly accessible to a user)72 550.8 Q(.)-.55 E 1.767 -.8(To s)97
566.4 T .167
(implify local address binding in the Internet domain the notion of a `)
.8 F(`wildcard')-.74 E 2.668('a)-.74 G .168(ddress has been)-2.668 F
(pro)72 578.4 Q 2.877(vided. When)-.15 F .377
(an address is speci\214ed as IN)2.877 F .377
(ADDR_ANY \(a manifest constant de\214ned in <netinet/in.h>\),)-.35 F
.467(the system interprets the address as `)72 590.4 R(`an)-.74 E 2.968
(yv)-.15 G .468(alid address')-3.218 F 2.968('. F)-.74 F .468(or e)-.15
F .468(xample, to bind a speci\214c port number to a)-.15 F(sock)72
602.4 Q(et, b)-.1 E(ut lea)-.2 E .3 -.15(ve t)-.2 H
(he local address unspeci\214ed, the follo).15 E
(wing code might be used:)-.25 E EP
%%Page: 30 30
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-30 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E(#include <sys/types.h>)108 84 Q
(#include <netinet/in.h>)108 96 Q(...)110.5 108 Q
(struct sockaddr_in sin;)108 120 Q(...)110.5 132 Q 2.5(s=s)108 144 S
(ock)-2.5 E(et\(AF_INET)-.1 E 2.5(,S)-.74 G(OCK_STREAM, 0\);)-2.5 E
(sin.sin_f)108 156 Q(amily = AF_INET)-.1 E(;)-.55 E(sin.sin_addr)108 168
Q(.s_addr = htonl\(IN)-.55 E(ADDR_ANY\);)-.35 E
(sin.sin_port = htons\(MYPOR)108 180 Q(T\);)-.6 E
(bind\(s, \(struct sockaddr *\) &sin, sizeof \(sin\)\);)108 192 Q(Sock)
72 210 Q .829(ets with wildcarded local addresses may recei)-.1 F 1.129
-.15(ve m)-.25 H .828(essages directed to the speci\214ed port number)
.15 F 3.328(,a)-.4 G(nd)-3.328 E .029(sent to an)72 222 R 2.529(yo)-.15
G 2.529(ft)-2.529 G .029(he possible addresses assigned to a host.)
-2.529 F -.15(Fo)5.03 G 2.53(re).15 G .03
(xample, if a host has addresses 128.32.0.4 and)-2.68 F .339
(10.0.0.78, and a sock)72 234 R .339(et is bound as abo)-.1 F -.15(ve)
-.15 G 2.839(,t).15 G .339
(he process will be able to accept connection requests which are)-2.839
F 1.073(addressed to 128.32.0.4 or 10.0.0.78.)72 246 R 1.073(If a serv)
6.073 F 1.073(er process wished to only allo)-.15 F 3.573(wh)-.25 G
1.073(osts on a gi)-3.573 F -.15(ve)-.25 G 3.573(nn).15 G(etw)-3.573 E
(ork)-.1 E(connect to it, it w)72 258 Q
(ould bind the address of the host on the appropriate netw)-.1 E(ork.)
-.1 E .245(In a similar f)97 273.6 R .244(ashion, a local port may be l\
eft unspeci\214ed \(speci\214ed as zero\), in which case the system)-.1
F .35(will select an appropriate port number for it.)72 285.6 R .351
(This shortcut will w)5.35 F .351
(ork both in the Internet and NS domains.)-.1 F -.15(Fo)72 297.6 S 2.5
(re).15 G(xample, to bind a speci\214c local address to a sock)-2.65 E
(et, b)-.1 E(ut to lea)-.2 E .3 -.15(ve t)-.2 H
(he local port number unspeci\214ed:).15 E
(hp = gethostbyname\(hostname\);)108 315.6 Q(if \(hp == NULL\) {)108
327.6 Q(...)133 339.6 Q(})108 351.6 Q(bcop)108 363.6 Q(y\(hp->h_addr)-.1
E 2.5(,\()-.4 G(char *\) sin.sin_addr)-2.5 E 2.5(,h)-.4 G
(p->h_length\);)-2.5 E(sin.sin_port = htons\(0\);)108 375.6 Q
(bind\(s, \(struct sockaddr *\) &sin, sizeof \(sin\)\);)108 387.6 Q .289
(The system selects the local port number based on tw)72 405.6 R 2.789
(oc)-.1 G 2.789(riteria. The)-2.789 F .289
(\214rst is that on 4BSD systems, Internet)2.789 F .909(ports belo)72
417.6 R 3.409(wI)-.25 G(PPOR)-3.409 E(T_RESER)-.6 E .909
(VED \(1024\) \(for the Xerox domain, 0 through 3000\) are reserv)-.8 F
.91(ed for pri)-.15 F(vi-)-.25 E(le)72 429.6 Q .272
(ged users \(i.e., the super user\); Internet ports abo)-.15 F .571 -.15
(ve I)-.15 H(PPOR).15 E(T_USERRESER)-.6 E .271(VED \(50000\) are reserv)
-.8 F .271(ed for)-.15 F(non-pri)72 441.6 Q(vile)-.25 E .306(ged serv)
-.15 F 2.806(ers. The)-.15 F .307(second is that the port number is not\
 currently bound to some other sock)2.806 F 2.807(et. In)-.1 F .136
(order to \214nd a free Internet port number in the pri)72 453.6 R(vile)
-.25 E .136(ged range the)-.15 F/F1 10/Times-Italic@0 SF(rr)2.636 E
(esvport)-.37 E F0 .135(library routine may be used as)2.636 F(follo)72
465.6 Q(ws to return a stream sock)-.25 E(et in with a pri)-.1 E(vile)
-.25 E(ged port number:)-.15 E(int lport = IPPOR)108 483.6 Q(T_RESER)-.6
E(VED \255 1;)-.8 E(int s;)108 495.6 Q(...)108 507.6 Q 2.5(s=r)108 519.6
S(resvport\(&lport\);)-2.5 E(if \(s < 0\) {)108 531.6 Q
(if \(errno == EA)133 543.6 Q(GAIN\))-.4 E(fprintf\(stderr)158 555.6 Q
2.5(,")-.4 G(sock)-2.5 E(et: all ports in use\\n"\);)-.1 E(else)133
567.6 Q(perror\("rresvport: sock)158 579.6 Q(et"\);)-.1 E(...)133 591.6
Q(})108 603.6 Q .093(The restriction on allocating ports w)72 621.6 R
.093(as done to allo)-.1 F 2.593(wp)-.25 G .093(rocesses e)-2.593 F -.15
(xe)-.15 G .093(cuting in a `).15 F(`secure')-.74 E 2.593('e)-.74 G -.4
(nv)-2.593 G .094(ironment to per).4 F(-)-.2 E 1.267
(form authentication based on the originating address and port number)72
633.6 R 6.266(.F)-.55 G 1.266(or e)-6.416 F 1.266(xample, the)-.15 F F1
(rlo)3.766 E(gin)-.1 E F0 1.266(\(1\) com-)B .72(mand allo)72 645.6 R
.72(ws users to log in across a netw)-.25 F .721(ork without being ask)
-.1 F .721(ed for a passw)-.1 F .721(ord, if tw)-.1 F 3.221(oc)-.1 G
.721(onditions hold:)-3.221 F .744(First, the name of the system the us\
er is logging in from is in the \214le)72 657.6 R F1(/etc/hosts.equiv)
3.244 E F0 .743(on the system he is)3.244 F .521
(logging in to \(or the system name and the user name are in the user')
72 669.6 R(s)-.55 E F1(.rhosts)3.021 E F0 .521(\214le in the user')3.021
F 3.021(sh)-.55 G .521(ome direc-)-3.021 F 1.534
(tory\), and second, that the user')72 681.6 R 4.034(sr)-.55 G 1.534
(login process is coming from a pri)-4.034 F(vile)-.25 E 1.533
(ged port on the machine from)-.15 F .397(which he is logging.)72 693.6
R .398(The port number and netw)5.397 F .398
(ork address of the machine from which the user is logging)-.1 F
(in can be determined either by the)72 705.6 Q F1(fr)2.5 E(om)-.45 E F0
(result of the)2.5 E F1(accept)2.5 E F0(call, or from the)2.5 E F1 -.1
(ge)2.5 G(tpeername).1 E F0(call.)2.5 E EP
%%Page: 31 31
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-31)-.45 F .137(In certain cases the algorithm used by t\
he system in selecting port numbers is unsuitable for an appli-)97 84 R
2.94(cation. This)72 96 R .44
(is because associations are created in a tw)2.94 F 2.941(os)-.1 G .441
(tep process.)-2.941 F -.15(Fo)5.441 G 2.941(re).15 G .441
(xample, the Internet \214le trans-)-3.091 F .11(fer protocol, FTP)72
108 R 2.61(,s)-1.11 G .11(peci\214es that data connections must al)-2.61
F -.1(wa)-.1 G .11(ys originate from the same local port.).1 F(Ho)5.11 E
(we)-.25 E -.15(ve)-.25 G -.4(r,).15 G 1.542
(duplicate associations are a)72 120 R -.2(vo)-.2 G 1.542
(ided by connecting to dif).2 F 1.542(ferent foreign ports.)-.25 F 1.542
(In this situation the system)6.542 F -.1(wo)72 132 S .44(uld disallo).1
F 2.94(wb)-.25 G .44
(inding the same local address and port number to a sock)-2.94 F .44
(et if a pre)-.1 F .44(vious data connection')-.25 F(s)-.55 E(sock)72
144 Q .166(et still e)-.1 F 2.667(xisted. T)-.15 F 2.667(oo)-.8 G -.15
(ve)-2.817 G .167(rride the def).15 F .167
(ault port selection algorithm, an option call must be performed prior)
-.1 F(to address binding:)72 156 Q(...)110.5 174 Q 11.94(int on)108 186
R 2.5(=1)2.5 G(;)-2.5 E(...)110.5 198 Q(setsock)108 210 Q
(opt\(s, SOL_SOCKET)-.1 E 2.5(,S)-.74 G
(O_REUSEADDR, &on, sizeof\(on\)\);)-2.5 E
(bind\(s, \(struct sockaddr *\) &sin, sizeof \(sin\)\);)108 222 Q -.4
(Wi)72 240 S 1.374(th the abo).4 F 1.674 -.15(ve c)-.15 H 1.373
(all, local addresses may be bound which are already in use.).15 F 1.373
(This does not violate the)6.373 F 1.296(uniqueness requirement as the \
system still checks at connect time to be sure an)72 252 R 3.796(yo)-.15
G 1.296(ther sock)-3.796 F 1.296(ets with the)-.1 F .005
(same local address and port do not ha)72 264 R .305 -.15(ve t)-.2 H
.005(he same foreign address and port.).15 F .005
(If the association already e)5.005 F(xists,)-.15 E .219
(the error EADDRINUSE is returned.)72 276 R 2.719(Ar)5.219 G .219
(elated sock)-2.719 F .219(et option, SO_REUSEPOR)-.1 F 1.699 -.74(T, w)
-.6 H .22(hich allo).74 F .22(ws completely)-.25 F
(duplicate bindings, is described in the IP multicasting section.)72 288
Q/F1 10/Times-Bold@0 SF 2.5(5.8. Sock)72 312 R(et Options)-.1 E F0 .466
(It is possible to set and get a number of options on sock)97 327.6 R
.466(ets via the)-.1 F/F2 10/Times-Italic@0 SF(setsoc)2.966 E -.1(ko)-.2
G(pt).1 E F0(and)2.966 E F2 -.1(ge)2.966 G(tsoc).1 E -.1(ko)-.2 G(pt).1
E F0(system)2.966 E 3.622(calls. These)72 339.6 R 1.123
(options include such things as marking a sock)3.623 F 1.123
(et for broadcasting, not to route, to linger on)-.1 F .319(close, etc.)
72 351.6 R .318
(In addition, there are protocol-speci\214c options for IP and TCP)5.319
F 2.818(,a)-1.11 G 2.818(sd)-2.818 G .318(escribed in)-2.818 F F2(ip)
2.818 E F0(\(4\),)A F2(tcp)2.818 E F0 .318(\(4\), and)B
(in the section on multicasting belo)72 363.6 Q -.65(w.)-.25 G
(The general forms of the calls are:)97 379.2 Q(setsock)108 397.2 Q
(opt\(s, le)-.1 E -.15(ve)-.25 G(l, optname, optv).15 E(al, optlen\);)
-.25 E(and)72 415.2 Q(getsock)108 433.2 Q(opt\(s, le)-.1 E -.15(ve)-.25
G(l, optname, optv).15 E(al, optlen\);)-.25 E .294
(The parameters to the calls are as follo)97 454.8 R(ws:)-.25 E F2(s)
2.794 E F0 .294(is the sock)2.794 F .295
(et on which the option is to be applied.)-.1 F F2(Le)5.295 E(vel)-.15 E
F0 .826(speci\214es the protocol layer on which the option is to be app\
lied; in most cases this is the `)72 466.8 R(`sock)-.74 E .825(et le)-.1
F -.15(ve)-.25 G(l').15 E(',)-.74 E .587
(indicated by the symbolic constant SOL_SOCKET)72 478.8 R 3.087(,d)-.74
G .587(e\214ned in)-3.087 F F2(<sys/soc)3.087 E -.1(ke)-.2 G(t.h>.).1 E
F0 .587(The actual option is speci-)5.587 F .34(\214ed in)72 490.8 R F2
(optname)2.84 E F0 2.84(,a)C .34
(nd is a symbolic constant also de\214ned in)-2.84 F F2(<sys/soc)2.839 E
-.1(ke)-.2 G(t.h>).1 E F0(.)A F2(Optval)5.339 E F0(and)2.839 E F2
(Optlen)2.839 E F0 .339(point to the)2.839 F -.25(va)72 502.8 S .304(lu\
e of the option \(in most cases, whether the option is to be turned on \
or of).25 F .305(f\), and the length of the v)-.25 F(alue)-.25 E .385
(of the option, respecti)72 514.8 R -.15(ve)-.25 G(ly).15 E 5.384(.F)
-.65 G(or)-5.534 E F2 -.1(ge)2.884 G(tsoc).1 E -.1(ko)-.2 G(pt).1 E F0
(,)A F2(optlen)2.884 E F0 .384(is a v)2.884 F .384
(alue-result parameter)-.25 F 2.884(,i)-.4 G .384
(nitially set to the size of the)-2.884 F(storage area pointed to by)72
526.8 Q F2(optval)2.5 E F0 2.5(,a)C(nd modi\214ed upon return to indica\
te the actual amount of storage used.)-2.5 E 1.164(An e)97 542.4 R 1.164
(xample should help clarify things.)-.15 F 1.165
(It is sometimes useful to determine the type \(e.g., stream,)6.165 F
1.136(datagram, etc.\))72 554.4 R 1.136(of an e)6.136 F 1.136
(xisting sock)-.15 F 1.135(et; programs under)-.1 F F2(inetd)3.635 E F0
1.135(\(described belo)3.635 F 1.135(w\) may need to perform this)-.25 F
2.5(task. This)72 566.4 R(can be accomplished as follo)2.5 E
(ws via the SO_TYPE sock)-.25 E(et option and the)-.1 E F2 -.1(ge)2.5 G
(tsoc).1 E -.1(ko)-.2 G(pt).1 E F0(call:)2.5 E(#include <sys/types.h>)
108 584.4 Q(#include <sys/sock)108 596.4 Q(et.h>)-.1 E(int type, size;)
108 620.4 Q(size = sizeof \(int\);)108 644.4 Q(if \(getsock)108 668.4 Q
(opt\(s, SOL_SOCKET)-.1 E 2.5(,S)-.74 G
(O_TYPE, \(char *\) &type, &size\) < 0\) {)-2.5 E(...)133 680.4 Q(})108
692.4 Q .608(After the)72 710.4 R F2 -.1(ge)3.109 G(tsoc).1 E -.1(ko)-.2
G(pt).1 E F0(call,)3.109 E F2(type)3.109 E F0 .609(will be set to the v)
3.109 F .609(alue of the sock)-.25 F .609(et type, as de\214ned in)-.1 F
F2(<sys/soc)3.109 E -.1(ke)-.2 G(t.h>).1 E F0 5.609(.I)C(f,)-5.609 E
4.55(for e)72 722.4 R 4.55(xample, the sock)-.15 F 4.55
(et were a datagram sock)-.1 F(et,)-.1 E F2(type)7.05 E F0 -.1(wo)7.05 G
4.55(uld ha).1 F 4.85 -.15(ve t)-.2 H 4.55(he v).15 F 4.55
(alue corresponding to)-.25 F EP
%%Page: 32 32
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-32 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E(SOCK_DGRAM.)72 84 Q/F1 10/Times-Bold@0 SF 2.5
(5.9. Br)72 108 R(oadcasting and determining netw)-.18 E
(ork con\214guration)-.1 E F0 .416(By using a datagram sock)97 123.6 R
.416(et, it is possible to send broadcast pack)-.1 F .416(ets on man)-.1
F 2.917(yn)-.15 G(etw)-2.917 E .417(orks supported by)-.1 F .652
(the system.)72 135.6 R .652(The netw)5.652 F .652
(ork itself must support broadcast; the system pro)-.1 F .652
(vides no simulation of broadcast in)-.15 F(softw)72 147.6 Q 3.276
(are. Broadcast)-.1 F .776(messages can place a high load on a netw)
3.276 F .776(ork since the)-.1 F 3.276(yf)-.15 G .776(orce e)-3.276 F
-.15(ve)-.25 G .776(ry host on the net-).15 F -.1(wo)72 159.6 S 1.756
(rk to service them.).1 F(Consequently)6.756 E 4.256(,t)-.65 G 1.755
(he ability to send broadcast pack)-4.256 F 1.755
(ets has been limited to sock)-.1 F(ets)-.1 E .062(which are e)72 171.6
R .062(xplicitly mark)-.15 F .062(ed as allo)-.1 F .062
(wing broadcasting.)-.25 F .063
(Broadcast is typically used for one of tw)5.062 F 2.563(or)-.1 G .063
(easons: it)-2.563 F .613
(is desired to \214nd a resource on a local netw)72 183.6 R .613
(ork without prior kno)-.1 F .612
(wledge of its address, or important func-)-.25 F(tions such as routing\
 require that information be sent to all accessible neighbors.)72 195.6
Q .122(Multicasting is an alternati)97 211.2 R .422 -.15(ve t)-.25 H
2.622(ob).15 G 2.623(roadcasting. Setting)-2.622 F .123
(up IP multicast sock)2.623 F .123(ets is described in the ne)-.1 F(xt)
-.15 E(section.)72 223.2 Q 1.6 -.8(To s)97 238.8 T
(end a broadcast message, a datagram sock).8 E(et should be created:)-.1
E 2.5(s=s)108 256.8 S(ock)-2.5 E(et\(AF_INET)-.1 E 2.5(,S)-.74 G
(OCK_DGRAM, 0\);)-2.5 E(or)72 274.8 Q 2.5(s=s)108 292.8 S(ock)-2.5 E
(et\(AF_NS, SOCK_DGRAM, 0\);)-.1 E(The sock)72 310.8 Q(et is mark)-.1 E
(ed as allo)-.1 E(wing broadcasting,)-.25 E 11.94(int on)108 328.8 R 2.5
(=1)2.5 G(;)-2.5 E(setsock)108 352.8 Q(opt\(s, SOL_SOCKET)-.1 E 2.5(,S)
-.74 G(O_BR)-2.5 E -.35(OA)-.4 G(DCAST).35 E 2.5(,&)-.74 G
(on, sizeof \(on\)\);)-2.5 E
(and at least a port number should be bound to the sock)72 370.8 Q(et:)
-.1 E(sin.sin_f)108 388.8 Q(amily = AF_INET)-.1 E(;)-.55 E(sin.sin_addr)
108 400.8 Q(.s_addr = htonl\(IN)-.55 E(ADDR_ANY\);)-.35 E
(sin.sin_port = htons\(MYPOR)108 412.8 Q(T\);)-.6 E
(bind\(s, \(struct sockaddr *\) &sin, sizeof \(sin\)\);)108 424.8 Q(or)
72 442.8 Q 2.5(,f)-.4 G(or the NS domain,)-2.5 E(sns.sns_f)108 460.8 Q
(amily = AF_NS;)-.1 E(netnum = htonl\(net\);)108 472.8 Q(sns.sns_addr)
108 484.8 Q
(.x_net = *\(union ns_net *\) &netnum; /* insert net number */)-.55 E
(sns.sns_addr)108 496.8 Q(.x_port = htons\(MYPOR)-.55 E(T\);)-.6 E
(bind\(s, \(struct sockaddr *\) &sns, sizeof \(sns\)\);)108 508.8 Q .275
(The destination address of the message to be broadcast depends on the \
netw)72 526.8 R .275(ork\(s\) on which the message is)-.1 F .326
(to be broadcast.)72 538.8 R .327(The Internet domain supports a shorth\
and notation for broadcast on the local netw)5.327 F .327(ork, the)-.1 F
1.959(address IN)72 550.8 R(ADDR_BR)-.35 E -.35(OA)-.4 G 1.959
(DCAST \(de\214ned in <).35 F/F2 10/Times-Italic@0 SF(netinet/in.h)A F0
4.458(>. T)B 4.458(od)-.8 G 1.958
(etermine the list of addresses for all)-4.458 F .749
(reachable neighbors requires kno)72 562.8 R .749(wledge of the netw)
-.25 F .749(orks to which the host is connected.)-.1 F .75
(Since this infor)5.75 F(-)-.2 E .012
(mation should be obtained in a host-independent f)72 574.8 R .012
(ashion and may be impossible to deri)-.1 F -.15(ve)-.25 G 2.512(,4).15
G .012(.4BSD pro)-2.512 F(vides)-.15 E 3.972(am)72 586.8 S 1.472
(ethod of retrie)-3.972 F 1.473
(ving this information from the system data structures.)-.25 F 1.473
(The SIOCGIFCONF)6.473 F F2(ioctl)3.973 E F0(call)3.973 E .306
(returns the interf)72 598.8 R .306
(ace con\214guration of a host in the form of a single)-.1 F F2(ifconf)
2.805 E F0 .305(structure; this structure contains a)2.805 F -.74(``)72
610.8 S .14(data area').74 F 2.64('w)-.74 G .14
(hich is made up of an array of of)-2.64 F F2(ifr)2.64 E(eq)-.37 E F0
.14(structures, one for each netw)2.64 F .14(ork interf)-.1 F .14
(ace to which the)-.1 F(host is connected.)72 622.8 Q
(These structures are de\214ned in)5 E F2(<net/if)2.5 E(.h>)-.15 E F0
(as follo)2.5 E(ws:)-.25 E EP
%%Page: 33 33
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-33)-.45 F(struct ifconf {)108 84 Q 22.94(int ifc_len;)
144 96 R(/* size of associated b)149.45 E(uf)-.2 E(fer */)-.25 E
(union {)144 108 Q 3.51(caddr_t ifcu_b)180 120 R(uf;)-.2 E 11.28
(struct ifreq)180 132 R(*ifcu_req;)2.5 E 2.5(}i)144 144 S(fc_ifcu;)-2.5
E(};)108 156 Q 4.06(#de\214ne ifc_b)108 180 R 4.82(uf ifc_ifcu.ifcu_b)
-.2 F 110.22(uf /*)-.2 F -.2(bu)2.5 G -.25(ff).2 G(er address */).25 E
4.06(#de\214ne ifc_req)108 192 R 110.58(ifc_ifcu.ifcu_req /*)7.68 F
(array of structures returned */)2.5 E 4.06(#de\214ne IFN)108 216 R
22.63(AMSIZ 16)-.35 F(struct ifreq {)108 240 Q 16.29(char ifr_name[IFN)
144 252 R 85.09(AMSIZ]; /*)-.35 F(if name, e.g. "en0" */)2.5 E(union {)
144 264 Q 11.28(struct sockaddr)180 276 R(ifru_addr;)2.5 E 11.28
(struct sockaddr)180 288 R(ifru_dstaddr;)2.5 E 11.28(struct sockaddr)180
300 R(ifru_broadaddr;)2.5 E 13.5(short ifru_\215ags;)180 312 R 3.51
(caddr_t ifru_data;)180 324 R 2.5(}i)144 336 S(fr_ifru;)-2.5 E(};)108
348 Q 2.5(#de\214ne ifr_addr)108 372 R 25.27(ifr_ifru.ifru_addr /*)27.77
F(address */)2.5 E 2.5(#de\214ne ifr_dstaddr)108 384 R 13.6
(ifr_ifru.ifru_dstaddr /*)16.1 F(other end of p-to-p link */)2.5 E 2.5
(#de\214ne ifr_broadaddr ifr_ifru.ifru_broadaddr /*)108 396 R
(broadcast address */)2.5 E 2.5(#de\214ne ifr_\215ags)108 408 R 24.15
(ifr_ifru.ifru_\215ags /*)26.65 F(\215ags */)2.5 E 2.5
(#de\214ne ifr_data)108 420 R 26.38(ifr_ifru.ifru_data /*)28.88 F
(for use by interf)2.5 E(ace */)-.1 E
(The actual call which obtains the interf)72 438 Q
(ace con\214guration is)-.1 E(struct ifconf ifc;)108 456 Q(char b)108
468 Q(uf[B)-.2 E(UFSIZ];)-.1 E(ifc.ifc_len = sizeof \(b)108 492 Q(uf\);)
-.2 E(ifc.ifc_b)108 504 Q(uf = b)-.2 E(uf;)-.2 E
(if \(ioctl\(s, SIOCGIFCONF)108 516 Q 2.5(,\()-.8 G
(char *\) &ifc\) < 0\) {)-2.5 E(...)133 528 Q(})108 540 Q 1.31
(After this call)72 558 R/F1 10/Times-Italic@0 SF -.2(bu)3.81 G(f).2 E
F0 1.31(will contain one)3.81 F F1(ifr)3.81 E(eq)-.37 E F0 1.309
(structure for each netw)3.81 F 1.309
(ork to which the host is connected, and)-.1 F F1(ifc.ifc_len)72 570 Q
F0(will ha)2.5 E .3 -.15(ve b)-.2 H
(een modi\214ed to re\215ect the number of bytes used by the).15 E F1
(ifr)2.5 E(eq)-.37 E F0(structures.)2.5 E -.15(Fo)97 585.6 S 3.05(re).15
G .55(ach structure there e)-3.05 F .551(xists a set of `)-.15 F
(`interf)-.74 E .551(ace \215ags')-.1 F 3.051('w)-.74 G .551
(hich tell whether the netw)-3.051 F .551(ork correspond-)-.1 F 1.022
(ing to that interf)72 597.6 R 1.021(ace is up or do)-.1 F 1.021
(wn, point to point or broadcast, etc.)-.25 F 1.021(The SIOCGIFFLA)6.021
F(GS)-.4 E F1(ioctl)3.521 E F0(retrie)3.521 E -.15(ve)-.25 G(s).15 E
(these \215ags for an interf)72 609.6 Q(ace speci\214ed by an)-.1 E F1
(ifr)2.5 E(eq)-.37 E F0(structure as follo)2.5 E(ws:)-.25 E EP
%%Page: 34 34
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-34 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E(struct ifreq *ifr;)108 84 Q(ifr = ifc.ifc_req;)108
108 Q
(for \(n = ifc.ifc_len / sizeof \(struct ifreq\); --n >= 0; ifr++\) {)
108 132 Q(/*)133 144 Q 2.5(*W)135.5 156 S 2.5(em)-3.3 G
(ust be careful that we don')-2.5 E 2.5(tu)-.18 G(se an interf)-2.5 E
(ace)-.1 E 2.5(*d)135.5 168 S -2.2 -.25(ev o)-2.5 H(ted to an address f)
.25 E(amily other than those intended;)-.1 E 2.5(*i)135.5 180 S 2.5(fw)
-2.5 G 2.5(ew)-2.5 G(ere interested in NS interf)-2.5 E(aces, the)-.1 E
2.5(*A)135.5 192 S(F_INET w)-2.5 E(ould be AF_NS.)-.1 E(*/)135.5 204 Q
(if \(ifr)133 216 Q(->ifr_addr)-.2 E(.sa_f)-.55 E(amily != AF_INET\))-.1
E(continue;)158 228 Q(if \(ioctl\(s, SIOCGIFFLA)133 240 Q
(GS, \(char *\) ifr\) < 0\) {)-.4 E(...)158 252 Q(})133 264 Q(/*)133 276
Q 2.5(*S)135.5 288 S(kip boring cases.)-2.5 E(*/)135.5 300 Q(if \(\(ifr)
133 312 Q(->ifr_\215ags & IFF_UP\) == 0 ||)-.2 E(\(ifr)143 324 Q
(->ifr_\215ags & IFF_LOOPB)-.2 E -.4(AC)-.35 G(K\) ||).4 E(\(ifr)143 336
Q(->ifr_\215ags & \(IFF_BR)-.2 E -.35(OA)-.4 G(DCAST | IFF_POINTT).35 E
(OPOINT\)\) == 0\))-.18 E(continue;)158 348 Q .448(Once the \215ags ha)
97 369.6 R .748 -.15(ve b)-.2 H .448
(een obtained, the broadcast address must be obtained.).15 F .448
(In the case of broadcast)5.448 F(netw)72 381.6 Q .803
(orks this is done via the SIOCGIFBRD)-.1 F(ADDR)-.4 E/F1 10
/Times-Italic@0 SF(ioctl)3.303 E F0 3.303(,w)C .803
(hile for point-to-point netw)-3.303 F .802(orks the address of)-.1 F
(the destination host is obtained with SIOCGIFDST)72 393.6 Q(ADDR.)-.93
E(struct sockaddr dst;)108 411.6 Q(if \(ifr)108 435.6 Q
(->ifr_\215ags & IFF_POINTT)-.2 E(OPOINT\) {)-.18 E
(if \(ioctl\(s, SIOCGIFDST)133 447.6 Q(ADDR, \(char *\) ifr\) < 0\) {)
-.93 E(...)158 459.6 Q(})133 471.6 Q(bcop)133 483.6 Q(y\(\(char *\) ifr)
-.1 E(->ifr_dstaddr)-.2 E 2.5(,\()-.4 G(char *\) &dst, sizeof \(ifr)-2.5
E(->ifr_dstaddr\)\);)-.2 E 2.5(}e)108 495.6 S(lse if \(ifr)-2.5 E
(->ifr_\215ags & IFF_BR)-.2 E -.35(OA)-.4 G(DCAST\) {).35 E
(if \(ioctl\(s, SIOCGIFBRD)133 507.6 Q(ADDR, \(char *\) ifr\) < 0\) {)
-.4 E(...)158 519.6 Q(})133 531.6 Q(bcop)133 543.6 Q(y\(\(char *\) ifr)
-.1 E(->ifr_broadaddr)-.2 E 2.5(,\()-.4 G(char *\) &dst, sizeof \(ifr)
-2.5 E(->ifr_broadaddr\)\);)-.2 E(})108 555.6 Q 1.797
(After the appropriate)97 577.2 R F1(ioctl)4.298 E F0 2.898 -.55('s h)D
-2.25 -.2(av e).55 H 1.798
(obtained the broadcast or destination address \(no)4.498 F 4.298(wi)
-.25 G(n)-4.298 E F1(dst)4.298 E F0 1.798(\), the)B F1(sendto)72 589.2 Q
F0(call may be used:)2.5 E(sendto\(s, b)133 607.2 Q(uf, b)-.2 E
(u\215en, 0, \(struct sockaddr *\)&dst, sizeof \(dst\)\);)-.2 E(})108
619.2 Q 1.148(In the abo)72 637.2 R 1.448 -.15(ve l)-.15 H 1.148
(oop one).15 F F1(sendto)3.648 E F0 1.148(occurs for e)3.648 F -.15(ve)
-.25 G 1.148(ry interf).15 F 1.148
(ace to which the host is connected that supports the)-.1 F .268
(notion of broadcast or point-to-point addressing.)72 649.2 R .268
(If a process only wished to send broadcast messages on a)5.268 F(gi)72
661.2 Q -.15(ve)-.25 G 2.959(nn).15 G(etw)-2.959 E .459
(ork, code similar to that outlined abo)-.1 F .759 -.15(ve w)-.15 H .459
(ould be used, b).05 F .459(ut the loop w)-.2 F .459
(ould need to \214nd the cor)-.1 F(-)-.2 E(rect destination address.)72
673.2 Q(Recei)97 688.8 Q -.15(ve)-.25 G 3.64(db).15 G 1.14(roadcast mes\
sages contain the senders address and port, as datagram sock)-3.64 F
1.14(ets are bound)-.1 F(before a message is allo)72 700.8 Q
(wed to go out.)-.25 E EP
%%Page: 35 35
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-35)-.45 F/F1 10/Times-Bold@0 SF 2.5(5.10. IP)72 84 R
(Multicasting)2.5 E F0 .759(IP multicasting is the transmission of an I\
P datagram to a "host group", a set of zero or more hosts)97 99.6 R .388
(identi\214ed by a single IP destination address.)72 111.6 R 2.888(Am)
5.388 G .388(ulticast datagram is deli)-2.888 F -.15(ve)-.25 G .389
(red to all members of its desti-).15 F .343
(nation host group with the same "best-ef)72 123.6 R .343
(forts" reliability as re)-.25 F .342
(gular unicast IP datagrams, i.e., the datagram)-.15 F 1.013
(is not guaranteed to arri)72 135.6 R 1.313 -.15(ve i)-.25 H 1.014(ntac\
t at all members of the destination group or in the same order relati)
.15 F 1.314 -.15(ve t)-.25 H(o).15 E(other datagrams.)72 147.6 Q 1.036(\
The membership of a host group is dynamic; that is, hosts may join and \
lea)97 163.2 R 1.335 -.15(ve g)-.2 H 1.035(roups at an).15 F 3.535(yt)
-.15 G(ime.)-3.535 E .349(There is no restriction on the location or nu\
mber of members in a host group.)72 175.2 R 2.85(Ah)5.35 G .35
(ost may be a member of)-2.85 F(more than one group at a time.)72 187.2
Q 2.5(Ah)5 G
(ost need not be a member of a group to send datagrams to it.)-2.5 E
2.714(Ah)97 202.8 S .214(ost group may be permanent or transient.)-2.714
F 2.713(Ap)5.214 G .213(ermanent group has a well-kno)-2.713 F .213
(wn, administrati)-.25 F -.15(ve)-.25 G(ly).15 E .92
(assigned IP address.)72 214.8 R .92(It is the address, not the members\
hip of the group, that is permanent; at an)5.92 F 3.42(yt)-.15 G .92
(ime a)-3.42 F .587(permanent group may ha)72 226.8 R .887 -.15(ve a)-.2
H .886 -.15(ny n).15 H .586(umber of members, e).15 F -.15(ve)-.25 G
3.086(nz).15 G 3.086(ero. Those)-3.086 F .586
(IP multicast addresses that are not)3.086 F(reserv)72 238.8 Q .133
(ed for permanent groups are a)-.15 F -.25(va)-.2 G .133
(ilable for dynamic assignment to transient groups which e).25 F .134
(xist only as)-.15 F(long as the)72 250.8 Q 2.5(yh)-.15 G -2.25 -.2
(av e)-2.5 H(members.)2.7 E .915
(In general, a host cannot assume that datagrams sent to an)97 266.4 R
3.415(yh)-.15 G .914(ost group address will reach only the)-3.415 F .123
(intended hosts, or that datagrams recei)72 278.4 R -.15(ve)-.25 G 2.623
(da).15 G 2.623(sam)-2.623 G .124
(ember of a transient host group are intended for the recipi-)-2.623 F
4.693(ent. Misdeli)72 290.4 R -.15(ve)-.25 G 2.193
(ry must be detected at a le).15 F -.15(ve)-.25 G 4.693(la).15 G(bo)
-4.693 E 2.493 -.15(ve I)-.15 H 4.413 -1.11(P, u).15 H 2.193
(sing higher)1.11 F(-le)-.2 E -.15(ve)-.25 G 4.693(li).15 G 2.192
(denti\214ers or authentication)-4.693 F(tok)72 302.4 Q 2.743
(ens. Information)-.1 F .244
(transmitted to a host group address should be encrypted or go)2.743 F
-.15(ve)-.15 G .244(rned by administrati).15 F -.15(ve)-.25 G
(routing controls if the sender is concerned about unw)72 314.4 Q
(anted listeners.)-.1 E 2.492
(IP multicasting is currently supported only on AF_INET sock)97 330 R
2.491(ets of type SOCK_DGRAM and)-.1 F(SOCK_RA)72 342 Q 2.471 -.92(W, a)
-.9 H .631(nd only on subnetw).92 F .631(orks for which the interf)-.1 F
.631(ace dri)-.1 F -.15(ve)-.25 G 3.131(rh).15 G .632
(as been modi\214ed to support multi-)-3.131 F(casting.)72 354 Q(The ne)
97 369.6 Q(xt subsections describe ho)-.15 E 2.5(wt)-.25 G 2.5(os)-2.5 G
(end and recei)-2.5 E .3 -.15(ve m)-.25 H(ulticast datagrams.).15 E F1
2.5(5.10.1. Sending)72 393.6 R(IP Multicast Datagrams)2.5 E F0 5.97 -.8
(To s)97 409.2 T 4.37(end a multicast datagram, specify an IP multicast\
 address in the range 224.0.0.0 to).8 F
(239.255.255.255 as the destination address in a)72 421.2 Q/F2 10
/Times-Italic@0 SF(sendto)2.5 E F0(\(2\) call.)A .664
(The de\214nitions required for the multicast-related sock)97 436.8 R
.665(et options are found in)-.1 F F2(<netinet/in.h>)3.165 E F0 5.665
(.A)C .665(ll IP)-5.665 F(addresses are passed in netw)72 448.8 Q
(ork byte-order)-.1 E(.)-.55 E .185(By def)97 464.4 R .185
(ault, IP multicast datagrams are sent with a time-to-li)-.1 F .485 -.15
(ve \()-.25 H .185(TTL\) of 1, which pre).15 F -.15(ve)-.25 G .185
(nts them from).15 F .7(being forw)72 476.4 R .7(arded be)-.1 F .7
(yond a single subnetw)-.15 F 3.201(ork. A)-.1 F(ne)3.201 E 3.201(ws)
-.25 G(ock)-3.201 E .701(et option allo)-.1 F .701
(ws the TTL for subsequent multi-)-.25 F(cast datagrams to be set to an)
72 488.4 Q 2.5(yv)-.15 G
(alue from 0 to 255, in order to control the scope of the multicasts:)
-2.75 E(u_char ttl;)108 506.4 Q(setsock)108 518.4 Q(opt\(sock, IPPR)-.1
E -1.88 -.4(OT O)-.4 H(_IP).4 E 2.5(,I)-1.11 G(P_MUL)-2.5 E
(TICAST_TTL, &ttl, sizeof\(ttl\)\);)-.92 E .352
(Multicast datagrams with a TTL of 0 will not be transmitted on an)72
536.4 R 2.851(ys)-.15 G .351(ubnet, b)-2.851 F .351(ut may be deli)-.2 F
-.15(ve)-.25 G .351(red locally if).15 F .985(the sending host belongs \
to the destination group and if multicast loopback has not been disable\
d on the)72 548.4 R .212(sending sock)72 560.4 R .212(et \(see belo)-.1
F 2.712(w\). Multicast)-.25 F .212
(datagrams with TTL greater than one may be deli)2.712 F -.15(ve)-.25 G
.211(red to more than).15 F .358(one subnet if there are one or more mu\
lticast routers attached to the \214rst-hop subnet.)72 572.4 R 1.958 -.8
(To p)5.358 H(ro).8 E .358(vide meaning-)-.15 F 1.021(ful scope control\
, the multicast routers support the notion of TTL "thresholds", which p\
re)72 584.4 R -.15(ve)-.25 G 1.02(nt datagrams).15 F .271
(with less than a certain TTL from tra)72 596.4 R -.15(ve)-.2 G .271
(rsing certain subnets.).15 F .272(The thresholds enforce the follo)
5.271 F .272(wing con)-.25 F -.15(ve)-.4 G(n-).15 E(tion:)72 608.4 Q .4
LW 380.35 618.9 195.65 618.9 DL 113.04(Scope Initial)195.65 628.4 R(TTL)
2.5 E 380.35 632.9 195.65 632.9 DL 380.35 634.9 195.65 634.9 DL
(restricted to the same host)195.65 644.4 Q(0)60.41 E
(restricted to the same subnet)195.65 656.4 Q(1)50.97 E
(restricted to the same site)195.65 668.4 Q(32)58.19 E
(restricted to the same re)195.65 680.4 Q 44.18(gion 64)-.15 F
(restricted to the same continent)195.65 692.4 Q(128)29.86 E 105.13
(unrestricted 255)195.65 704.4 R 380.35 708.9 195.65 708.9 DL 328.13
618.9 328.13 708.9 DL 4.148("Sites" and "re)72 724.4 R 4.147
(gions" are not strictly de\214ned, and sites may be further subdi)-.15
F 4.147(vided into smaller)-.25 F EP
%%Page: 36 36
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-36 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E(administrati)72 84 Q .3 -.15(ve u)-.25 H
(nits, as a local matter).15 E(.)-.55 E .253(An application may choose \
an initial TTL other than the ones listed abo)97 99.6 R -.15(ve)-.15 G
5.253(.F).15 G .253(or e)-5.403 F .254(xample, an applica-)-.15 F .951
(tion might perform an "e)72 111.6 R .951
(xpanding-ring search" for a netw)-.15 F .95
(ork resource by sending a multicast query)-.1 F 3.45<2c8c>-.65 G(rst)
-3.45 E 1.072(with a TTL of 0, and then with lar)72 123.6 R 1.072
(ger and lar)-.18 F 1.073(ger TTLs, until a reply is recei)-.18 F -.15
(ve)-.25 G 1.073(d, perhaps using the TTL).15 F
(sequence 0, 1, 2, 4, 8, 16, 32.)72 135.6 Q 2.661(The multicast router)
97 151.2 R/F1 10/Times-Italic@0 SF(mr)5.161 E(outed)-.45 E F0 2.661
(\(8\), refuses to forw)B 2.661(ard an)-.1 F 5.161(ym)-.15 G 2.661
(ulticast datagram with a destination)-5.161 F 1.341
(address between 224.0.0.0 and 224.0.0.255, inclusi)72 163.2 R -.15(ve)
-.25 G 3.841(,r).15 G -2.25 -.15(eg a)-3.841 H 1.341(rdless of its TTL.)
.15 F 1.342(This range of addresses is)6.342 F(reserv)72 175.2 Q .485
(ed for the use of routing protocols and other lo)-.15 F(w-le)-.25 E
-.15(ve)-.25 G 2.985(lt).15 G .485(opology disco)-2.985 F -.15(ve)-.15 G
.485(ry or maintenance protocols,).15 F(such as g)72 187.2 Q(ate)-.05 E
-.1(wa)-.25 G 2.5(yd).1 G(isco)-2.5 E -.15(ve)-.15 G
(ry and group membership reporting.).15 E .325
(The address 224.0.0.0 is guaranteed not to be assigned to an)97 202.8 R
2.825(yg)-.15 G .326(roup, and 224.0.0.1 is assigned to the)-2.825 F
1.173(permanent group of all IP hosts \(including g)72 214.8 R(ate)-.05
E -.1(wa)-.25 G 3.672(ys\). This).1 F 1.172
(is used to address all multicast hosts on the)3.672 F .036
(directly connected netw)72 226.8 R 2.536(ork. There)-.1 F .037
(is no multicast address \(or an)2.536 F 2.537(yo)-.15 G .037
(ther IP address\) for all hosts on the total)-2.537 F 3.12
(Internet. The)72 238.8 R .62(addresses of other well-kno)3.12 F .62
(wn, permanent groups are published in the "Assigned Numbers")-.25 F
(RFC, which is a)72 250.8 Q -.25(va)-.2 G(ilable from the InterNIC.).25
E .912(Each multicast transmission is sent from a single netw)97 266.4 R
.913(ork interf)-.1 F .913(ace, e)-.1 F -.15(ve)-.25 G 3.413(ni).15 G
3.413(ft)-3.413 G .913(he host has more than)-3.413 F .915
(one multicast-capable interf)72 278.4 R 3.415(ace. \(If)-.1 F .915
(the host is also serving as a multicast router)3.415 F 3.414(,am)-.4 G
.914(ulticast may be)-3.414 F F1(for)3.414 E(-)-.2 E(war)72 290.4 Q(ded)
-.37 E F0 .476(to interf)2.976 F .477
(aces other than originating interf)-.1 F .477(ace, pro)-.1 F .477
(vided that the TTL is greater than 1.\))-.15 F .477(The def)5.477 F
(ault)-.1 E(interf)72 302.4 Q 1.174
(ace to be used for multicasting is the primary netw)-.1 F 1.174
(ork interf)-.1 F 1.174(ace on the system.)-.1 F 3.674(As)6.174 G(ock)
-3.674 E 1.174(et option is)-.1 F -.2(av)72 314.4 S(ailable to o)-.05 E
-.15(ve)-.15 G(rride the def).15 E
(ault for subsequent transmissions from a gi)-.1 E -.15(ve)-.25 G 2.5
(ns).15 G(ock)-2.5 E(et:)-.1 E(struct in_addr addr;)108 332.4 Q(setsock)
108 344.4 Q(opt\(sock, IPPR)-.1 E -1.88 -.4(OT O)-.4 H(_IP).4 E 2.5(,I)
-1.11 G(P_MUL)-2.5 E(TICAST_IF)-.92 E 2.5(,&)-.8 G(addr)-2.5 E 2.5(,s)
-.4 G(izeof\(addr\)\);)-2.5 E .413
(where "addr" is the local IP address of the desired outgoing interf)72
362.4 R 2.913(ace. An)-.1 F .413(address of IN)2.913 F .414
(ADDR_ANY may)-.35 F 1.567(be used to re)72 374.4 R -.15(ve)-.25 G 1.567
(rt to the def).15 F 1.566(ault interf)-.1 F 4.066(ace. The)-.1 F 1.566
(local IP address of an interf)4.066 F 1.566
(ace can be obtained via the)-.1 F .833(SIOCGIFCONF ioctl.)72 386.4 R
2.433 -.8(To d)5.833 H .833(etermine if an interf).8 F .834
(ace supports multicasting, fetch the interf)-.1 F .834
(ace \215ags via the)-.1 F(SIOCGIFFLA)72 398.4 Q .675
(GS ioctl and see if the IFF_MUL)-.4 F .675(TICAST \215ag is set.)-.92 F
.675(\(Normal applications should not need)5.675 F .613(to use this opt\
ion; it is intended primarily for multicast routers and other system se\
rvices speci\214cally con-)72 410.4 R .56(cerned with internet topology)
72 422.4 R 3.059(.\) The)-.65 F .559(SIOCGIFCONF and SIOCGIFFLA)3.059 F
.559(GS ioctls are described in the pre-)-.4 F(vious section.)72 434.4 Q
.792(If a multicast datagram is sent to a group to which the sending ho\
st itself belongs \(on the outgoing)97 450 R(interf)72 462 Q .979
(ace\), a cop)-.1 F 3.479(yo)-.1 G 3.479(ft)-3.479 G .979
(he datagram is, by def)-3.479 F .979
(ault, looped back by the IP layer for local deli)-.1 F -.15(ve)-.25 G
(ry).15 E 5.978(.A)-.65 G(nother)-5.978 E(sock)72 474 Q(et option gi)-.1
E -.15(ve)-.25 G 2.5(st).15 G(he sender e)-2.5 E(xplicit control o)-.15
E -.15(ve)-.15 G 2.5(rw).15 G
(hether or not subsequent datagrams are looped back:)-2.5 E
(u_char loop;)108 492 Q(setsock)108 504 Q(opt\(sock, IPPR)-.1 E -1.88
-.4(OT O)-.4 H(_IP).4 E 2.5(,I)-1.11 G(P_MUL)-2.5 E(TICAST_LOOP)-.92 E
2.5(,&)-1.11 G(loop, sizeof\(loop\)\);)-2.5 E(where)72 522 Q F1(loop)
3.277 E F0 .777
(is set to 0 to disable loopback, and set to 1 to enable loopback.)3.277
F .778(This option impro)5.778 F -.15(ve)-.15 G 3.278(sp).15 G(erfor)
-3.278 E(-)-.2 E .333(mance for applications that may ha)72 534 R .633
-.15(ve n)-.2 H 2.833(om).15 G .332
(ore than one instance on a single host \(such as a router demon\),)
-2.833 F .247(by eliminating the o)72 546 R -.15(ve)-.15 G .247
(rhead of recei).15 F .247(ving their o)-.25 F .247(wn transmissions.)
-.25 F .248(It should generally not be used by appli-)5.248 F .067(cati\
ons for which there may be more than one instance on a single host \(su\
ch as a conferencing program\) or)72 558 R(for which the sender does no\
t belong to the destination group \(such as a time querying program\).)
72 570 Q 2.759(Am)97 585.6 S .259
(ulticast datagram sent with an initial TTL greater than 1 may be deli)
-2.759 F -.15(ve)-.25 G .26(red to the sending host on).15 F 2.556(ad)72
597.6 S(if)-2.556 E .056(ferent interf)-.25 F .056
(ace from that on which it w)-.1 F .056
(as sent, if the host belongs to the destination group on that other)-.1
F(interf)72 609.6 Q 2.5(ace. The)-.1 F
(loopback control option has no ef)2.5 E(fect on such deli)-.25 E -.15
(ve)-.25 G(ry).15 E(.)-.65 E/F2 10/Times-Bold@0 SF 2.5(5.10.2. Recei)72
633.6 R(ving IP Multicast Datagrams)-.1 E F0 .214
(Before a host can recei)97 649.2 R .514 -.15(ve I)-.25 H 2.714(Pm).15 G
.215
(ulticast datagrams, it must become a member of one or more IP multi-)
-2.714 F(cast groups.)72 661.2 Q 2.5(Ap)5 G
(rocess can ask the host to join a multicast group by using the follo)
-2.5 E(wing sock)-.25 E(et option:)-.1 E(struct ip_mreq mreq;)108 679.2
Q(setsock)108 691.2 Q(opt\(sock, IPPR)-.1 E -1.88 -.4(OT O)-.4 H(_IP).4
E 2.5(,I)-1.11 G(P_ADD_MEMBERSHIP)-2.5 E 2.5(,&)-1.11 G
(mreq, sizeof\(mreq\)\))-2.5 E(where "mreq" is the follo)72 709.2 Q
(wing structure:)-.25 E EP
%%Page: 37 37
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-37)-.45 F(struct ip_mreq {)108 84 Q
(struct in_addr imr_multiaddr; /*)118 96 Q/F1 10/Times-Italic@0 SF
(multicast gr)2.5 E(oup to join)-.45 E F0(*/)2.5 E
(struct in_addr imr_interf)118 108 Q(ace; /*)-.1 E F1
(interface to join on)2.5 E F0(*/)2.5 E(})108 120 Q(Ev)72 138 Q .73
(ery membership is associated with a single interf)-.15 F .729
(ace, and it is possible to join the same group on more)-.1 F .531
(than one interf)72 150 R 3.031(ace. "imr_interf)-.1 F .531
(ace" should be IN)-.1 F .532(ADDR_ANY to choose the def)-.35 F .532
(ault multicast interf)-.1 F .532(ace, or)-.1 F 5.233(one of the host')
72 162 R 7.733(sl)-.55 G 5.232
(ocal addresses to choose a particular \(multicast-capable\) interf)
-7.733 F 7.732(ace. Up)-.1 F(to)7.732 E(IP_MAX_MEMBERSHIPS \(currently \
20\) memberships may be added on a single sock)72 174 Q(et.)-.1 E 1.6
-.8(To d)97 189.6 T(rop a membership, use:).8 E(struct ip_mreq mreq;)108
207.6 Q(setsock)108 219.6 Q(opt\(sock, IPPR)-.1 E -1.88 -.4(OT O)-.4 H
(_IP).4 E 2.5(,I)-1.11 G(P_DR)-2.5 E(OP_MEMBERSHIP)-.4 E 2.5(,&)-1.11 G
(mreq, sizeof\(mreq\)\);)-2.5 E .444(where "mreq" contains the same v)72
237.6 R .444(alues as used to add the membership.)-.25 F .444
(The memberships associated with)5.444 F 3.231(as)72 249.6 S(ock)-3.231
E .731(et are also dropped when the sock)-.1 F .73
(et is closed or the process holding the sock)-.1 F .73(et is killed.)
-.1 F(Ho)5.73 E(we)-.25 E -.15(ve)-.25 G -.4(r,).15 G .26
(more than one sock)72 261.6 R .261(et may claim a membership in a part\
icular group, and the host will remain a member of)-.1 F
(that group until the last claim is dropped.)72 273.6 Q 2.867
(The memberships associated with a sock)97 289.2 R 2.866
(et do not necessarily determine which datagrams are)-.1 F(recei)72
301.2 Q -.15(ve)-.25 G 3.284(do).15 G 3.284(nt)-3.284 G .784(hat sock)
-3.284 F 3.284(et. Incoming)-.1 F .784(multicast pack)3.284 F .784
(ets are accepted by the k)-.1 F .784(ernel IP layer if an)-.1 F 3.285
(ys)-.15 G(ock)-3.285 E .785(et has)-.1 F .42
(claimed a membership in the destination group of the datagram; ho)72
313.2 R(we)-.25 E -.15(ve)-.25 G 1.22 -.4(r, d).15 H(eli).4 E -.15(ve)
-.25 G .42(ry of a multicast datagram).15 F .083(to a particular sock)72
325.2 R .083
(et is based on the destination port \(or protocol type, for ra)-.1 F
2.583(ws)-.15 G(ock)-2.583 E .084(ets\), just as with unicast)-.1 F
2.589(datagrams. T)72 337.2 R 2.589(or)-.8 G(ecei)-2.589 E .389 -.15
(ve m)-.25 H .089(ulticast datagrams sent to a particular port, it is n\
ecessary to bind to that local port,).15 F(lea)72 349.2 Q .586
(ving the local address unspeci\214ed \(i.e., IN)-.2 F 3.086
(ADDR_ANY\). T)-.35 F 3.086(or)-.8 G(ecei)-3.086 E .887 -.15(ve m)-.25 H
.587(ulticast datagrams sent to a par).15 F(-)-.2 E .006(ticular group \
and port, bind to the local port, with the local address set to the mul\
ticast group address.)72 361.2 R(Once)5.005 E
(bound to a multicast address, the sock)72 373.2 Q
(et cannot be used for sending data.)-.1 E .127(More than one process m\
ay bind to the same SOCK_DGRAM UDP port or the same multicast group)97
388.8 R(and port if the)72 400.8 Q F1(bind)2.5 E F0
(call is preceded by:)2.5 E(int on = 1;)108 418.8 Q(setsock)108 430.8 Q
(opt\(sock, SOL_SOCKET)-.1 E 2.5(,S)-.74 G(O_REUSEPOR)-2.5 E 1.48 -.74
(T, &)-.6 H(on, sizeof\(on\)\);).74 E .684
(All processes sharing the port must enable this option.)72 448.8 R(Ev)
5.683 E .683(ery incoming multicast or broadcast UDP data-)-.15 F .409
(gram destined to the shared port is deli)72 460.8 R -.15(ve)-.25 G .409
(red to all sock).15 F .41(ets bound to the port.)-.1 F -.15(Fo)5.41 G
2.91(rb).15 G(ackw)-2.91 E .41(ards compatibility)-.1 F .229
(reasons, this does not apply to incoming unicast datagrams.)72 472.8 R
.228(Unicast datagrams are ne)5.229 F -.15(ve)-.25 G 2.728(rd).15 G(eli)
-2.728 E -.15(ve)-.25 G .228(red to more).15 F(than one sock)72 484.8 Q
(et, re)-.1 E -.05(ga)-.15 G(rdless of ho).05 E 2.5(wm)-.25 G(an)-2.5 E
2.5(ys)-.15 G(ock)-2.5 E(ets are bound to the datagram')-.1 E 2.5(sd)
-.55 G(estination port.)-2.5 E 4.455<418c>97 500.4 S 1.955
(nal multicast-related e)-4.455 F 1.955(xtension is independent of IP:)
-.15 F(tw)6.955 E 4.455(on)-.1 G 2.455 -.25(ew i)-4.455 H 1.955
(octls, SIOCADDMUL).25 F 1.955(TI and)-.92 F(SIOCDELMUL)72 512.4 Q .49
(TI, are a)-.92 F -.25(va)-.2 G .49(ilable to add or delete link-le).25
F -.15(ve)-.25 G 2.99(l\().15 G .49
(e.g., Ethernet\) multicast addresses accepted by)-2.99 F 4.351(ap)72
524.4 S 1.851(articular interf)-4.351 F 4.351(ace. The)-.1 F 1.852
(address to be added or deleted is passed as a sockaddr structure of f)
4.351 F(amily)-.1 E(AF_UNSPEC, within the standard ifreq structure.)72
536.4 Q .51(These ioctls are for the use of protocols other than IP)97
552 R 3.01(,a)-1.11 G .51(nd require superuser pri)-3.01 F(vile)-.25 E
3.01(ges. A)-.15 F(link-le)3.01 E -.15(ve)-.25 G(l).15 E .556
(multicast address added via SIOCADDMUL)72 564 R .557
(TI is not automatically deleted when the sock)-.92 F .557
(et used to add it)-.1 F .604(goes a)72 576 R -.1(wa)-.15 G .604
(y; it must be e).1 F .603(xplicitly deleted.)-.15 F .603
(It is inadvisable to delete a link-le)5.603 F -.15(ve)-.25 G 3.103(la)
.15 G .603(ddress that may be in use)-3.103 F(by IP)72 588 Q(.)-1.11 E
/F2 10/Times-Bold@0 SF 2.5(5.10.3. Sample)72 612 R(Multicast Pr)2.5 E
(ogram)-.18 E F0 .283(The follo)97 627.6 R .283
(wing program sends or recei)-.25 F -.15(ve)-.25 G 2.783(sm).15 G .283
(ulticast pack)-2.783 F 2.783(ets. If)-.1 F(in)2.783 E -.2(vo)-.4 G -.1
(ke).2 G 2.783(dw).1 G .284(ith one ar)-2.783 F .284(gument, it sends a)
-.18 F(pack)72 639.6 Q .543(et containing the current time to an arbitr\
arily-chosen multicast group and UDP port.)-.1 F .542(If in)5.542 F -.2
(vo)-.4 G -.1(ke).2 G 3.042(dw).1 G(ith)-3.042 E .335(no ar)72 651.6 R
.335(guments, it recei)-.18 F -.15(ve)-.25 G 2.835(sa).15 G .335
(nd prints these pack)-2.835 F 2.836(ets. Start)-.1 F .336
(it as a sender on just one host and as a recei)2.836 F -.15(ve)-.25 G
2.836(ro).15 G(n)-2.836 E(all the other hosts.)72 663.6 Q EP
%%Page: 38 38
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-38 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E(#include <sys/types.h>)108 84 Q
(#include <sys/sock)108 96 Q(et.h>)-.1 E(#include <netinet/in.h>)108 108
Q(#include <arpa/inet.h>)108 120 Q(#include <time.h>)108 132 Q
(#include <stdio.h>)108 144 Q(#de\214ne EXAMPLE_POR)108 168 Q 10(T6)-.6
G(0123)-10 E(#de\214ne EXAMPLE_GR)108 180 Q 5(OUP "224.0.0.250")-.4 F
(main\(ar)108 204 Q(gc\))-.18 E(int ar)118 216 Q(gc;)-.18 E({)108 228 Q
(struct sockaddr_in addr;)118 240 Q(int addrlen, fd, cnt;)118 252 Q
(struct ip_mreq mreq;)118 264 Q(char message[50];)118 276 Q(fd = sock)
118 300 Q(et\(AF_INET)-.1 E 2.5(,S)-.74 G(OCK_DGRAM, 0\);)-2.5 E
(if \(fd < 0\) {)118 312 Q(perror\("sock)128 324 Q(et"\);)-.1 E -.15(ex)
128 336 S(it\(1\);).15 E(})118 348 Q(bzero\(&addr)118 372 Q 2.5(,s)-.4 G
(izeof\(addr\)\);)-2.5 E(addr)118 384 Q(.sin_f)-.55 E(amily = AF_INET)
-.1 E(;)-.55 E(addr)118 396 Q(.sin_addr)-.55 E(.s_addr = htonl\(IN)-.55
E(ADDR_ANY\);)-.35 E(addr)118 408 Q(.sin_port = htons\(EXAMPLE_POR)-.55
E(T\);)-.6 E(addrlen = sizeof\(addr\);)118 420 Q(if \(ar)118 444 Q
(gc > 1\) {)-.18 E(/* Send */)12.5 E(addr)128 456 Q(.sin_addr)-.55 E
(.s_addr = inet_addr\(EXAMPLE_GR)-.55 E(OUP\);)-.4 E(while \(1\) {)128
468 Q(time_t t = time\(0\);)138 480 Q
(sprintf\(message, "time is %-24.24s", ctime\(&t\)\);)138 492 Q
(cnt = sendto\(fd, message, sizeof\(message\), 0,)138 504 Q
(\(struct sockaddr *\)&addr)158 516 Q 2.5(,a)-.4 G(ddrlen\);)-2.5 E
(if \(cnt < 0\) {)138 528 Q(perror\("sendto"\);)148 540 Q -.15(ex)148
552 S(it\(1\);).15 E(})138 564 Q(sleep\(5\);)138 576 Q(})128 588 Q 2.5
(}e)118 600 S(lse {)-2.5 E(/* Recei)30 E .3 -.15(ve *)-.25 H(/).15 E
(if \(bind\(fd, \(struct sockaddr *\)&addr)128 612 Q 2.5(,s)-.4 G
(izeof\(addr\)\) < 0\) {)-2.5 E(perror\("bind"\);)138 624 Q -.15(ex)138
636 S(it\(1\);).15 E(})128 648 Q(mreq.imr_multiaddr)128 672 Q
(.s_addr = inet_addr\(EXAMPLE_GR)-.55 E(OUP\);)-.4 E(mreq.imr_interf)128
684 Q(ace.s_addr = htonl\(IN)-.1 E(ADDR_ANY\);)-.35 E(if \(setsock)128
696 Q(opt\(fd, IPPR)-.1 E -1.88 -.4(OT O)-.4 H(_IP).4 E 2.5(,I)-1.11 G
(P_ADD_MEMBERSHIP)-2.5 E(,)-1.11 E(&mreq, sizeof\(mreq\)\) < 0\) {)158
708 Q(perror\("setsock)138 720 Q(opt mreq"\);)-.1 E EP
%%Page: 39 39
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-39)-.45 F -.15(ex)138 84 S(it\(1\);).15 E(})128 96 Q
(while \(1\) {)128 120 Q
(cnt = recvfrom\(fd, message, sizeof\(message\), 0,)138 132 Q
(\(struct sockaddr *\)&addr)178 144 Q 2.5(,&)-.4 G(addrlen\);)-2.5 E
(if \(cnt <= 0\) {)138 156 Q(if \(cnt == 0\) {)168 168 Q(break;)183 180
Q(})168 192 Q(perror\("recvfrom"\);)158 204 Q -.15(ex)158 216 S
(it\(1\);).15 E(})138 228 Q(printf\("%s: message = \\"%s\\"\\n",)138 240
Q(inet_ntoa\(addr)158 252 Q(.sin_addr\), message\);)-.55 E(})128 264 Q
(})118 276 Q(})108 288 Q/F1 10/Times-Bold@0 SF 2.5(5.11. NS)72 318 R -.1
(Pa)2.5 G(ck).1 E(et Sequences)-.1 E F0 .013(The semantics of NS connec\
tions demand that the user both be able to look inside the netw)97 333.6
R .012(ork header)-.1 F .375(associated with an)72 345.6 R 2.875(yi)-.15
G .375(ncoming pack)-2.875 F .375(et and be able to specify what should\
 go in certain \214elds of an outgoing)-.1 F(pack)72 357.6 Q 2.618
(et. Using)-.1 F(dif)2.618 E .118(ferent calls to)-.25 F/F2 10
/Times-Italic@0 SF(setsoc)2.618 E -.1(ko)-.2 G(pt).1 E F0 2.618(,i)C
2.618(ti)-2.618 G 2.618(sp)-2.618 G .117
(ossible to indicate whether prototype headers will be asso-)-2.618 F
1.731(ciated by the user with each outgoing pack)72 369.6 R 1.732
(et \(SO_HEADERS_ON_OUTPUT\), to indicate whether the)-.1 F .82
(headers recei)72 381.6 R -.15(ve)-.25 G 3.32(db).15 G 3.32(yt)-3.32 G
.82(he system should be deli)-3.32 F -.15(ve)-.25 G .82
(red to the user \(SO_HEADERS_ON_INPUT\), or to indi-).15 F 4.204
(cate def)72 393.6 R 4.204
(ault information that should be associated with all outgoing pack)-.1 F
4.205(ets on a gi)-.1 F -.15(ve)-.25 G 6.705(ns).15 G(ock)-6.705 E(et)
-.1 E(\(SO_DEF)72 405.6 Q -.55(AU)-.74 G -.92(LT).55 G(_HEADERS\).).92 E
(The contents of a SPP header \(minus the IDP header\) are:)97 421.2 Q
(struct sphdr {)108 439.2 Q 5.29(u_char sp_cc;)142.44 451.2 R
(/* connection control */)118.45 E 2.5(#de\214ne SP_SP)108 463.2 R 121.5
(0x80 /*)7.76 F(system pack)2.5 E(et */)-.1 E 2.5(#de\214ne SP_SA)108
475.2 R 121.5(0x40 /*)6.1 F(send ackno)2.5 E(wledgement */)-.25 E 2.5
(#de\214ne SP_OB)108 487.2 R 121.5(0x20 /*)4.99 F
(attention \(out of band data\) */)2.5 E 2.5(#de\214ne SP_EM)108 499.2 R
121.5(0x10 /*)3.88 F(end of message */)2.5 E 5.29(u_char sp_dt;)142.44
511.2 R(/* datastream type */)119.55 E 2.5(u_short sp_sid;)142.44 523.2
R(/* source connection identi\214er */)115.66 E 2.5(u_short sp_did;)
142.44 535.2 R(/* destination connection identi\214er */)114.55 E 2.5
(u_short sp_seq;)142.44 547.2 R(/* sequence number */)114 E 2.5
(u_short sp_ack;)142.44 559.2 R(/* ackno)113.45 E(wledge number */)-.25
E 2.5(u_short sp_alo;)142.44 571.2 R(/* allocation number */)115.11 E
(};)108 583.2 Q .53(Here, the items of interest are the)72 601.2 R F2
(datastr)3.03 E .529(eam type)-.37 F F0 .529(and the)3.029 F F2 .529
(connection contr)3.029 F(ol)-.45 E F0 3.029(\214elds. The)3.029 F .529
(semantics of the)3.029 F .407(datastream type are de\214ned by the app\
lication\(s\) in question; the v)72 613.2 R .407
(alue of this \214eld is, by def)-.25 F .408(ault, zero, b)-.1 F(ut)-.2
E .009(it can be used to indicate things such as Xerox')72 625.2 R 2.509
(sB)-.55 G .009(ulk Data T)-2.509 F .009
(ransfer Protocol \(in which case it is set to one\).)-.35 F .255(The c\
onnection control \214eld is a mask of the \215ags de\214ned just belo)
72 637.2 R 2.756(wi)-.25 G 2.756(t. The)-2.756 F .256
(user may set or clear the end-)2.756 F .795
(of-message bit to indicate that a gi)72 649.2 R -.15(ve)-.25 G 3.294
(nm).15 G .794(essage is the last of a gi)-3.294 F -.15(ve)-.25 G 3.294
(ns).15 G .794(ubstream type, or may set/clear the)-3.294 F 1.045
(attention bit as an alternate w)72 661.2 R 1.045
(ay to indicate that a pack)-.1 F 1.045(et should be sent out-of-band.)
-.1 F 1.045(As an e)6.045 F 1.045(xample, to)-.15 F
(associate prototype headers with outgoing SPP pack)72 673.2 Q
(ets, consider:)-.1 E EP
%%Page: 40 40
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-40 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E(#include <sys/types.h>)108 84 Q
(#include <sys/sock)108 96 Q(et.h>)-.1 E(#include <netns/ns.h>)108 108 Q
(#include <netns/sp.h>)108 120 Q(...)110.5 132 Q
(struct sockaddr_ns sns, to;)108 144 Q(int s, on = 1;)108 156 Q
(struct datab)108 168 Q(uf {)-.2 E(struct sphdr proto_spp;)133 180 Q
(/* prototype header */)7.78 E(char b)133 192 Q 40.22(uf[534]; /*)-.2 F
(max. possible data by Xerox std. */)2.5 E 2.5(}b)108 204 S(uf;)-2.7 E
(...)110.5 216 Q 2.5(s=s)108 228 S(ock)-2.5 E(et\(AF_NS, SOCK_SEQP)-.1 E
-.4(AC)-.92 G(KET).4 E 2.5(,0)-.74 G(\);)-2.5 E(...)110.5 240 Q
(bind\(s, \(struct sockaddr *\) &sns, sizeof \(sns\)\);)108 252 Q
(setsock)108 264 Q(opt\(s, NSPR)-.1 E -1.88 -.4(OT O)-.4 H(_SPP).4 E 2.5
(,S)-1.11 G(O_HEADERS_ON_OUTPUT)-2.5 E 2.5(,&)-.74 G
(on, sizeof\(on\)\);)-2.5 E(...)110.5 276 Q -.2(bu)108 288 S
(f.proto_spp.sp_dt = 1;).2 E(/* b)1.78 E(ulk data */)-.2 E -.2(bu)108
300 S(f.proto_spp.sp_cc = SP_EM;).2 E(/* end-of-message */)24.56 E
(strcp)108 312 Q(y\(b)-.1 E(uf.b)-.2 E(uf, "hello w)-.2 E(orld\\n"\);)
-.1 E(sendto\(s, \(char *\) &b)108 324 Q
(uf, sizeof\(struct sphdr\) + strlen\("hello w)-.2 E(orld\\n"\),)-.1 E
(\(struct sockaddr *\) &to, sizeof\(to\)\);)118 336 Q(...)110.5 348 Q
1.103(Note that one must be careful when writing headers; if the protot\
ype header is not written with the data)72 366 R 1.232
(with which it is to be associated, the k)72 378 R 1.232
(ernel will treat the \214rst fe)-.1 F 3.732(wb)-.25 G 1.232
(ytes of the data as the header)-3.732 F 3.732(,w)-.4 G(ith)-3.732 E
.299(unpredictable results.)72 390 R 1.899 -.8(To t)5.299 H .299(urn of)
.8 F 2.799(ft)-.25 G .299(he abo)-2.799 F .599 -.15(ve a)-.15 H .299
(ssociation, and to indicate that pack).15 F .298(et headers recei)-.1 F
-.15(ve)-.25 G 2.798(db).15 G 2.798(yt)-2.798 G(he)-2.798 E
(system should be passed up to the user)72 402 Q 2.5(,o)-.4 G
(ne might use:)-2.5 E(#include <sys/types.h>)108 420 Q
(#include <sys/sock)108 432 Q(et.h>)-.1 E(#include <netns/ns.h>)108 444
Q(#include <netns/sp.h>)108 456 Q(...)110.5 468 Q(struct sockaddr sns;)
108 480 Q(int s, on = 1, of)108 492 Q 2.5(f=0)-.25 G(;)-2.5 E(...)110.5
504 Q 2.5(s=s)108 516 S(ock)-2.5 E(et\(AF_NS, SOCK_SEQP)-.1 E -.4(AC)
-.92 G(KET).4 E 2.5(,0)-.74 G(\);)-2.5 E(...)110.5 528 Q
(bind\(s, \(struct sockaddr *\) &sns, sizeof \(sns\)\);)108 540 Q
(setsock)108 552 Q(opt\(s, NSPR)-.1 E -1.88 -.4(OT O)-.4 H(_SPP).4 E 2.5
(,S)-1.11 G(O_HEADERS_ON_OUTPUT)-2.5 E 2.5(,&)-.74 G(of)-2.5 E
(f, sizeof\(of)-.25 E(f\)\);)-.25 E(setsock)108 564 Q(opt\(s, NSPR)-.1 E
-1.88 -.4(OT O)-.4 H(_SPP).4 E 2.5(,S)-1.11 G(O_HEADERS_ON_INPUT)-2.5 E
2.5(,&)-.74 G(on, sizeof\(on\)\);)-2.5 E(...)110.5 576 Q .711
(Output is handled some)97 597.6 R .711(what dif)-.25 F .711
(ferently in the IDP w)-.25 F 3.211(orld. The)-.1 F .712
(header of an IDP-le)3.211 F -.15(ve)-.25 G 3.212(lp).15 G(ack)-3.212 E
.712(et looks)-.1 F(lik)72 609.6 Q(e:)-.1 E(struct idp {)108 627.6 Q
28.88(u_short idp_sum;)135.22 639.6 R(/* Checksum */)106.77 E 28.88
(u_short idp_len;)135.22 651.6 R
(/* Length, in bytes, including header */)111.22 E 31.67(u_char idp_tc;)
135.22 663.6 R(/* T)116.22 E(ransport Control \(i.e., hop count\) */)
-.35 E 31.67(u_char idp_pt;)135.22 675.6 R(/* P)115.66 E(ack)-.15 E
(et T)-.1 E(ype \(i.e., le)-.8 E -.15(ve)-.25 G 2.5(l2p).15 G
(rotocol\) */)-2.5 E(struct ns_addr)135.22 687.6 Q 106.5(idp_dna; /*)5 F
(Destination Netw)2.5 E(ork Address */)-.1 E(struct ns_addr)135.22 699.6
Q 107.61(idp_sna; /*)5 F(Source Netw)2.5 E(ork Address */)-.1 E(};)108
711.6 Q .215(The primary \214eld of interest in an IDP header is the)72
729.6 R/F1 10/Times-Italic@0 SF(pac)2.715 E -.1(ke)-.2 G 2.715(tt).1 G
(ype)-2.715 E F0 2.715(\214eld. The)2.715 F .215(standard v)2.715 F .215
(alues for this \214eld are)-.25 F EP
%%Page: 41 41
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-41)-.45 F(\(as de\214ned in <)72 84 Q/F1 10
/Times-Italic@0 SF(netns/ns.h)A F0(>\):)A(#de\214ne NSPR)108 102 Q -1.88
-.4(OT O)-.4 H 27.94(_RI 1).4 F(/* Routing Information */)67 E
(#de\214ne NSPR)108 114 Q -1.88 -.4(OT O)-.4 H 10.72(_ECHO 2).4 F
(/* Echo Protocol */)67 E(#de\214ne NSPR)108 126 Q -1.88 -.4(OT O)-.4 H
(_ERR).4 E 5(OR 3)-.4 F(/* Error Protocol */)67 E(#de\214ne NSPR)108 138
Q -1.88 -.4(OT O)-.4 H 26.27(_PE 4).4 F(/* P)67 E(ack)-.15 E
(et Exchange */)-.1 E(#de\214ne NSPR)108 150 Q -1.88 -.4(OT O)-.4 H
21.26(_SPP 5).4 F(/* Sequenced P)67 E(ack)-.15 E(et */)-.1 E -.15(Fo)72
168 S 3.364(rS).15 G .864(PP connections, the contents of this \214eld \
are automatically set to NSPR)-3.364 F -1.88 -.4(OT O)-.4 H .864
(_SPP; for IDP pack).4 F(ets,)-.1 E(this v)72 180 Q(alue def)-.25 E
(aults to zero, which means `)-.1 E(`unkno)-.74 E(wn')-.25 E('.)-.74 E
(Setting the v)97 195.6 Q(alue of that \214eld with SO_DEF)-.25 E -.55
(AU)-.74 G -.92(LT).55 G(_HEADERS is easy:).92 E(#include <sys/types.h>)
108 213.6 Q(#include <sys/sock)108 225.6 Q(et.h>)-.1 E
(#include <netns/ns.h>)108 237.6 Q(#include <netns/idp.h>)108 249.6 Q
(...)110.5 261.6 Q(struct sockaddr sns;)108 273.6 Q
(struct idp proto_idp;)108 285.6 Q(/* prototype header */)43.33 E
(int s, on = 1;)108 297.6 Q(...)110.5 309.6 Q 2.5(s=s)108 321.6 S(ock)
-2.5 E(et\(AF_NS, SOCK_DGRAM, 0\);)-.1 E(...)110.5 333.6 Q
(bind\(s, \(struct sockaddr *\) &sns, sizeof \(sns\)\);)108 345.6 Q
(proto_idp.idp_pt = NSPR)108 357.6 Q -1.88 -.4(OT O)-.4 H 5.88(_PE; /*)
.4 F(pack)2.5 E(et e)-.1 E(xchange */)-.15 E(setsock)108 369.6 Q
(opt\(s, NSPR)-.1 E -1.88 -.4(OT O)-.4 H(_IDP).4 E 2.5(,S)-1.11 G(O_DEF)
-2.5 E -.55(AU)-.74 G -.92(LT).55 G(_HEADERS, \(char *\) &proto_idp,).92
E(sizeof\(proto_idp\)\);)118 381.6 Q(...)110.5 393.6 Q 8.735
(Using SO_HEADERS_ON_OUTPUT is some)97 415.2 R 8.734(what more dif)-.25
F 11.234(\214cult. When)-.25 F(SO_HEAD-)11.234 E .175
(ERS_ON_OUTPUT is turned on for an IDP sock)72 427.2 R .175
(et, the sock)-.1 F .176
(et becomes \(for all intents and purposes\) a ra)-.1 F(w)-.15 E(sock)72
439.2 Q 2.661(et. In)-.1 F .161
(this case, all the \214elds of the prototype header \(e)2.661 F .16
(xcept the length and checksum \214elds, which are)-.15 F .194
(computed by the k)72 451.2 R .194
(ernel\) must be \214lled in correctly in order for the sock)-.1 F .194
(et to send and recei)-.1 F .495 -.15(ve d)-.25 H .195(ata in a sen-).15
F .601(sible manner)72 463.2 R 5.601(.T)-.55 G 3.101(ob)-6.401 G 3.101
(em)-3.101 G .601(ore speci\214c, the source address must be set to tha\
t of the host sending the data; the)-3.101 F .036(destination address m\
ust be set to that of the host for whom the data is intended; the pack)
72 475.2 R .036(et type must be set)-.1 F .482(to whate)72 487.2 R -.15
(ve)-.25 G 2.982(rv).15 G .481
(alue is desired; and the hopcount must be set to some reasonable v)
-3.232 F .481(alue \(almost al)-.25 F -.1(wa)-.1 G .481(ys zero\).).1 F
.217(It should also be noted that simply sending data using)72 499.2 R
F1(write)2.717 E F0 .217(will not w)2.717 F .217(ork unless a)-.1 F F1
(connect)2.717 E F0(or)2.717 E F1(sendto)2.717 E F0 .217(call is)2.717 F
.777(used, in spite of the f)72 511.2 R .777(act that it is the destina\
tion address in the prototype header that is used, not the one)-.1 F(gi)
72 523.2 Q -.15(ve)-.25 G 3.041(ni).15 G 3.041(ne)-3.041 G .541
(ither of those calls.)-3.041 F -.15(Fo)5.541 G 3.041(ra).15 G .541
(lmost all IDP applications , using SO_DEF)-3.041 F -.55(AU)-.74 G -.92
(LT).55 G .542(_HEADERS is easier).92 F
(and more desirable than writing headers.)72 535.2 Q/F2 10/Times-Bold@0
SF 2.5(5.12. Thr)72 559.2 R(ee-way Handshak)-.18 E(e)-.1 E F0 1.331
(The semantics of SPP connections indicates that a three-w)97 574.8 R
1.331(ay handshak)-.1 F 1.331(e, in)-.1 F -.2(vo)-.4 G 1.33
(lving changes in the).2 F .007(datastream type, should \212 b)72 586.8
R .007(ut is not absolutely required to \212 tak)-.2 F 2.507(ep)-.1 G
.008(lace before a SPP connection is closed.)-2.507 F .467
(Almost all SPP connections are `)72 598.8 R(`well-beha)-.74 E -.15(ve)
-.2 G(d').15 E 2.967('i)-.74 G 2.966(nt)-2.967 G .466
(his manner; when communicating with an)-2.966 F 2.966(yp)-.15 G .466
(rocess, it)-2.966 F 1.695(is best to assume that the three-w)72 610.8 R
1.696(ay handshak)-.1 F 4.196(ei)-.1 G 4.196(sr)-4.196 G 1.696
(equired unless it is kno)-4.196 F 1.696(wn for certain that it is not)
-.25 F 2.792(required. In)72 622.8 R 2.792(at)2.792 G(hree-w)-2.792 E
.292(ay close, the closing process indicates that it wishes to close th\
e connection by send-)-.1 F .308(ing a zero-length pack)72 634.8 R .309
(et with end-of-message set and with datastream type 254.)-.1 F .309
(The other side of the con-)5.309 F .406
(nection indicates that it is OK to close by sending a zero-length pack)
72 646.8 R .406(et with end-of-message set and datas-)-.1 F .609
(tream type 255.)72 658.8 R(Finally)5.609 E 3.109(,t)-.65 G .609
(he closing process replies with a zero-length pack)-3.109 F .61
(et with substream type 255; at)-.1 F .83
(this point, the connection is considered closed.)72 670.8 R .83
(The follo)5.83 F .83(wing code fragments are simpli\214ed e)-.25 F .83
(xamples of)-.15 F(ho)72 682.8 Q 2.507(wo)-.25 G .007
(ne might handle this three-w)-2.507 F .007(ay handshak)-.1 F 2.507(ea)
-.1 G 2.507(tt)-2.507 G .007(he user le)-2.507 F -.15(ve)-.25 G .008
(l; in the future, support for this type of close).15 F .768
(will probably be pro)72 694.8 R .768
(vided as part of the C library or as part of the k)-.15 F 3.268
(ernel. The)-.1 F .768(\214rst code fragment belo)3.268 F(w)-.25 E .608
(illustrates ho)72 706.8 R 3.108(wap)-.25 G .608
(rocess might handle three-w)-3.108 F .608(ay handshak)-.1 F 3.108(ei)
-.1 G 3.108(fi)-3.108 G 3.108(ts)-3.108 G .608
(ees that the process it is communicating)-3.108 F(with w)72 718.8 Q
(ants to close the connection:)-.1 E EP
%%Page: 42 42
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-42 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E(#include <sys/types.h>)108 84 Q
(#include <sys/sock)108 96 Q(et.h>)-.1 E(#include <netns/ns.h>)108 108 Q
(#include <netns/sp.h>)108 120 Q(...)110.5 132 Q(#ifndef SPPSST_END)108
144 Q(#de\214ne SPPSST_END 254)108 156 Q(#de\214ne SPPSST_ENDREPL)108
168 Q 2.5(Y2)-1 G(55)-2.5 E(#endif)108 180 Q(struct sphdr proto_sp;)108
192 Q(int s;)108 204 Q(...)110.5 216 Q(read\(s, b)108 228 Q(uf, B)-.2 E
(UFSIZE\);)-.1 E(if \(\(\(struct sphdr *\)b)108 240 Q
(uf\)->sp_dt == SPPSST_END\) {)-.2 E(/*)133 252 Q 2.5(*S)135.5 264 S
(PPSST_END indicates that the other side w)-2.5 E(ants to)-.1 E 2.5(*c)
135.5 276 S(lose.)-2.5 E(*/)135.5 288 Q(proto_sp.sp_dt = SPPSST_ENDREPL)
133 300 Q -.92(Y;)-1 G(proto_sp.sp_cc = SP_EM;)133 312 Q(setsock)133 324
Q(opt\(s, NSPR)-.1 E -1.88 -.4(OT O)-.4 H(_SPP).4 E 2.5(,S)-1.11 G
(O_DEF)-2.5 E -.55(AU)-.74 G -.92(LT).55 G
(_HEADERS, \(char *\)&proto_sp,).92 E(sizeof\(proto_sp\)\);)143 336 Q
(write\(s, b)133 348 Q(uf, 0\);)-.2 E(/*)133 360 Q 2.5(*W)135.5 372 S
(rite a zero-length pack)-2.5 E
(et with datastream type = SPPSST_ENDREPL)-.1 E(Y)-1 E 2.5(*t)135.5 384
S 2.5(oi)-2.5 G(ndicate that the close is OK with us.)-2.5 E(The pack)5
E(et that we)-.1 E 2.5(*d)135.5 396 S(on')-2.5 E 2.5(ts)-.18 G
(ee \(because we don')-2.5 E 2.5(tl)-.18 G(ook for it\) is another pack)
-2.5 E(et)-.1 E 2.5(*f)135.5 408 S
(rom the other side of the connection, with SPPSST_ENDREPL)-2.5 E(Y)-1 E
2.5(*o)135.5 420 S 2.5(ni)-2.5 G 2.5(ti)-2.5 G(t, too.)-2.5 E
(Once that pack)5 E(et is sent, the connection is)-.1 E 2.5(*c)135.5 432
S(onsidered closed; note that we really ought to retransmit)-2.5 E 2.5
(*t)135.5 444 S(he close for some time if we do not get a reply)-2.5 E
(.)-.65 E(*/)135.5 456 Q(close\(s\);)133 468 Q(})108 480 Q(...)110.5 492
Q 1.6 -.8(To i)72 510 T(ndicate to another process that we w).8 E
(ould lik)-.1 E 2.5(et)-.1 G 2.5(oc)-2.5 G
(lose the connection, the follo)-2.5 E(wing code w)-.25 E(ould suf)-.1 E
(\214ce:)-.25 E EP
%%Page: 43 43
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-43)-.45 F(#include <sys/types.h>)108 84 Q
(#include <sys/sock)108 96 Q(et.h>)-.1 E(#include <netns/ns.h>)108 108 Q
(#include <netns/sp.h>)108 120 Q(...)110.5 132 Q(#ifndef SPPSST_END)108
144 Q(#de\214ne SPPSST_END 254)108 156 Q(#de\214ne SPPSST_ENDREPL)108
168 Q 2.5(Y2)-1 G(55)-2.5 E(#endif)108 180 Q(struct sphdr proto_sp;)108
192 Q(int s;)108 204 Q(...)110.5 216 Q(proto_sp.sp_dt = SPPSST_END;)108
228 Q(proto_sp.sp_cc = SP_EM;)108 240 Q(setsock)108 252 Q(opt\(s, NSPR)
-.1 E -1.88 -.4(OT O)-.4 H(_SPP).4 E 2.5(,S)-1.11 G(O_DEF)-2.5 E -.55
(AU)-.74 G -.92(LT).55 G(_HEADERS, \(char *\)&proto_sp,).92 E
(sizeof\(proto_sp\)\);)118 264 Q(write\(s, b)108 276 Q(uf, 0\);)-.2 E
(/* send the end request */)12.99 E(proto_sp.sp_dt = SPPSST_ENDREPL)108
288 Q -.92(Y;)-1 G(setsock)108 300 Q(opt\(s, NSPR)-.1 E -1.88 -.4(OT O)
-.4 H(_SPP).4 E 2.5(,S)-1.11 G(O_DEF)-2.5 E -.55(AU)-.74 G -.92(LT).55 G
(_HEADERS, \(char *\)&proto_sp,).92 E(sizeof\(proto_sp\)\);)118 312 Q
(/*)108 324 Q 2.5(*W)110.5 336 S 2.5(ea)-3.3 G
(ssume \(perhaps unwisely\))-2.5 E 2.5(*t)110.5 348 S
(hat the other side will send the)-2.5 E 2.5(*E)110.5 360 S(NDREPL)-2.5
E 2.58 -1.29(Y, s)-1 H 2.5(ow)1.29 G(e')-2.5 E
(ll just send our \214nal ENDREPL)-.1 E(Y)-1 E 2.5(*a)110.5 372 S 2.5
(si)-2.5 G 2.5(fw)-2.5 G(e')-2.5 E 2.5(ds)-.5 G(een theirs already)-2.5
E(.)-.65 E(*/)110.5 384 Q(write\(s, b)108 396 Q(uf, 0\);)-.2 E
(close\(s\);)108 408 Q(...)110.5 420 Q/F1 10/Times-Bold@0 SF 2.5
(5.13. P)72 450 R(ack)-.1 E(et Exchange)-.1 E F0 1.206(The Xerox standa\
rd protocols include a protocol that is both reliable and datagram-orie\
nted.)97 465.6 R(This)6.206 E .28(protocol is kno)72 477.6 R .28
(wn as P)-.25 F(ack)-.15 E .28(et Exchange \(PEX or PE\) and, lik)-.1 F
2.781(eS)-.1 G(PP)-2.781 E 2.781(,i)-1.11 G 2.781(sl)-2.781 G .281
(ayered on top of IDP)-2.781 F 5.281(.P)-1.11 G .281(EX is impor)-5.281
F(-)-.2 E .386
(tant for a number of things: Courier remote procedure calls may be e)72
489.6 R .386(xpedited through the use of PEX, and)-.15 F(man)72 501.6 Q
3.353(yX)-.15 G .853(erox serv)-3.353 F .853
(ers are located by doing a PEX `)-.15 F(`BroadcastF)-.74 E(orServ)-.15
E(ers')-.15 E 3.354('o)-.74 G 3.354(peration. Although)-3.354 F .854
(there is no)3.354 F .214(implementation of PEX in the k)72 513.6 R .214
(ernel, it may be simulated at the user le)-.1 F -.15(ve)-.25 G 2.713
(lw).15 G .213(ith some cle)-2.713 F -.15(ve)-.25 G 2.713(rc).15 G .213
(oding and the)-2.713 F(use of one peculiar)72 525.6 Q/F2 10
/Times-Italic@0 SF -.1(ge)2.5 G(tsoc).1 E -.1(ko)-.2 G(pt).1 E F0 5(.A)C
(PEX pack)-2.5 E(et looks lik)-.1 E(e:)-.1 E(/*)108 543.6 Q 2.5(*T)110.5
555.6 S(he pack)-2.5 E(et-e)-.1 E(xchange header sho)-.15 E
(wn here is not de\214ned)-.25 E 2.5(*a)110.5 567.6 S 2.5(sp)-2.5 G
(art of an)-2.5 E 2.5(yo)-.15 G 2.5(ft)-2.5 G
(he system include \214les.)-2.5 E(*/)110.5 579.6 Q(struct pe)108 591.6
Q 2.5(x{)-.15 G(struct idp)135.22 603.6 Q 115.94(p_idp; /*)5 F
(idp header */)2.5 E 10(u_short ph_id[2];)135.22 615.6 R
(/* unique transaction ID for pe)106.78 E 2.5(x*)-.15 G(/)-2.5 E 10
(u_short ph_client;)135.22 627.6 R(/* client type \214eld for pe)104 E
2.5(x*)-.15 G(/)-2.5 E(};)108 639.6 Q(The)72 657.6 Q F2(ph_id)2.815 E F0
.316(\214eld is used to hold a `)2.815 F .316(`unique id')-.74 F 2.816
('t)-.74 G .316(hat is used in duplicate suppression; the)-2.816 F F2
(ph_client)2.816 E F0 .316(\214eld indi-)2.816 F .737
(cates the PEX client type \(similar to the pack)72 669.6 R .737
(et type \214eld in the IDP header\).)-.1 F .736
(PEX reliability stems from)5.736 F .183(the f)72 681.6 R .183
(act that it is an idempotent \(`)-.1 F .184(`I send a pack)-.74 F .184
(et to you, you send a pack)-.1 F .184(et to me')-.1 F .184
('\) protocol.)-.74 F .184(Processes on)5.184 F .239
(each side of the connection may use the unique id to determine if the)
72 693.6 R 2.738(yh)-.15 G -2.25 -.2(av e)-2.738 H .238(seen a gi)2.938
F -.15(ve)-.25 G 2.738(np).15 G(ack)-2.738 E .238(et before \(the)-.1 F
.551(unique id \214eld dif)72 705.6 R .551(fers on each pack)-.25 F .552
(et sent\) so that duplicates may be detected, and to indicate which me\
s-)-.1 F .285(sage a gi)72 717.6 R -.15(ve)-.25 G 2.785(np).15 G(ack)
-2.785 E .285(et is in response to.)-.1 F .285(If a pack)5.285 F .285
(et with a gi)-.1 F -.15(ve)-.25 G 2.784(nu).15 G .284
(nique id is sent and no response is recei)-2.784 F -.15(ve)-.25 G(d).15
E 1.616(in a gi)72 729.6 R -.15(ve)-.25 G 4.116(na).15 G 1.617
(mount of time, the pack)-4.116 F 1.617
(et is retransmitted until it is decided that no response will e)-.1 F
-.15(ve)-.25 G 4.117(rb).15 G(e)-4.117 E EP
%%Page: 44 44
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-44 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E(recei)72 84 Q -.15(ve)-.25 G 3.121(d. T).15 F
3.121(os)-.8 G .621(imulate PEX, one must be able to generate unique id\
s -- something that is hard to do at the)-3.121 F .185(user le)72 96 R
-.15(ve)-.25 G 2.685(lw).15 G .185(ith an)-2.685 F 2.685(yr)-.15 G .185
(eal guarantee that the id is really unique.)-2.685 F .186
(Therefore, a means \(via)5.186 F/F1 10/Times-Italic@0 SF -.1(ge)2.686 G
(tsoc).1 E -.1(ko)-.2 G(pt).1 E F0 2.686(\)h)C .186(as been)-2.686 F
(pro)72 108 Q .051(vided for getting unique ids from the k)-.15 F 2.551
(ernel. The)-.1 F(follo)2.551 E .051(wing code fragment indicates ho)
-.25 F 2.551(wt)-.25 G 2.551(og)-2.551 G .051(et a unique)-2.551 F(id:)
72 120 Q(long uniqueid;)108 138 Q(int s, idsize = sizeof\(uniqueid\);)
108 150 Q(...)110.5 162 Q 2.5(s=s)108 174 S(ock)-2.5 E
(et\(AF_NS, SOCK_DGRAM, 0\);)-.1 E(...)110.5 186 Q(/* get id from the k)
108 198 Q(ernel -- only on IDP sock)-.1 E(ets */)-.1 E(getsock)108 210 Q
(opt\(s, NSPR)-.1 E -1.88 -.4(OT O)-.4 H
(_PE, SO_SEQNO, \(char *\)&uniqueid, &idsize\);).4 E(...)110.5 222 Q
.391(The retransmission and duplicate suppression code required to simu\
late PEX fully is left as an e)72 240 R -.15(xe)-.15 G .392(rcise for)
.15 F(the reader)72 252 Q(.)-.55 E/F2 10/Times-Bold@0 SF 2.5
(5.14. Inetd)72 276 R F0 1.108(One of the daemons pro)97 291.6 R 1.107
(vided with 4.4BSD is)-.15 F F1(inetd)3.607 E F0 3.607(,t)C 1.107
(he so called `)-3.607 F 1.107(`internet super)-.74 F(-serv)-.2 E(er)
-.15 E -.7(.')-.55 G 6.107('H)-.04 G -.2(av)-6.107 G(ing).2 E .108
(one daemon listen for requests for man)72 303.6 R 2.608(yd)-.15 G .108
(aemons instead of ha)-2.608 F .108(ving each daemon listen for its o)
-.2 F .109(wn requests)-.25 F 1.213
(reduces the number of idle daemons and simplies their implementation.)
72 315.6 R F1(Inetd)6.213 E F0 1.212(handles tw)3.712 F 3.712(ot)-.1 G
1.212(ypes of ser)-3.712 F(-)-.2 E 1.295(vices: standard and TCPMUX.)72
327.6 R 3.795(As)6.295 G 1.295(tandard service has a well-kno)-3.795 F
1.296(wn port assigned to it and is listed in)-.25 F F1(/etc/services)72
339.6 Q F0(\(see)2.655 E F1(services)2.655 E F0 .154
(\(5\)\); it may be a service that implements an of)B .154
(\214cial Internet standard or is a BSD-)-.25 F .474
(speci\214c service.)72 351.6 R .475
(TCPMUX services are nonstandard and do not ha)5.474 F .775 -.15(ve a w)
-.2 H(ell-kno).15 E .475(wn port assigned to them.)-.25 F(The)72 363.6 Q
3.161(ya)-.15 G .661(re in)-3.161 F -.2(vo)-.4 G -.1(ke).2 G 3.161(df).1
G(rom)-3.161 E F1(inetd)3.161 E F0 .661
(when a program connects to the "tcpmux" well-kno)3.161 F .66
(wn port and speci\214es the)-.25 F(service name.)72 375.6 Q
(This is useful for adding locally-de)5 E -.15(ve)-.25 G(loped serv).15
E(ers.)-.15 E F1(Inetd)97 391.2 Q F0 .098(is in)2.598 F -.2(vo)-.4 G -.1
(ke).2 G 2.599(da).1 G 2.599(tb)-2.599 G .099
(oot time, and determines from the \214le)-2.599 F F1(/etc/inetd.conf)
2.599 E F0 .099(the serv)2.599 F .099(ers for which it is to)-.15 F 2.57
(listen. Once)72 403.2 R .07
(this information has been read and a pristine en)2.57 F .069
(vironment created,)-.4 F F1(inetd)2.569 E F0 .069
(proceeds to create one)2.569 F(sock)72 415.2 Q
(et for each service it is to listen for)-.1 E 2.5(,b)-.4 G
(inding the appropriate port number to each sock)-2.5 E(et.)-.1 E F1
(Inetd)97 430.8 Q F0 .123(then performs a)2.623 F F1(select)2.623 E F0
.124(on all these sock)2.624 F .124(ets for read a)-.1 F -.25(va)-.2 G
(ilability).25 E 2.624(,w)-.65 G .124(aiting for somebody wishing a)
-2.724 F .02(connection to the service corresponding to that sock)72
442.8 R(et.)-.1 E F1(Inetd)5.02 E F0 .02(then performs an)2.52 F F1
(accept)2.52 E F0 .02(on the sock)2.52 F .02(et in ques-)-.1 F(tion,)72
454.8 Q F1(fork)2.772 E F0(s,)A F1(dup)2.772 E F0 2.772(st)C .272(he ne)
-2.772 F 2.772(ws)-.25 G(ock)-2.772 E .272(et to \214le descriptors 0 a\
nd 1 \(stdin and stdout\), closes other open \214le descrip-)-.1 F
(tors, and)72 466.8 Q F1 -.2(ex)2.5 G(ec).2 E F0 2.5(st)C
(he appropriate serv)-2.5 E(er)-.15 E(.)-.55 E(Serv)97 482.4 Q .071
(ers making use of)-.15 F F1(inetd)2.571 E F0 .071
(are considerably simpli\214ed, as)2.571 F F1(inetd)2.571 E F0(tak)2.571
E .07(es care of the majority of the IPC)-.1 F -.1(wo)72 494.4 S .17
(rk required in establishing a connection.).1 F .17(The serv)5.17 F .17
(er in)-.15 F -.2(vo)-.4 G -.1(ke).2 G 2.67(db).1 G(y)-2.67 E F1(inetd)
2.67 E F0 -.15(ex)2.67 G .17(pects the sock).15 F .17
(et connected to its)-.1 F .112
(client on \214le descriptors 0 and 1, and may immediately perform an)72
506.4 R 2.612(yo)-.15 G .112(perations such as)-2.612 F F1 -.37(re)2.612
G(ad).37 E F0(,)A F1(write)2.612 E F0(,)A F1(send)2.612 E F0 2.612(,o)C
(r)-2.612 E F1 -.37(re)72 518.4 S(cv).37 E F0 6.477(.I)C 1.477
(ndeed, serv)-6.477 F 1.477(ers may use b)-.15 F(uf)-.2 E 1.478
(fered I/O as pro)-.25 F 1.478(vided by the `)-.15 F(`stdio')-.74 E
3.978('c)-.74 G(on)-3.978 E -.15(ve)-.4 G 1.478
(ntions, as long as as the).15 F(y)-.15 E(remember to use)72 530.4 Q F1
-.18<668d>2.5 G(ush).18 E F0(when appropriate.)2.5 E .49
(One call which may be of interest to indi)97 546 R .49
(viduals writing serv)-.25 F .49(ers under)-.15 F F1(inetd)2.99 E F0 .49
(is the)2.99 F F1 -.1(ge)2.99 G(tpeername).1 E F0(call,)2.99 E .648(whi\
ch returns the address of the peer \(process\) connected on the other e\
nd of the sock)72 558 R 3.149(et. F)-.1 F .649(or e)-.15 F .649
(xample, to)-.15 F .176(log the Internet address in `)72 570 R .176
(`dot notation')-.74 F 2.676('\()-.74 G .176(e.g., `)-2.676 F
(`128.32.0.4')-.74 E .176('\) of a client connected to a serv)-.74 F
.175(er under)-.15 F F1(inetd)2.675 E F0(,)A(the follo)72 582 Q
(wing code might be used:)-.25 E(struct sockaddr_in name;)108 600 Q
(int namelen = sizeof \(name\);)108 612 Q(...)110.5 624 Q
(if \(getpeername\(0, \(struct sockaddr *\)&name, &namelen\) < 0\) {)108
636 Q(syslog\(LOG_ERR, "getpeername: %m"\);)133 648 Q -.15(ex)133 660 S
(it\(1\);).15 E 2.5(}e)108 672 S(lse)-2.5 E
(syslog\(LOG_INFO, "Connection from %s", inet_ntoa\(name.sin_addr\)\);)
133 684 Q(...)110.5 696 Q 1.107(While the)72 714 R F1 -.1(ge)3.607 G
(tpeername).1 E F0 1.108
(call is especially useful when writing programs to run with)3.607 F F1
(inetd)3.608 E F0 3.608(,i)C 3.608(tc)-3.608 G 1.108(an be used)-3.608 F
(under other circumstances.)72 726 Q(Be w)5 E(arned, ho)-.1 E(we)-.25 E
-.15(ve)-.25 G .8 -.4(r, t).15 H(hat).4 E F1 -.1(ge)2.5 G(tpeername).1 E
F0(will f)2.5 E(ail on UNIX domain sock)-.1 E(ets.)-.1 E EP
%%Page: 45 45
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Adv)72 48 Q(anced 4.4BSD IPC T)-.25 E 257.98
(utorial PSD:21-45)-.45 F .054
(Standard TCP services are assigned unique well-kno)97 84 R .054
(wn port numbers in the range of 0 to 1023 by the)-.25 F 1.187
(Internet Assigned Numbers Authority \(IAN)72 96 R 3.687
(A@ISI.EDU\). The)-.35 F 1.187
(limited number of ports in this range are)3.687 F .89(assigned to of)72
108 R .89(\214cial Internet protocols.)-.25 F .89
(The TCPMUX service allo)5.89 F .89(ws you to add locally-de)-.25 F -.15
(ve)-.25 G .89(loped proto-).15 F .796(cols without needing an of)72 120
R .796(\214cial TCP port assignment.)-.25 F .797
(The TCPMUX protocol described in RFC-1078 is)5.796 F(simple:)72 132 Q
-.74(``)97 147.6 S 2.559(AT)-.06 G .059
(CP client connects to a foreign host on TCP port 1.)-2.559 F .059
(It sends the service name follo)5.059 F .058(wed by)-.25 F 4.222(ac)97
159.6 S 1.722(arriage-return line-feed <CRLF>.)-4.222 F 1.722
(The service name is ne)6.722 F -.15(ve)-.25 G 4.223(rc).15 G 1.723
(ase sensiti)-4.223 F -.15(ve)-.25 G 6.723(.T).15 G 1.723(he serv)-6.723
F(er)-.15 E 1.884(replies with a single character indicating positi)97
171.6 R 2.184 -.15(ve \()-.25 H 1.883("+"\) or ne).15 F -.05(ga)-.15 G
(ti).05 E 2.183 -.15(ve \()-.25 H 1.883("\255"\) ackno).15 F(wledgment,)
-.25 E .86(immediately follo)97 183.6 R .86
(wed by an optional message of e)-.25 F .86
(xplanation, terminated with a <CRLF>.)-.15 F(If)5.86 E(the reply w)97
195.6 Q(as positi)-.1 E -.15(ve)-.25 G 2.5(,t).15 G
(he selected protocol be)-2.5 E
(gins; otherwise the connection is closed.)-.15 E -.74('')-.7 G 1.125
(In 4.4BSD, the TCPMUX service is b)72 211.2 R 1.125(uilt into)-.2 F/F1
10/Times-Italic@0 SF(inetd)3.625 E F0 3.625(,t)C 1.125(hat is,)-3.625 F
F1(inetd)3.625 E F0 1.124(listens on TCP port 1 for requests for)3.625 F
(TCPMUX services listed in)72 223.2 Q F1(inetd.conf)2.5 E F0(.)A F1
(inetd)5 E F0(\(8\) describes the format of TCPMUX entries for)A F1
(inetd.conf)2.5 E F0(.)A 1.073(The follo)97 238.8 R 1.074(wing is an e)
-.25 F 1.074(xample TCPMUX serv)-.15 F 1.074(er and its)-.15 F F1
(inetd.conf)3.574 E F0(entry)3.574 E 6.074(.M)-.65 G 1.074
(ore sophisticated serv)-6.074 F(ers)-.15 E(may w)72 250.8 Q
(ant to do additional processing before returning the positi)-.1 E .3
-.15(ve o)-.25 H 2.5(rn).15 G -2.25 -.15(eg a)-2.5 H(ti).15 E .3 -.15
(ve a)-.25 H(ckno).15 E(wledgement.)-.25 E(#include <sys/types.h>)108
268.8 Q(#include <stdio.h>)108 280.8 Q(main\(\))108 304.8 Q({)108 316.8
Q(time_t t;)128 328.8 Q(printf\("+Go\\r\\n"\);)128 352.8 Q -.25<668d>128
364.8 S(ush\(stdout\);).25 E(time\(&t\);)128 376.8 Q
(printf\("%d = %s", t, ctime\(&t\)\);)128 388.8 Q -.25<668d>128 400.8 S
(ush\(stdout\);).25 E(})108 412.8 Q(The)72 430.8 Q F1(inetd.conf)2.5 E
F0(entry is:)2.5 E(tcpmux/current_time stream tcp no)108 448.8 Q -.1(wa)
-.25 G(it nobody /d/curtime curtime).1 E(Here')72 466.8 Q 2.5(st)-.55 G
(he portion of the client code that handles the TCPMUX handshak)-2.5 E
(e:)-.1 E EP
%%Page: 46 46
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 257.98(PSD:21-46 Adv)72 48 R(anced 4.4BSD IPC T)
-.25 E(utorial)-.45 E(char line[B)108 84 Q(UFSIZ];)-.1 E(FILE *fp;)108
96 Q(...)110.5 108 Q(/* Use stdio for reading data from the serv)108 132
Q(er */)-.15 E(fp = fdopen\(sock, "r"\);)108 144 Q(if \(fp == NULL\) {)
108 156 Q(fprintf\(stderr)118 168 Q 2.5(,")-.4 G(Can')-2.5 E 2.5(tc)-.18
G(reate \214le pointer\\n"\);)-2.5 E -.15(ex)118 180 S(it\(1\);).15 E(})
108 192 Q(/* Send service request */)108 216 Q
(sprintf\(line, "%s\\r\\n", "current_time"\);)108 228 Q
(if \(write\(sock, line, strlen\(line\)\) < 0\) {)108 240 Q
(perror\("write"\);)118 252 Q -.15(ex)118 264 S(it\(1\);).15 E(})108 276
Q(/* Get A)108 300 Q(CK/N)-.4 E(AK response from the serv)-.35 E(er */)
-.15 E(if \(fgets\(line, sizeof\(line\), fp\) == NULL\) {)108 312 Q
(if \(feof\(fp\)\) {)118 324 Q(die\(\);)128 336 Q 2.5(}e)118 348 S
(lse {)-2.5 E(fprintf\(stderr)128 360 Q 2.5(,")-.4 G
(Error reading response\\n"\);)-2.5 E -.15(ex)128 372 S(it\(1\);).15 E
(})118 384 Q(})108 396 Q(/* Delete <CR> */)108 420 Q(if \(\(lp = inde)
108 432 Q(x\(line, ')-.15 E('\)\) != NULL\) {)-10 I(*lp = ')118 444 Q
(';)5 E(})108 456 Q(switch \(line[0]\) {)108 480 Q(case '+':)118 492 Q
(printf\("Got A)138 504 Q(CK: %s\\n", &line[1]\);)-.4 E(break;)138 516 Q
(case '-':)118 528 Q(printf\("Got N)138 540 Q(AK: %s\\n", &line[1]\);)
-.35 E -.15(ex)138 552 S(it\(0\);).15 E(def)118 564 Q(ault:)-.1 E
(printf\("Got unkno)138 576 Q(wn response: %s\\n", line\);)-.25 E -.15
(ex)138 588 S(it\(1\);).15 E(})108 600 Q
(/* Get rest of data from the serv)108 624 Q(er */)-.15 E
(while \(\(fgets\(line, sizeof\(line\), fp\)\) != NULL\) {)108 636 Q
(fputs\(line, stdout\);)118 648 Q(})108 660 Q EP
%%Trailer
end
%%EOF
